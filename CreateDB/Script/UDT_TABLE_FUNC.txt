USE MASTER
GO
CREATE DATABASE [V@LID49V6_cms_2020]
GO
USE [V@LID49V6_cms_2020]
GO

-- Schema --------------------
CREATE SCHEMA SIE
GO

----- UDT ----------------------
CREATE TYPE [dbo].[KODEBL] FROM [bit] NOT NULL
GO
CREATE TYPE [dbo].[KODEC1] FROM [char](1) NULL
GO
CREATE TYPE [dbo].[KODEC10] FROM [char](10) NULL
GO
CREATE TYPE [dbo].[KODEC2] FROM [char](2) NULL
GO
CREATE TYPE [dbo].[KODEC20] FROM [char](20) NULL
GO
CREATE TYPE [dbo].[KODEC3] FROM [char](3) NULL
GO
CREATE TYPE [dbo].[KODEC30] FROM [char](30) NULL
GO
CREATE TYPE [dbo].[KODEC50] FROM [char](50) NULL
GO
CREATE TYPE [dbo].[KODED] FROM [decimal](19, 4) NULL
GO
CREATE TYPE [dbo].[KODEDT] FROM [datetime] NULL
GO
CREATE TYPE [dbo].[KODEI] FROM [int] NULL
GO
CREATE TYPE [dbo].[KODEM] FROM [money] NULL
GO
CREATE TYPE [dbo].[KODEN] FROM [numeric](19, 4) NULL
GO
CREATE TYPE [dbo].[KODEVC10] FROM [varchar](10) NULL
GO
CREATE TYPE [dbo].[KODEVC100] FROM [varchar](100) NULL
GO
CREATE TYPE [dbo].[KODEVC1024] FROM [varchar](1024) NULL
GO
CREATE TYPE [dbo].[KODEVC20] FROM [varchar](20) NULL
GO
CREATE TYPE [dbo].[KODEVC200] FROM [varchar](200) NULL
GO
CREATE TYPE [dbo].[KODEVC2048] FROM [varchar](2048) NULL
GO
CREATE TYPE [dbo].[KODEVC254] FROM [varchar](254) NULL
GO
CREATE TYPE [dbo].[KODEVC30] FROM [varchar](30) NULL
GO
CREATE TYPE [dbo].[KODEVC4096] FROM [varchar](4096) NULL
GO
CREATE TYPE [dbo].[KODEVC5] FROM [varchar](5) NULL
GO
CREATE TYPE [dbo].[KODEVC50] FROM [varchar](50) NULL
GO
CREATE TYPE [dbo].[KODEVC512] FROM [varchar](512) NULL
GO

-------- TABLES -----------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADENDUM](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOADM] [dbo].[KODEC50] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NULL,
	[TGLADM] [dbo].[KODEDT] NULL,
	[NOKON] [dbo].[KODEC50] NULL,
	[NILAI1] [dbo].[KODEM] NULL,
	[NILAI2] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
	[NOKONTRAK] [char](50) NULL,
 CONSTRAINT [PK_ADENDUM] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_ADENDUM] UNIQUE NONCLUSTERED 
(
	[NOADM] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ANTARBYR](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPM] [dbo].[KODEC50] NOT NULL,
	[KDSTATUS] [dbo].[KODEC3] NOT NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[IDXSKO] [dbo].[KODEC10] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[NOSPP] [dbo].[KODEC50] NULL,
	[KDP3] [dbo].[KODEC10] NULL,
	[IDXKODE] [dbo].[KODEI] NOT NULL,
	[NOREG] [dbo].[KODEVC5] NULL,
	[KETOTOR] [dbo].[KODEVC254] NULL,
	[NOKONTRAK] [dbo].[KODEVC1024] NULL,
	[KEPERLUAN] [dbo].[KODEVC4096] NULL,
	[PENOLAKAN] [dbo].[KODEC1] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[TGLSPM] [dbo].[KODEDT] NULL,
	[TGSPP] [dbo].[KODEDT] NULL,
	[KDDANA] [dbo].[KODEC3] NULL,
	[KDKABKOT] [dbo].[KODEC3] NULL,
	[IDBILLING] [dbo].[KODEI] NULL,
	[TGLBILLING] [datetime] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_ANTARBYR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_ANTARBYR] UNIQUE NONCLUSTERED 
(
	[NOSPM] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[APPCONFIG](
	[CONFIGID] [varchar](100) NOT NULL,
	[CONFIGVAL] [varchar](512) NULL,
	[CONFIGDESC] [varchar](2048) NULL,
	[CONFIGVALDESC] [varchar](1024) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_APPCONFIG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_APPCONFIG] UNIQUE NONCLUSTERED 
(
	[CONFIGID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[APPLOG](
	[APPLOG_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[APPLIST_ID] [int] NOT NULL,
	[APPLOGTYPE_ID] [int] NOT NULL,
	[LOGDATE] [int] NOT NULL,
	[LOGTIME] [varchar](5) NOT NULL,
	[USERID] [varchar](32) NOT NULL,
	[WSNAME] [varchar](32) NOT NULL,
	[WSIP] [varchar](15) NOT NULL,
	[APPOBJ] [varchar](32) NOT NULL,
	[LOGDET] [varchar](4096) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [AK_PK_APPLOG] UNIQUE NONCLUSTERED 
(
	[APPLOG_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ASET_BERITA](
	[KDSTATUS] [nvarchar](max) NULL,
	[UNITKEY] [nvarchar](max) NULL,
	[NOBA] [nvarchar](max) NULL,
	[MTGKEY] [nvarchar](max) NULL,
	[NILAI] [nvarchar](max) NULL,
	[UNITKEY1] [nvarchar](max) NULL,
	[NOBA1] [nvarchar](max) NULL,
	[TGLBA] [nvarchar](max) NULL,
	[NOBAP] [nvarchar](max) NULL,
	[KDKEGUNIT] [nvarchar](max) NULL,
	[KDTAHAP] [nvarchar](max) NULL,
	[NOKON] [nvarchar](max) NULL,
	[URAIBA] [nvarchar](max) NULL,
	[TGLVALID] [nvarchar](max) NULL,
	[KDBUKTI] [nvarchar](max) NULL,
	[IDLOG] [nvarchar](max) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ATASBEND](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NIP] [dbo].[KODEC30] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_ATASBEND] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_ATASBEND] UNIQUE NONCLUSTERED 
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AWEBROLE](
	[ROLEID] [dbo].[KODEC30] NOT NULL,
	[ROLE] [dbo].[KODEVC254] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[MENUID] [bigint] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BANK](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[NamaLengkap] [nvarchar](max) NULL,
	[Nama] [nvarchar](450) NULL,
	[KodeBank] [nvarchar](450) NULL,
	[KodeSKN] [nvarchar](max) NULL,
	[KodeRTGS] [nvarchar](max) NULL,
	[KodeKota] [nvarchar](max) NULL,
	[KodeSwift] [nvarchar](max) NULL,
 CONSTRAINT [PK_BANK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BEND](
	[KEYBEND] [dbo].[KODEC10] NOT NULL,
	[JNS_BEND] [dbo].[KODEC2] NOT NULL,
	[NIP] [dbo].[KODEC30] NOT NULL,
	[KDBANK] [dbo].[KODEC3] NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[JAB_BEND] [dbo].[KODEVC100] NULL,
	[REKBEND] [dbo].[KODEVC100] NULL,
	[SALDOBEND] [dbo].[KODEM] NULL,
	[NPWPBEND] [dbo].[KODEVC30] NULL,
	[TGLSTOPBEND] [dbo].[KODEDT] NULL,
	[SALDOBENDT] [dbo].[KODEM] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[STAKTIF] [int] NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BEND] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BEND] UNIQUE NONCLUSTERED 
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BENDKEG](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KEYBEND] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BENDKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BENDKEG] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KEYBEND] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BENDKPA](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NIP] [dbo].[KODEC30] NOT NULL,
	[KEYBEND] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BENDKPA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BENDKPA] UNIQUE NONCLUSTERED 
(
	[KEYBEND] ASC,
	[NIP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BERITA](
	[UNITKEY] [dbo].[KODEC50] NOT NULL,
	[NOBA] [dbo].[KODEC50] NOT NULL,
	[TGLBA] [dbo].[KODEDT] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[NOKON] [dbo].[KODEC50] NULL,
	[URAIBA] [dbo].[KODEVC512] NULL,
	[TGLVALID] [datetime] NULL,
	[KDSTATUS] [dbo].[KODEC3] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
	[NOKONTRAK] [char](50) NULL,
	[NOBERITA] [char](50) NULL,
 CONSTRAINT [PK_BERITA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BERITA] UNIQUE NONCLUSTERED 
(
	[NOBA] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BERITADETR](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBA] [dbo].[KODEC50] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BERITADETR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BERITADETR] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOBA] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BERITAINV](
	[UNITKEY] [dbo].[KODEC50] NOT NULL,
	[KDSKPD] [char](30) NULL,
	[KDUNIT] [char](30) NULL,
	[NMUNIT] [varchar](200) NULL,
	[NOBA] [dbo].[KODEVC50] NOT NULL,
	[NOBAPNB] [dbo].[KODEVC50] NULL,
	[TGLBA] [dbo].[KODEDT] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[KODEKEG] [char](20) NULL,
	[NMKEGUNIT] [varchar](512) NULL,
	[NOKON] [dbo].[KODEC50] NULL,
	[URAIBA] [dbo].[KODEVC512] NULL,
	[TGLVALIDBAPNB] [datetime] NULL,
	[KDSTATUS] [dbo].[KODEC3] NULL,
	[TGLCREATE] [datetime] NULL,
	[TGLKIRIMINTEG] [datetime] NULL,
	[TGLTERIMAINTEG] [datetime] NULL,
	[INTEGST] [int] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BERITAINV] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BERITAINV] UNIQUE NONCLUSTERED 
(
	[NOBA] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BERITAINVDETBRG](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDSKPD] [char](30) NULL,
	[KDUNIT] [char](30) NULL,
	[NMUNIT] [varchar](200) NULL,
	[NOBA] [dbo].[KODEC50] NOT NULL,
	[NOBAPNB] [dbo].[KODEVC50] NULL,
	[MTGKEYAPBD] [dbo].[KODEC10] NOT NULL,
	[KDPERAPBD] [varchar](50) NULL,
	[NMPERAPBD] [varchar](200) NULL,
	[MTGKEYBRG] [dbo].[KODEC10] NOT NULL,
	[KDPERBRG] [varchar](50) NULL,
	[NMPERBRG] [varchar](200) NULL,
	[KDPERBRG5] [varchar](50) NULL,
	[NMPERBRG5] [varchar](200) NULL,
	[KDPERBRG6] [varchar](50) NULL,
	[NMPERBRG6] [varchar](200) NULL,
	[NILAI] [money] NULL,
	[INTEGST] [int] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BERITAINVDETBRG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BERITAINVDETBRG] UNIQUE NONCLUSTERED 
(
	[MTGKEYAPBD] ASC,
	[MTGKEYBRG] ASC,
	[NOBA] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BERITAPOT](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBA] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[NOSP2D] [dbo].[KODEC50] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BERITAPOT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BERITAPOT] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[NOBA] ASC,
	[NOJETRA] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKBANK](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBUKU] [dbo].[KODEC50] NOT NULL,
	[KDSTATUS] [dbo].[KODEC3] NOT NULL,
	[KEYBEND1] [dbo].[KODEC10] NULL,
	[KEYBEND2] [dbo].[KODEC10] NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[TGLBUKU] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
	[KEYBEND] [char](10) NULL,
 CONSTRAINT [PK_BKBANK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKBANK] UNIQUE NONCLUSTERED 
(
	[NOBUKU] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKBANKDET](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBUKU] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKBANKDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKBANKDET] UNIQUE NONCLUSTERED 
(
	[NOBUKU] ASC,
	[NOJETRA] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKBKAS](
	[NOBBANTU] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NULL,
	[KDBANK] [dbo].[KODEC3] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[NMBKAS] [dbo].[KODEVC50] NULL,
	[NOREKB] [dbo].[KODEVC30] NULL,
	[SLADOREKB] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKBKAS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKBKAS] UNIQUE NONCLUSTERED 
(
	[NOBBANTU] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKBM](
	[NOBK] [dbo].[KODEC50] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBM] [dbo].[KODEC50] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[TGLBK] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKBM] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKBM] UNIQUE NONCLUSTERED 
(
	[NOBK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKBMDET](
	[NOBK] [dbo].[KODEC50] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKBMDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKBMDET] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOBK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKPAJAK](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBKPAJAK] [dbo].[KODEC50] NOT NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[KDSTATUS] [dbo].[KODEC3] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[TGLBKPAJAK] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[NTPN] [dbo].[KODEC50] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
	[KDRILIS] [bigint] NULL,
	[STKIRIM] [int] NULL,
	[STCAIR] [int] NULL,
	[KDTRANSFER] [int] NULL,
 CONSTRAINT [PK_BKPAJAK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKPAJAK] UNIQUE NONCLUSTERED 
(
	[NOBKPAJAK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKPAJAKDET](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[UNITKEY] [char](10) NOT NULL,
	[NOBKPAJAK] [nvarchar](100) NOT NULL,
	[MTGKEYPJK] [nchar](36) NOT NULL,
	[MTGKEY] [char](10) NOT NULL,
	[KDKEGUNIT] [char](10) NOT NULL,
	[PJKKEY] [dbo].[KODEC10] NULL,
	[NILAI] [money] NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKPAJAKDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKPAJAKDET] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[MTGKEYPJK] ASC,
	[NOBKPAJAK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKPAJAKS](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[UNITKEY] [char](10) NOT NULL,
	[NOPUNGUT] [nvarchar](50) NOT NULL,
	[NOSETOR] [nvarchar](50) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKPAJAKS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKPAJAKS] UNIQUE NONCLUSTERED 
(
	[NOPUNGUT] ASC,
	[NOSETOR] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKRKK](
	[NOBK] [dbo].[KODEC50] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[NOBKUSKPD] [dbo].[KODEVC30] NOT NULL,
	[TGLBK] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKRKK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKRKK] UNIQUE NONCLUSTERED 
(
	[NOBK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKRKKDET](
	[NOBK] [dbo].[KODEC50] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKRKKDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKRKKDET] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOBK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKRKM](
	[NOBK] [dbo].[KODEC50] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[NOBKUSKPD] [dbo].[KODEVC30] NOT NULL,
	[TGLBK] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKRKM] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKRKM] UNIQUE NONCLUSTERED 
(
	[NOBK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKRKMDET](
	[NOBK] [dbo].[KODEC50] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKRKMDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKRKMDET] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOBK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKSPJ](
	[NOBK] [dbo].[KODEC50] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[NOSPJ] [dbo].[KODEC50] NOT NULL,
	[TGLBK] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKSPJ] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKSPJ] UNIQUE NONCLUSTERED 
(
	[NOBK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKSPJDET](
	[NOBK] [dbo].[KODEC50] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKSPJDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKSPJDET] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOBK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKTMEM](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBM] [dbo].[KODEC50] NOT NULL,
	[KDBM] [dbo].[KODEC10] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[TGLBM] [dbo].[KODEDT] NULL,
	[REFERENSI] [dbo].[KODEVC50] NULL,
	[VALIDBM] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKTMEM] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKTMEM] UNIQUE NONCLUSTERED 
(
	[NOBM] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKUBANK](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBKUSKPD] [dbo].[KODEVC30] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[NOBUKU] [dbo].[KODEC50] NOT NULL,
	[TGLBKUSKPD] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKUBANK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKUBANK] UNIQUE NONCLUSTERED 
(
	[NOBKUSKPD] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKUBPK](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBKUSKPD] [dbo].[KODEVC30] NOT NULL,
	[NOBPK] [dbo].[KODEC50] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[TGLBKUSKPD] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKUBPK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKUBPK] UNIQUE NONCLUSTERED 
(
	[NOBKUSKPD] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKUD](
	[NOBUKAS] [dbo].[KODEC50] NOT NULL,
	[NOBBANTU] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSTS] [dbo].[KODEC50] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[KDBUKTI] [dbo].[KODEC2] NOT NULL,
	[TGLKAS] [dbo].[KODEDT] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[NOBUKTIKAS] [dbo].[KODEVC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKUD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKUD] UNIQUE NONCLUSTERED 
(
	[NOBUKAS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKUK](
	[NOBUKAS] [dbo].[KODEC50] NOT NULL,
	[NOBBANTU] [dbo].[KODEC10] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[KDBUKTI] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[TGLKAS] [dbo].[KODEDT] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC512] NULL,
	[NOBUKTIKAS] [dbo].[KODEVC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKUK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKUK] UNIQUE NONCLUSTERED 
(
	[NOBUKAS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKUPAJAK](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBKUSKPD] [dbo].[KODEVC30] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[NOBKPAJAK] [dbo].[KODEC50] NOT NULL,
	[TGLBKUSKPD] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKUPAJAK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKUPAJAK] UNIQUE NONCLUSTERED 
(
	[NOBKUSKPD] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKUPANJAR](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBKUSKPD] [dbo].[KODEVC30] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[NOPANJAR] [dbo].[KODEC50] NOT NULL,
	[TGLBKUSKPD] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKUPANJAR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKUPANJAR] UNIQUE NONCLUSTERED 
(
	[NOBKUSKPD] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKUSP2D](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBKUSKPD] [dbo].[KODEVC30] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[TGLBKUSKPD] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC512] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKUSP2D] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKUSP2D] UNIQUE NONCLUSTERED 
(
	[NOBKUSKPD] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKUSTS](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBKUSKPD] [dbo].[KODEVC30] NOT NULL,
	[NOSTS] [dbo].[KODEC50] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[TGLBKUSKPD] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKUSTS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKUSTS] UNIQUE NONCLUSTERED 
(
	[NOBKUSKPD] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BKUTBP](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBKUSKPD] [dbo].[KODEVC30] NOT NULL,
	[NOTBP] [dbo].[KODEC50] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[TGLBKUSKPD] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BKUTBP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BKUTBP] UNIQUE NONCLUSTERED 
(
	[NOBKUSKPD] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BPK](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBPK] [dbo].[KODEC50] NOT NULL,
	[KDSTATUS] [dbo].[KODEC3] NOT NULL,
	[STPANJAR] [dbo].[KODEBL] NULL,
	[STTUNAI] [dbo].[KODEBL] NULL,
	[STBANK] [dbo].[KODEBL] NULL,
	[IDXKODE] [dbo].[KODEI] NOT NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[TGLBPK] [dbo].[KODEDT] NULL,
	[PENERIMA] [dbo].[KODEVC100] NULL,
	[URAIBPK] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[NOBA] [dbo].[KODEC50] NULL,
	[KDBANK] [dbo].[KODEC3] NULL,
	[NOREK] [dbo].[KODEVC20] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[KDTRANSFER] [int] NULL,
	[KDBAYAR] [int] NULL,
	[KDP3] [char](10) NULL,
	[NMP3] [nchar](100) NULL,
	[IDBANK] [nchar](10) NULL,
	[NMBANK] [nchar](50) NULL,
	[NOREF] [nchar](36) NULL,
	[KDRILIS] [int] NULL,
	[STKIRIM] [int] NULL,
	[STCAIR] [int] NULL,
	[TGLBUKU] [datetime] NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
	[NOBERITA] [nchar](100) NULL,
 CONSTRAINT [PK_BPK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BPK] UNIQUE NONCLUSTERED 
(
	[NOBPK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BPKBU](
	[NOBU] [dbo].[KODEC50] NOT NULL,
	[NOBPK] [dbo].[KODEC50] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BPKBU] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BPKBU] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOBPK] ASC,
	[NOBU] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BPKDETB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBPK] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BPKDETB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BPKDETB] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOBPK] ASC,
	[NOJETRA] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BPKDETD](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBPK] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BPKDETD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BPKDETD] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOBPK] ASC,
	[NOJETRA] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BPKDETR](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBPK] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BPKDETR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BPKDETR] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[NOBPK] ASC,
	[NOJETRA] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BPKDETRDANA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBPK] [dbo].[KODEC50] NOT NULL,
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[NOJETRA] [char](2) NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BPKDETRDANA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BPKSBDANA] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[NOBPK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BPKDETRP](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[UNITKEY] [char](10) NOT NULL,
	[NOBPK] [char](50) NOT NULL,
	[KDKEGUNIT] [char](10) NOT NULL,
	[MTGKEY] [char](10) NOT NULL,
	[MTGKEYPJK] [nchar](36) NOT NULL,
	[IDBILLING] [nchar](100) NULL,
	[NOJETRA] [char](2) NOT NULL,
	[NILAI] [money] NULL,
	[TGLBILLING] [datetime] NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BPKDETRP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BPKDETRP] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[MTGKEYPJK] ASC,
	[NOBPK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BPKDETRTL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBPK] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BPKDETRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BPKDETRTL] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOBPK] ASC,
	[NOJETRA] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BPKDETRTLDANA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBPK] [dbo].[KODEC50] NOT NULL,
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BPKDETRTLDANA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BPKDETRTLDANA] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[MTGKEY] ASC,
	[NOBPK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BPKDETRTLP](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[UNITKEY] [char](10) NOT NULL,
	[NOBPK] [char](50) NOT NULL,
	[MTGKEY] [char](10) NOT NULL,
	[MTGKEYPJK] [nchar](36) NOT NULL,
	[IDBILLING] [nchar](50) NULL,
	[NOJETRA] [char](2) NOT NULL,
	[NILAI] [money] NULL,
	[TGLBILLING] [datetime] NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BPKDETRTLP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BPKDETRTLP] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[MTGKEYPJK] ASC,
	[NOBPK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BPKPAJAK](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBPK] [dbo].[KODEC50] NOT NULL,
	[KDSTATUS] [dbo].[KODEC3] NOT NULL,
	[NOBKPAJAK] [dbo].[KODEC50] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BPKPAJAK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BPKPAJAK] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KDSTATUS] ASC,
	[NOBKPAJAK] ASC,
	[NOBPK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BPKSPJ](
	[NOBPK] [dbo].[KODEC50] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPJ] [dbo].[KODEC50] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BPKSPJ] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BPKSPJ] UNIQUE NONCLUSTERED 
(
	[NOBPK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BU](
	[NOBU] [dbo].[KODEC50] NOT NULL,
	[NOBPK] [dbo].[KODEC50] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEYNRC] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BU] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BU] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[MTGKEYNRC] ASC,
	[NOBPK] ASC,
	[NOBU] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BUBAM](
	[UNITKEY] [dbo].[KODEC30] NOT NULL,
	[NOBU] [dbo].[KODEC30] NOT NULL,
	[NOBA] [dbo].[KODEC30] NULL,
	[TGLBU] [dbo].[KODEDT] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BUBAM] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BUBAM] UNIQUE NONCLUSTERED 
(
	[NOBU] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BULAN](
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[KDPERIODE] [dbo].[KODEI] NOT NULL,
	[KET_BULAN] [dbo].[KODEVC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_BULAN] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_BULAN] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DAFTBANK](
	[KDBANK] [dbo].[KODEC3] NOT NULL,
	[NMBANK] [dbo].[KODEVC50] NULL,
	[AKBANK] [dbo].[KODEVC20] NULL,
	[ALAMAT] [dbo].[KODEVC200] NULL,
	[TELEPON] [dbo].[KODEVC20] NULL,
	[CABANG] [dbo].[KODEVC50] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
	[IDBANK] [nchar](10) NULL,
 CONSTRAINT [PK_DAFTBANK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DAFTBANK] UNIQUE NONCLUSTERED 
(
	[KDBANK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DAFTDOK](
	[KDDOK] [dbo].[KODEC10] NOT NULL,
	[NMDOK] [dbo].[KODEVC50] NULL,
	[KET] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DAFTDOK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DAFTDOK] UNIQUE NONCLUSTERED 
(
	[KDDOK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DAFTKABKOT](
	[KDKABKOT] [dbo].[KODEC10] NOT NULL,
	[NMKABKOT] [dbo].[KODEVC50] NULL,
	[KET] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DAFTKABKOT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DAFTKABKOT] UNIQUE NONCLUSTERED 
(
	[KDKABKOT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DAFTPHK3](
	[KDP3] [dbo].[KODEC10] NOT NULL,
	[NMP3] [dbo].[KODEVC100] NULL,
	[NMINST] [dbo].[KODEVC100] NULL,
	[NORCP3] [dbo].[KODEVC50] NULL,
	[NMBANK] [dbo].[KODEVC50] NULL,
	[JNSUSAHA] [dbo].[KODEVC50] NULL,
	[ALAMAT] [dbo].[KODEVC200] NULL,
	[TELEPON] [dbo].[KODEVC20] NULL,
	[NPWP] [dbo].[KODEVC30] NULL,
	[UNITKEY] [dbo].[KODEC10] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[WARGANEGARA] [nchar](200) NULL,
	[STPENDUDUK] [nchar](200) NULL,
	[IDBANK] [nchar](10) NULL,
	[CABANGBANK] [nvarchar](200) NULL,
	[ALAMATBANK] [nvarchar](200) NULL,
	[NOREKBANK] [nchar](50) NULL,
	[KDJENIS] [int] NULL,
	[STVALID] [int] NULL,
	[ISLOCK] [int] NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DAFTPHK3] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DAFTPHK3] UNIQUE NONCLUSTERED 
(
	[KDP3] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DAFTUNIT](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDUNIT] [dbo].[KODEVC30] NULL,
	[NMUNIT] [dbo].[KODEVC200] NULL,
	[AKROUNIT] [dbo].[KODEVC30] NULL,
	[ALAMAT] [dbo].[KODEVC200] NULL,
	[TELEPON] [dbo].[KODEVC20] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DAFTUNIT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DAFTUNIT] UNIQUE NONCLUSTERED 
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DAFTUNITUK](
	[UNITKEYSKPD] [dbo].[KODEC10] NULL,
	[UNITKEYUK] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DAFTUNITUK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DAFTUNITUK] UNIQUE NONCLUSTERED 
(
	[UNITKEYUK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASHUTANG](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[NOPERDA] [dbo].[KODEVC30] NULL,
	[NOAKAD] [dbo].[KODEVC30] NULL,
	[NOREKMEN] [dbo].[KODEVC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASHUTANG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASHUTANG] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDXDASK] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKB] UNIQUE NONCLUSTERED 
(
	[IDXDASK] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKBLNB](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[IDXDASK] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKBLNB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKBLNB] UNIQUE NONCLUSTERED 
(
	[IDXDASK] ASC,
	[KD_BULAN] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKBLND](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[IDXDASK] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKBLND] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKBLND] UNIQUE NONCLUSTERED 
(
	[IDXDASK] ASC,
	[KD_BULAN] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKBLNR](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[IDXDASK] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKBLNR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKBLNR] UNIQUE NONCLUSTERED 
(
	[IDXDASK] ASC,
	[KD_BULAN] ASC,
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKBLNRTL](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[IDXDASK] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKBLNRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKBLNRTL] UNIQUE NONCLUSTERED 
(
	[IDXDASK] ASC,
	[KD_BULAN] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKD](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDXDASK] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKD] UNIQUE NONCLUSTERED 
(
	[IDXDASK] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKDETB](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[IDXDASK] [dbo].[KODEC10] NOT NULL,
	[KDNILAI] [dbo].[KODEVC10] NOT NULL,
	[KDJABAR] [dbo].[KODEVC30] NULL,
	[URAIAN] [dbo].[KODEVC1024] NULL,
	[JUMBYEK] [dbo].[KODEM] NULL,
	[SATUAN] [dbo].[KODEVC20] NULL,
	[TARIF] [dbo].[KODEM] NULL,
	[SUBTOTAL] [dbo].[KODEM] NULL,
	[EKSPRESI] [dbo].[KODEVC254] NULL,
	[INCLSUBTOTAL] [dbo].[KODEBL] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[IDSTDHARGA] [dbo].[KODEC10] NULL,
	[KDDANA] [dbo].[KODEC3] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKDETB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKDETB] UNIQUE NONCLUSTERED 
(
	[IDXDASK] ASC,
	[KDNILAI] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKDETD](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[IDXDASK] [dbo].[KODEC10] NOT NULL,
	[KDNILAI] [dbo].[KODEVC10] NOT NULL,
	[KDJABAR] [dbo].[KODEVC30] NULL,
	[URAIAN] [dbo].[KODEVC1024] NULL,
	[JUMBYEK] [dbo].[KODEM] NULL,
	[SATUAN] [dbo].[KODEVC20] NULL,
	[TARIF] [dbo].[KODEM] NULL,
	[SUBTOTAL] [dbo].[KODEM] NULL,
	[EKSPRESI] [dbo].[KODEVC254] NULL,
	[INCLSUBTOTAL] [dbo].[KODEBL] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[IDSTDHARGA] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKDETD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKDETD] UNIQUE NONCLUSTERED 
(
	[IDXDASK] ASC,
	[KDNILAI] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKDETR](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[IDXDASK] [dbo].[KODEC10] NOT NULL,
	[KDNILAI] [dbo].[KODEVC10] NOT NULL,
	[KDJABAR] [dbo].[KODEVC30] NULL,
	[URAIAN] [dbo].[KODEVC1024] NULL,
	[JUMBYEK] [dbo].[KODEM] NULL,
	[SATUAN] [dbo].[KODEVC200] NULL,
	[TARIF] [dbo].[KODEM] NULL,
	[SUBTOTAL] [dbo].[KODEM] NULL,
	[EKSPRESI] [dbo].[KODEVC254] NULL,
	[INCLSUBTOTAL] [dbo].[KODEBL] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[IDSTDHARGA] [dbo].[KODEC50] NULL,
	[KDDANA] [dbo].[KODEC3] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKDETR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKDETR] UNIQUE NONCLUSTERED 
(
	[IDXDASK] ASC,
	[KDKEGUNIT] ASC,
	[KDNILAI] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKDETRL](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDXDASK] [dbo].[KODEC10] NOT NULL,
	[KDTAHUN] [dbo].[KODEC2] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDNILAI] [dbo].[KODEVC10] NOT NULL,
	[KDDANA] [dbo].[KODEC3] NULL,
	[KDJABAR] [dbo].[KODEVC30] NULL,
	[URAIAN] [dbo].[KODEVC512] NULL,
	[JUMBYEK] [dbo].[KODEM] NULL,
	[SATUAN] [dbo].[KODEVC20] NULL,
	[TARIF] [dbo].[KODEM] NULL,
	[SUBTOTAL] [dbo].[KODEM] NULL,
	[EKSPRESI] [dbo].[KODEVC254] NULL,
	[INCLSUBTOTAL] [dbo].[KODEBL] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[IDSTDHARGA] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKDETRL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKDETRL] UNIQUE NONCLUSTERED 
(
	[IDXDASK] ASC,
	[KDKEGUNIT] ASC,
	[KDNILAI] ASC,
	[KDTAHUN] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKDETRTL](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[IDXDASK] [dbo].[KODEC10] NOT NULL,
	[KDNILAI] [dbo].[KODEVC10] NOT NULL,
	[KDJABAR] [dbo].[KODEVC30] NULL,
	[URAIAN] [dbo].[KODEVC1024] NULL,
	[JUMBYEK] [dbo].[KODEM] NULL,
	[SATUAN] [dbo].[KODEVC20] NULL,
	[TARIF] [dbo].[KODEM] NULL,
	[SUBTOTAL] [dbo].[KODEM] NULL,
	[EKSPRESI] [dbo].[KODEVC254] NULL,
	[INCLSUBTOTAL] [dbo].[KODEBL] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[IDSTDHARGA] [dbo].[KODEC10] NULL,
	[KDDANA] [dbo].[KODEC3] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKDETRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKDETRTL] UNIQUE NONCLUSTERED 
(
	[IDXDASK] ASC,
	[KDNILAI] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKL](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDXDASK] [dbo].[KODEC10] NOT NULL,
	[KDTAHUN] [dbo].[KODEC2] NOT NULL,
	[NODASK] [dbo].[KODEVC50] NULL,
	[TGLSKDPA] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKL] UNIQUE NONCLUSTERED 
(
	[IDXDASK] ASC,
	[KDTAHUN] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKR](
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDXDASK] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKR] UNIQUE NONCLUSTERED 
(
	[IDXDASK] ASC,
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKRL](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDXDASK] [dbo].[KODEC10] NOT NULL,
	[KDTAHUN] [dbo].[KODEC2] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEVC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[REAL] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKRL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKRL] UNIQUE NONCLUSTERED 
(
	[IDXDASK] ASC,
	[KDKEGUNIT] ASC,
	[KDTAHUN] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKRTL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDXDASK] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKRTL] UNIQUE NONCLUSTERED 
(
	[IDXDASK] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKUM](
	[KDDASKUM] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NULL,
	[NODASKUM] [dbo].[KODEVC50] NULL,
	[ISIDASKUM] [dbo].[KODEVC4096] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKUM] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKUM] UNIQUE NONCLUSTERED 
(
	[KDDASKUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKUMB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDDASKUM] [dbo].[KODEC10] NOT NULL,
	[URAIDASKUM] [dbo].[KODEVC512] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKUMB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKUMB] UNIQUE NONCLUSTERED 
(
	[KDDASKUM] ASC,
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKUMD](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDDASKUM] [dbo].[KODEC10] NOT NULL,
	[URAIDASKUM] [dbo].[KODEVC512] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKUMD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKUMD] UNIQUE NONCLUSTERED 
(
	[KDDASKUM] ASC,
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DASKUMR](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDDASKUM] [dbo].[KODEC10] NOT NULL,
	[URAIDASKUM] [dbo].[KODEVC512] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DASKUMR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DASKUMR] UNIQUE NONCLUSTERED 
(
	[KDDASKUM] ASC,
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DNJKN](
	[NODNJKN] [dbo].[KODEC50] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[TGLDNJKN] [dbo].[KODEDT] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[STKIRIM] [dbo].[KODEBL] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DNJKN] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DNJKN_1] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NODNJKN] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DOKLKP](
	[NODOKLKP] [dbo].[KODEC50] NOT NULL,
	[TGLDOKLKP] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC512] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DOKLKP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DOKLKP] UNIQUE NONCLUSTERED 
(
	[NODOKLKP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DOKSAH](
	[KDDOKSAH] [dbo].[KODEC2] NOT NULL,
	[NMDOKSAH] [dbo].[KODEVC20] NULL,
	[KET] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DOKSAH] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DOKSAH] UNIQUE NONCLUSTERED 
(
	[KDDOKSAH] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DP](
	[NODP] [dbo].[KODEC30] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[IDXKODE] [dbo].[KODEI] NOT NULL,
	[TGLDP] [dbo].[KODEDT] NULL,
	[BERITA] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DP] UNIQUE NONCLUSTERED 
(
	[NODP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DPDET](
	[NODP] [dbo].[KODEC30] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[URAIDP] [dbo].[KODEVC254] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_DPDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_DPDET] UNIQUE NONCLUSTERED 
(
	[NODP] ASC,
	[NOSP2D] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EVENTLOG](
	[IDEVENT] [char](10) NOT NULL,
	[KDEVENT] [char](2) NOT NULL,
	[USERNM] [char](30) NOT NULL,
	[DTEVENT] [datetime] NULL,
	[COMPUTER] [varchar](30) NULL,
	[MSGEVENT] [varchar](1024) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_EVENTLOG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_EVENTLOG] UNIQUE NONCLUSTERED 
(
	[IDEVENT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FINALPROC](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[KDPAKET] [dbo].[KODEC30] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_FINALPROC] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_FINALPROC] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KDPAKET] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FUNGSI](
	[IDFUNG] [dbo].[KODEC3] NOT NULL,
	[KDFUNG] [dbo].[KODEVC5] NULL,
	[NMFUNG] [dbo].[KODEVC50] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_FUNGSI] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_FUNGSI] UNIQUE NONCLUSTERED 
(
	[IDFUNG] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FUNGSINIT](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDFUNG] [dbo].[KODEC3] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_FUNGSINIT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_FUNGSINIT] UNIQUE NONCLUSTERED 
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GOLONGAN](
	[KDGOL] [dbo].[KODEC10] NOT NULL,
	[NMGOL] [dbo].[KODEVC5] NULL,
	[PANGKAT] [dbo].[KODEVC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_GOLONGAN] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_GOLONGAN] UNIQUE NONCLUSTERED 
(
	[KDGOL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INT_BERITA](
	[NOBA] [dbo].[KODEC50] NOT NULL,
	[KDUNIT] [dbo].[KODEVC30] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NOT NULL,
	[KDASET] [dbo].[KODEVC30] NOT NULL,
	[NMUNIT] [dbo].[KODEVC512] NULL,
	[TGLBA] [dbo].[KODEDT] NULL,
	[NOKON] [dbo].[KODEC50] NULL,
	[URAIBA] [dbo].[KODEVC512] NULL,
	[TGLVALIDBA] [dbo].[KODEDT] NULL,
	[KDTAHAP] [dbo].[KODEC2] NULL,
	[NUPRGRM] [dbo].[KODEVC5] NULL,
	[NUKEG] [dbo].[KODEVC10] NULL,
	[NMKEGUNIT] [dbo].[KODEVC254] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[NMASET] [dbo].[KODEVC254] NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_INT_BERITA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_INT_BERITA] UNIQUE NONCLUSTERED 
(
	[KDASET] ASC,
	[KDPER] ASC,
	[KDUNIT] ASC,
	[NOBA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INT_PENYUSUTAN](
	[NOBUKTI] [dbo].[KODEVC30] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NOT NULL,
	[KDUNIT] [dbo].[KODEVC30] NOT NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[NMUNIT] [dbo].[KODEVC512] NULL,
	[TGLSUSUT] [dbo].[KODEDT] NULL,
	[NILAISUSUT] [dbo].[KODEM] NULL,
	[NILAIAKUMSUSUT] [dbo].[KODEM] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_INT_PENYUSUTAN] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_INT_PENYUSUTAN] UNIQUE NONCLUSTERED 
(
	[KDPER] ASC,
	[KDUNIT] ASC,
	[NOBUKTI] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INTEGRASI](
	[KD_BULAN] [int] NULL,
	[KD_TAHUN] [int] NULL,
	[NOSPP] [varchar](50) NULL,
	[TGLSPP] [datetime] NULL,
	[KDURUS] [varchar](30) NULL,
	[KDSKPD] [varchar](30) NULL,
	[NIPBEND] [varchar](30) NULL,
	[KDRINCI] [varchar](50) NULL,
	[NILAI] [money] NULL,
	[STKIRIM] [varchar](2) NULL,
	[STCETAK] [varchar](2) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INTEGRASI_ASET](
	[KD_BULAN] [int] NULL,
	[KD_TAHUN] [int] NULL,
	[KDURUS] [varchar](30) NULL,
	[KDSKPD] [varchar](30) NULL,
	[NIPPA] [varchar](30) NULL,
	[KDRINCI] [varchar](50) NULL,
	[NILAI] [money] NULL,
	[STKIRIM] [varchar](2) NULL,
	[STCETAK] [varchar](2) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INTEGRASI_GAJI](
	[KD_BULAN] [int] NULL,
	[KD_TAHUN] [int] NULL,
	[NOSPP] [varchar](50) NULL,
	[KODEGAJI] [varchar](2) NULL,
	[URAIGAJI] [varchar](50) NULL,
	[KDURUS] [varchar](30) NULL,
	[KDSKPD] [varchar](30) NULL,
	[NIPBEND] [varchar](30) NULL,
	[KDRINCI] [varchar](50) NULL,
	[NILAI] [money] NULL,
	[STKIRIM] [varchar](2) NULL,
	[STCETAK] [varchar](2) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JABTTD](
	[IDXTTD] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDDOK] [dbo].[KODEC10] NOT NULL,
	[NIP] [dbo].[KODEC30] NOT NULL,
	[JABATAN] [dbo].[KODEVC200] NULL,
	[NOSKPTTD] [dbo].[KODEVC30] NULL,
	[TGLSKPTTD] [dbo].[KODEDT] NULL,
	[NOSKSTOPTTD] [dbo].[KODEVC30] NULL,
	[TGLSKSTOPTTD] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JABTTD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JABTTD] UNIQUE NONCLUSTERED 
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JAKAS](
	[KDAKAS] [dbo].[KODEC10] NOT NULL,
	[NMAKAS] [dbo].[KODEVC50] NULL,
	[LABELKAS] [varchar](200) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JAKAS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JAKAS] UNIQUE NONCLUSTERED 
(
	[KDAKAS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JBABAPBD](
	[BABID] [int] NOT NULL,
	[KDPERS] [char](1) NULL,
	[STATUS] [char](1) NULL,
	[KDBAB] [varchar](30) NOT NULL,
	[NMBAB] [varchar](200) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JBABAPBD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JBABAPBD] UNIQUE NONCLUSTERED 
(
	[BABID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JBANK](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[IDBANK] [nchar](10) NOT NULL,
	[NMBANK] [nvarchar](500) NOT NULL,
	[URAIAN] [nvarchar](500) NOT NULL,
	[AKRONIM] [nvarchar](200) NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JBANK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JBANK] UNIQUE NONCLUSTERED 
(
	[IDBANK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JBAYAR](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[KDBAYAR] [int] NOT NULL,
	[URAIANBAYAR] [nvarchar](30) NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JBAYAR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_JBAYAR_KDBAYAR] UNIQUE NONCLUSTERED 
(
	[KDBAYAR] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JBEND](
	[JNS_BEND] [dbo].[KODEC2] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NULL,
	[URAI_BEND] [dbo].[KODEVC50] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JBEND] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JBEND] UNIQUE NONCLUSTERED 
(
	[JNS_BEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JBKAS](
	[KDBUKTI] [dbo].[KODEC2] NOT NULL,
	[NMBUKTI] [dbo].[KODEVC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JBKAS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JBKAS] UNIQUE NONCLUSTERED 
(
	[KDBUKTI] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JBKU](
	[KDJBKU] [dbo].[KODEC3] NOT NULL,
	[LBLJBKU] [dbo].[KODEVC20] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JBKU] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JBKU] UNIQUE NONCLUSTERED 
(
	[KDJBKU] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JBM](
	[KDBM] [dbo].[KODEC10] NOT NULL,
	[NMBM] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JBM] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JBM] UNIQUE NONCLUSTERED 
(
	[KDBM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JCAIR](
	[STCAIR] [int] NOT NULL,
	[URAICAIR] [nvarchar](200) NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JCAIR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JCAIR] UNIQUE NONCLUSTERED 
(
	[STCAIR] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JDANA](
	[KDDANA] [dbo].[KODEC3] NOT NULL,
	[NMDANA] [dbo].[KODEVC100] NULL,
	[KET] [dbo].[KODEVC100] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TYPE] [nchar](1) NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JDANA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JDANA] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JDSRSKO](
	[KDDSR] [dbo].[KODEC10] NOT NULL,
	[NMDSR] [dbo].[KODEVC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JDSRSKO] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JDSRSKO] UNIQUE NONCLUSTERED 
(
	[KDDSR] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JEVENT](
	[KDEVENT] [char](2) NOT NULL,
	[NMEVENT] [varchar](20) NULL,
	[KET] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JEVENT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JEVENT] UNIQUE NONCLUSTERED 
(
	[KDEVENT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JKDJURNAL](
	[JBKU] [char](2) NULL,
	[JNS_JURNAL] [char](2) NULL,
	[URAIAN] [varchar](70) NULL,
	[BUKTIDOK] [varchar](70) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JKELOLA](
	[KDKELOLA] [dbo].[KODEC2] NOT NULL,
	[NMKELOLA] [dbo].[KODEVC50] NOT NULL,
	[KETKELOLA] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JKELOLA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JKELOLA] UNIQUE NONCLUSTERED 
(
	[KDKELOLA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JKINKEG](
	[KDJKK] [dbo].[KODEC2] NOT NULL,
	[URJKK] [dbo].[KODEVC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JKINKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JKINKEG] UNIQUE NONCLUSTERED 
(
	[KDJKK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JKIRIM](
	[STKIRIM] [int] NOT NULL,
	[URAIKIRIM] [nvarchar](200) NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_JKIRIM] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JKIRIM] UNIQUE NONCLUSTERED 
(
	[STKIRIM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JNSAKUN](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[JNSAKUN] [int] NOT NULL,
	[URAIAKUN] [nvarchar](50) NULL,
	[KDPERS] [nchar](1) NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JNSAKUN] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JNS_AKUN] UNIQUE NONCLUSTERED 
(
	[JNSAKUN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JPAJAK](
	[PJKKEY] [dbo].[KODEC10] NOT NULL,
	[KDPAJAK] [dbo].[KODEVC20] NULL,
	[NMPAJAK] [dbo].[KODEVC50] NULL,
	[RUMUSPJK] [dbo].[KODEVC100] NULL,
	[JNS_PJK] [varchar](10) NULL,
	[KDPER] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[MTGKEYPJK] [nchar](10) NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JPAJAK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JPAJAK] UNIQUE NONCLUSTERED 
(
	[PJKKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JPERSPEKTIF](
	[KDPERSPEKTIF] [dbo].[KODEC10] NOT NULL,
	[NMPERSPEKTIF] [dbo].[KODEVC50] NULL,
	[KET] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JPERSPEKTIF] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JPERSPEKTIF] UNIQUE NONCLUSTERED 
(
	[KDPERSPEKTIF] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JPOSTING](
	[KDPOSTING] [dbo].[KODEC2] NOT NULL,
	[NMPOSTING] [dbo].[KODEVC50] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JPOSTING] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JPOSTING] UNIQUE NONCLUSTERED 
(
	[KDPOSTING] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JPRIORITAS](
	[PRIOKEY] [dbo].[KODEC10] NOT NULL,
	[KDPRIO] [dbo].[KODEVC50] NULL,
	[NMPRIO] [dbo].[KODEVC100] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JPRIORITAS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JPRIORITAS] UNIQUE NONCLUSTERED 
(
	[PRIOKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JREK](
	[JNSREK] [int] NOT NULL,
	[URAIAN] [nvarchar](512) NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JREK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JREK] UNIQUE NONCLUSTERED 
(
	[JNSREK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JSATUAN](
	[KDSATUAN] [nchar](10) NOT NULL,
	[URAISATUAN] [nvarchar](100) NULL,
	[KETERANGAN] [nvarchar](100) NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_JSATUAN] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JSATUAN] UNIQUE NONCLUSTERED 
(
	[KDSATUAN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JSET](
	[KDJNSSET] [dbo].[KODEC10] NOT NULL,
	[NMJNSSET] [dbo].[KODEVC50] NULL,
	[STATUS] [dbo].[KODEC2] NULL,
	[KET] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JSET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JSET] UNIQUE NONCLUSTERED 
(
	[KDJNSSET] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JSTANDAR](
	[KDJNSSTD] [dbo].[KODEC10] NOT NULL,
	[NMJNSSTD] [dbo].[KODEVC20] NULL,
	[KET] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JSTANDAR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JSTANDAR] UNIQUE NONCLUSTERED 
(
	[KDJNSSTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JTAHUN](
	[KDTAHUN] [dbo].[KODEC1] NOT NULL,
	[NMTAHUN] [dbo].[KODEVC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JTAHUN] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JTAHUN] UNIQUE NONCLUSTERED 
(
	[KDTAHUN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JTRANSAKSI](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[IDTRANS] [int] NOT NULL,
	[URAITRANS] [nvarchar](200) NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JTRANSAKSI] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JTRANSAKSI] UNIQUE NONCLUSTERED 
(
	[IDTRANS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JTRANSFER](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[KDTRANSFER] [int] NOT NULL,
	[NMTRANSFER] [nchar](100) NULL,
	[URAIANTRANS] [nchar](100) NULL,
	[MINNOMINAL] [money] NULL,
	[FLAGSNOM] [nchar](20) NULL,
 CONSTRAINT [PK_JTRANSFER] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JTRANSFER] UNIQUE NONCLUSTERED 
(
	[KDTRANSFER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JTRNLKAS](
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[NMJETRA] [dbo].[KODEVC100] NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JTRNLKAS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JTRNLKAS] UNIQUE NONCLUSTERED 
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[jurnal](
	[jbku] [char](2) NULL,
	[kdstatus] [char](3) NULL,
	[unitkey] [char](10) NULL,
	[nobkuskpd] [varchar](100) NULL,
	[nobukti] [char](100) NULL,
	[tglbukti] [datetime] NULL,
	[uraian] [varchar](4096) NULL,
	[kdprgrm] [char](10) NULL,
	[kdkeg] [char](10) NULL,
	[keybend] [char](10) NULL,
	[jns_jurnal] [char](2) NULL,
	[jmatangd] [char](1) NULL,
	[mtgkeyd] [char](10) NULL,
	[kdperd] [varchar](30) NULL,
	[nmperd] [varchar](1024) NULL,
	[nilaid] [money] NULL,
	[jmatangk] [char](1) NULL,
	[mtgkeyk] [char](10) NULL,
	[kdperk] [varchar](30) NULL,
	[nmperk] [varchar](1024) NULL,
	[nilaik] [money] NULL,
	[jurnal] [int] NOT NULL,
	[tgl_valid] [datetime] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[jurnal_lalu](
	[jbku] [char](2) NULL,
	[kdstatus] [char](3) NULL,
	[unitkey] [char](10) NULL,
	[nobkuskpd] [varchar](100) NULL,
	[nobukti] [char](100) NULL,
	[tglbukti] [datetime] NULL,
	[uraian] [varchar](4096) NULL,
	[kdprgrm] [char](10) NULL,
	[kdkeg] [char](10) NULL,
	[keybend] [char](10) NULL,
	[jns_jurnal] [char](2) NULL,
	[jmatangd] [char](1) NULL,
	[mtgkeyd] [char](10) NULL,
	[kdperd] [varchar](30) NULL,
	[nmperd] [varchar](1024) NULL,
	[nilaid] [money] NULL,
	[jmatangk] [char](1) NULL,
	[mtgkeyk] [char](10) NULL,
	[kdperk] [varchar](30) NULL,
	[nmperk] [varchar](1024) NULL,
	[nilaik] [money] NULL,
	[jurnal] [int] NULL,
	[tgl_valid] [datetime] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JURNAL_ROLE](
	[JBKU] [varchar](3) NULL,
	[NM_TABLE] [varchar](20) NOT NULL,
	[KDSTATUS] [varchar](2) NOT NULL,
	[JENIS_JURNAL] [varchar](10) NOT NULL,
	[JNS_JURNAL] [varchar](10) NULL,
	[JMATANGD] [varchar](5) NULL,
	[JMATANGK] [varchar](5) NULL,
	[MTGKEYD] [varchar](10) NULL,
	[MTGKEYK] [varchar](10) NULL,
	[IDXKODE] [int] NOT NULL,
	[KODE0] [varchar](20) NULL,
	[KODE1] [varchar](20) NULL,
	[KODE2] [varchar](20) NULL,
	[KODE3] [varchar](20) NULL,
	[KODE4] [varchar](20) NULL,
	[KODE5] [varchar](20) NULL,
	[KODE6] [varchar](20) NULL,
	[KODE7] [varchar](20) NULL,
	[KODE8] [nchar](10) NULL,
	[KEYCLM] [varchar](20) NULL,
	[TABLEBUKTI] [varchar](20) NULL,
	[SKPD] [int] NOT NULL,
	[IDJR] [int] NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_JURNAL_ROLE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JURNAL_ROLE] UNIQUE NONCLUSTERED 
(
	[IDXKODE] ASC,
	[JENIS_JURNAL] ASC,
	[KDSTATUS] ASC,
	[NM_TABLE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JURTUP](
	[NOTUTUP] [dbo].[KODEC30] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NULL,
	[NMTUTUP] [dbo].[KODEVC50] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JURTUP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JURTUP] UNIQUE NONCLUSTERED 
(
	[NOTUTUP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JUSAHA](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[KDJENIS] [int] NOT NULL,
	[JENISBADANUSAHA] [nvarchar](50) NULL,
	[KETERANGAN] [nvarchar](200) NULL,
	[AKRONIM] [nchar](10) NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_JUSAHA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_JUSAHA] UNIQUE NONCLUSTERED 
(
	[KDJENIS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[KASB](
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[KODE] [dbo].[KODEC2] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_KASB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_KASB] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[KDTAHAP] ASC,
	[KODE] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[KASD](
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_KASD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_KASD] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[KASKEG](
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_KASKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_KASKEG] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[KDKEGUNIT] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[KASRTL](
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_KASRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_KASRTL] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[KEGUNIT](
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[IDPRGRM] [dbo].[KODEC10] NOT NULL,
	[NOPRIOR] [dbo].[KODEI] NULL,
	[KDSIFAT] [dbo].[KODEC1] NOT NULL,
	[NIP] [dbo].[KODEC30] NULL,
	[TGLAKHIR] [dbo].[KODEDT] NULL,
	[TGLAWAL] [dbo].[KODEDT] NULL,
	[TARGETP] [dbo].[KODEM] NULL,
	[LOKASI] [dbo].[KODEVC4096] NULL,
	[JUMLAHMIN1] [dbo].[KODEM] NULL,
	[PAGU] [dbo].[KODEM] NULL,
	[JUMLAHPLS1] [dbo].[KODEM] NULL,
	[SASARAN] [dbo].[KODEVC4096] NULL,
	[KETKEG] [dbo].[KODEVC512] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_KEGUNIT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_KEGUNIT] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[KELOLAUNIT](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDKELOLA] [dbo].[KODEC2] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_KELOLAUNIT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_KELOLAUNIT] UNIQUE NONCLUSTERED 
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[KHUSUSREK](
	[KDKHUSUS] [dbo].[KODEC1] NOT NULL,
	[NMKHUSUS] [dbo].[KODEVC20] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_KHUSUSREK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_KHUSUSREK] UNIQUE NONCLUSTERED 
(
	[KDKHUSUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[KINKEG](
	[KDJKK] [dbo].[KODEC2] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[TOLOKUR] [dbo].[KODEVC4096] NULL,
	[TARGET] [dbo].[KODEVC4096] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_KINKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_KINKEG] UNIQUE NONCLUSTERED 
(
	[KDJKK] ASC,
	[KDKEGUNIT] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[KINNON](
	[KDJKK] [dbo].[KODEC2] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDXKODE] [dbo].[KODEI] NOT NULL,
	[TARGET] [dbo].[KODEVC200] NULL,
	[TOLOKUR] [dbo].[KODEVC4096] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_KINNON] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_KINNON] UNIQUE NONCLUSTERED 
(
	[IDXKODE] ASC,
	[KDJKK] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[KONTRAK](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOKON] [dbo].[KODEC50] NOT NULL,
	[KDP3] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[TGLKON] [dbo].[KODEDT] NULL,
	[TGLSLSKONK] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC512] NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
	[NOKONTRAK] [char](100) NULL,
	[TGLAWALKONTRAK] [datetime] NULL,
	[TGLAKHIRKONTRAK] [datetime] NULL,
 CONSTRAINT [PK_KONTRAK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_KONTRAK] UNIQUE NONCLUSTERED 
(
	[UNITKEY] ASC,
	[NOKON] ASC,
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[KONTRAKDETBLNR](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOKON] [dbo].[KODEC50] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_KONTRAKDETBLNR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_KONTRAKDETBLNR] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[MTGKEY] ASC,
	[NOKON] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[KONTRAKDETR](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOKON] [dbo].[KODEC50] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_KONTRAKDETR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_KONTRAKDETR] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOKON] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[KPA](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NIP] [dbo].[KODEC30] NOT NULL,
	[JABATAN] [dbo].[KODEVC50] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_KPA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_KPA] UNIQUE NONCLUSTERED 
(
	[NIP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LAPORSAH](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_LAPORSAH] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_LAPORSAH] UNIQUE NONCLUSTERED 
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LOOKUP_PARAMETERS](
	[STATEMENT_NAME] [dbo].[KODEC30] NOT NULL,
	[PARAMETER_NAME] [dbo].[KODEC30] NOT NULL,
	[CONTROL_NAME] [dbo].[KODEC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_LOOKUP_PARAMETERS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_LOOKUP_PARAMETERS] UNIQUE NONCLUSTERED 
(
	[PARAMETER_NAME] ASC,
	[STATEMENT_NAME] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MAP_PFK](
	[MTGKEY_NRC] [char](10) NOT NULL,
	[MTGKEY_POT] [char](10) NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MAP_PFK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MAP_PFK] UNIQUE NONCLUSTERED 
(
	[MTGKEY_NRC] ASC,
	[MTGKEY_POT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MAPAKAS24](
	[KDPER24] [nvarchar](255) NULL,
	[MTGLEVEL24] [char](2) NULL,
	[TYPE24] [char](1) NULL,
	[NMPER24] [nvarchar](255) NULL,
	[KDPER] [nvarchar](255) NULL,
	[NMPER] [nvarchar](255) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MAPP24](
	[KDPER24] [nvarchar](255) NULL,
	[MTGLEVEL24] [char](2) NULL,
	[TYPE24] [char](2) NULL,
	[NMPER24] [nvarchar](255) NULL,
	[KDPER] [nvarchar](255) NULL,
	[NMPER] [nvarchar](255) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Mapping_Jurnal](
	[JBKU] [varchar](50) NULL,
	[NM_TABLE] [varchar](50) NULL,
	[KDSTATUS] [varchar](50) NULL,
	[JENIS_JURNAL] [varchar](50) NULL,
	[JNS_JURNAL] [varchar](50) NULL,
	[JMATANGD] [varchar](50) NULL,
	[JMATANGK] [varchar](50) NULL,
	[MTGKEYD] [varchar](10) NULL,
	[MTGKEYK] [varchar](10) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MAPPINGLO_LRA](
	[KDPERLRA] [varchar](20) NULL,
	[NMPERLRA] [varchar](500) NULL,
	[KDPERLO] [varchar](20) NULL,
	[NMPERLO] [varchar](500) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MAPPINGLO_PIU](
	[KDPERLO] [varchar](20) NULL,
	[NMPERLO] [varchar](512) NULL,
	[KDPERPIU] [varchar](20) NULL,
	[NMPERPIU] [varchar](512) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MAPPINGSUSUT](
	[MTGKEYBEBAN] [dbo].[KODEC10] NOT NULL,
	[MTGKEYAKUM] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MAPPINGSUSUT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MAPPINGSUSUT] UNIQUE NONCLUSTERED 
(
	[MTGKEYBEBAN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MAPSAPLO](
	[REKLO] [varchar](30) NULL,
	[NMPERLO] [varchar](521) NULL,
	[KDPERSAP] [varchar](30) NULL,
	[NMPERSAP] [varchar](521) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MATANGB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDKHUSUS] [dbo].[KODEC1] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[KDREK] [dbo].[KODEVC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[JNSREK] [int] NOT NULL,
	[STAKTIF] [int] NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MATANGB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MATANGB] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MATANGBLAK](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKHUSUS] [dbo].[KODEC1] NULL,
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[NLAKAWAL] [dbo].[KODEM] NULL,
	[NLAK_MAN] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MATANGBLAK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MATANGBLAK] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MATANGBLRA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKHUSUS] [dbo].[KODEC1] NULL,
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[NLRAAWAL] [dbo].[KODEM] NULL,
	[NPROGNOSIS] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MATANGBLRA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MATANGBLRA] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MATANGBLRA64](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKHUSUS] [dbo].[KODEC1] NULL,
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[NLRAAWAL] [dbo].[KODEM] NULL,
	[NPROGNOSIS] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MATANGBLRA64] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MATANGBLRA64] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MATANGD](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDKHUSUS] [dbo].[KODEC1] NOT NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MATANGD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MATANGD] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MATANGDLAK](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKHUSUS] [dbo].[KODEC1] NULL,
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[NLAKAWAL] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MATANGDLAK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MATANGDLAK] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MATANGDLRA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKHUSUS] [dbo].[KODEC1] NULL,
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[NLRAAWAL] [dbo].[KODEM] NULL,
	[NPROGNOSIS] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MATANGDLRA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MATANGDLRA] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MATANGDLRA64](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKHUSUS] [dbo].[KODEC1] NULL,
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[NLRAAWAL] [dbo].[KODEM] NULL,
	[NPROGNOSIS] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MATANGDLRA64] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MATANGDLRA64] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MATANGDLRALO](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKHUSUS] [dbo].[KODEC1] NULL,
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[NLRAAWAL] [dbo].[KODEM] NULL,
	[NPROGNOSIS] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MATANGDLRALO] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MATANGDLRALO] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MATANGNRC](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDKHUSUS] [dbo].[KODEC1] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MATANGNRC] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MATANGNRC] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MATANGR](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDKHUSUS] [dbo].[KODEC1] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[JNSREK] [int] NOT NULL,
	[STAKTIF] [int] NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MATANGR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MATANGR] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MATANGRLAK](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKHUSUS] [dbo].[KODEC1] NULL,
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[NLAKAWAL] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MATANGRLAK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MATANGRLAK] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MATANGRLRA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKHUSUS] [dbo].[KODEC1] NULL,
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[NLRAAWAL] [dbo].[KODEM] NULL,
	[NPROGNOSIS] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MATANGRLRA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MATANGRLRA] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MATANGRLRA64](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKHUSUS] [dbo].[KODEC1] NULL,
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[NLRAAWAL] [dbo].[KODEM] NULL,
	[NPROGNOSIS] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MATANGRLRA64] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MATANGRLRA64] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MATANGRLRALO](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKHUSUS] [dbo].[KODEC1] NULL,
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[NLRAAWAL] [dbo].[KODEM] NULL,
	[NPROGNOSIS] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MATANGRLRALO] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MATANGRLRALO] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MATANGSAL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKHUSUS] [dbo].[KODEC1] NULL,
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[NSALAWAL] [dbo].[KODEM] NULL,
	[FORMULA] [dbo].[KODEVC254] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MATANGSAL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MATANGSAL] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MENU](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Kode] [nvarchar](450) NULL,
	[Label] [nvarchar](max) NULL,
	[Resource] [nvarchar](max) NULL,
	[RouterLink] [nvarchar](max) NULL,
	[QueryParams] [nvarchar](max) NULL,
	[Configuration] [nvarchar](max) NULL,
	[Lvl] [int] NOT NULL,
	[Tipe] [nvarchar](max) NULL,
	[Icon] [nvarchar](max) NULL,
 CONSTRAINT [PK_MENU] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MKEGIATAN](
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[IDPRGRM] [dbo].[KODEC10] NOT NULL,
	[KDPERSPEKTIF] [dbo].[KODEC10] NULL,
	[NUKEG] [dbo].[KODEVC10] NULL,
	[NMKEGUNIT] [dbo].[KODEVC254] NULL,
	[LEVELKEG] [dbo].[KODEC1] NULL,
	[TYPE] [dbo].[KODEC1] NULL,
	[KDKEG_INDUK] [dbo].[KODEC10] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MKEGIATAN] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MKEGIATAN] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MLKPSP2D](
	[KDLIST] [dbo].[KODEC10] NOT NULL,
	[URAIAN] [dbo].[KODEVC512] NULL,
	[KET] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MLKPSP2D] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MLKPSP2D] UNIQUE NONCLUSTERED 
(
	[KDLIST] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVBOBOTKEG](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODED] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVBOBOTKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVBOBOTKEG] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVDAFTPHK3](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDP3] [dbo].[KODEC10] NOT NULL,
	[NMP3] [dbo].[KODEVC100] NULL,
	[NMINST] [dbo].[KODEVC100] NULL,
	[NORCP3] [dbo].[KODEVC50] NULL,
	[NMBANK] [dbo].[KODEVC50] NULL,
	[JNSUSAHA] [dbo].[KODEVC50] NULL,
	[ALAMAT] [dbo].[KODEVC200] NULL,
	[TELEPON] [dbo].[KODEVC20] NULL,
	[NPWP] [dbo].[KODEVC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVDAFTPHK3] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVDAFTPHK3] UNIQUE NONCLUSTERED 
(
	[KDP3] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVEVALFISIK](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[REALNUM] [dbo].[KODED] NULL,
	[REALSTR] [dbo].[KODEVC100] NULL,
	[PERSENFISIK] [dbo].[KODED] NULL,
	[KDPROBLEM] [dbo].[KODEC3] NULL,
	[RINCPROBLEM] [dbo].[KODEVC512] NULL,
	[SOLUSI] [dbo].[KODEVC512] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[TARGETFISIK] [dbo].[KODED] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVEVALFISIK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVEVALFISIK] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[KDKEGUNIT] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVFINALPROC](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[KDPAKET] [dbo].[KODEC30] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVFINALPROC] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVFINALPROC] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KDPAKET] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVJKERJA](
	[KDKERJA] [dbo].[KODEC10] NOT NULL,
	[NMKERJA] [dbo].[KODEVC100] NULL,
	[KETERANGAN] [dbo].[KODEVC512] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVJKERJA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVJKERJA] UNIQUE NONCLUSTERED 
(
	[KDKERJA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVKEG](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVKEG] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVKONPAKET](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[NOKON] [dbo].[KODEC50] NOT NULL,
	[KDPAKET] [dbo].[KODEC30] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVKONPAKET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVKONPAKET] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KDPAKET] ASC,
	[NOKON] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVKONTRAK](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[NOKON] [dbo].[KODEC50] NOT NULL,
	[TGLKON] [dbo].[KODEDT] NULL,
	[TGLMULAI] [dbo].[KODEDT] NULL,
	[TGLSELESAI] [dbo].[KODEDT] NULL,
	[KDP3] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[URAIAN] [dbo].[KODEVC512] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVKONTRAK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVKONTRAK] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[NOKON] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVKONTRAKADD](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[NOKON] [dbo].[KODEC50] NOT NULL,
	[NOADD] [dbo].[KODEC50] NOT NULL,
	[TGLADD] [dbo].[KODEDT] NULL,
	[TGLMULAIP] [dbo].[KODEDT] NULL,
	[TGLSELESAIP] [dbo].[KODEDT] NULL,
	[NILAIP] [dbo].[KODEM] NULL,
	[URAIAN] [dbo].[KODEVC512] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVKONTRAKADD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVKONTRAKADD] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[NOADD] ASC,
	[NOKON] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVLPSE](
	[TAHUN] [char](4) NULL,
	[KDTAHAP] [char](10) NULL,
	[KDURUS] [char](10) NULL,
	[URAIURUS] [varchar](512) NULL,
	[KDKELURUS] [char](10) NULL,
	[URAIKELURUS] [varchar](512) NULL,
	[KDORGAN] [char](10) NULL,
	[URAIORGAN] [varchar](512) NULL,
	[KDFUNG] [char](10) NULL,
	[URAIFUNG] [varchar](512) NULL,
	[KDSUBFUNG] [char](10) NULL,
	[URAISUBFUNG] [varchar](512) NULL,
	[KDPGRM] [char](10) NULL,
	[URAIPGRM] [varchar](512) NULL,
	[KDKEG] [char](10) NULL,
	[URAIKEG] [varchar](512) NULL,
	[KDPAKET] [char](10) NULL,
	[URAIPAKET] [varchar](1024) NULL,
	[KDJNSKERJA] [char](10) NULL,
	[URAIJNSKERJA] [varchar](512) NULL,
	[KDLELANG] [char](10) NULL,
	[URAILELANG] [varchar](512) NULL,
	[KDEVAL] [char](10) NULL,
	[URAIEVAL] [varchar](512) NULL,
	[SATUAN] [char](30) NULL,
	[NILAI] [money] NULL,
	[HPS] [money] NULL,
	[KETERANGAN] [varchar](512) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVMETPROC](
	[KDMETOD] [dbo].[KODEC10] NOT NULL,
	[NMMETOD] [dbo].[KODEVC100] NULL,
	[KETERANGAN] [dbo].[KODEVC200] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVMETPROC] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVMETPROC] UNIQUE NONCLUSTERED 
(
	[KDMETOD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVPAKET](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[KDPAKET] [dbo].[KODEC30] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[NMPAKET] [dbo].[KODEVC254] NULL,
	[KDKERJA] [dbo].[KODEC10] NULL,
	[KDMETOD] [dbo].[KODEC10] NULL,
	[KDEVAL] [dbo].[KODEC10] NULL,
	[VOLAWAL] [dbo].[KODED] NULL,
	[VOLADD] [dbo].[KODED] NULL,
	[SATUAN] [dbo].[KODEVC100] NULL,
	[NPAGU] [dbo].[KODEM] NULL,
	[HPS] [dbo].[KODEM] NULL,
	[KETERANGAN] [dbo].[KODEVC512] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVPAKET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVPAKET] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KDPAKET] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVPAKETBYR](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC10] NOT NULL,
	[KDPAKET] [dbo].[KODEC30] NOT NULL,
	[NOSP2D] [dbo].[KODEC30] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVPAKETBYR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVPAKETBYR] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KDPAKET] ASC,
	[KDTAHAP] ASC,
	[NOSP2D] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVPAKETDANA](
	[KDPAKET] [dbo].[KODEC30] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC10] NOT NULL,
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVPAKETDANA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVPAKETDANA] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[KDKEGUNIT] ASC,
	[KDPAKET] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVPAKETDET](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[KDPAKET] [dbo].[KODEC30] NOT NULL,
	[NODOK] [dbo].[KODEC30] NOT NULL,
	[TGLAWAL] [dbo].[KODEDT] NULL,
	[TGLAKHIR] [dbo].[KODEDT] NULL,
	[KD_BULAN] [dbo].[KODEI] NULL,
	[JMLPESERTA] [dbo].[KODEI] NULL,
	[KDPROSES] [dbo].[KODEC10] NULL,
	[KDSANGGAH] [dbo].[KODEC10] NULL,
	[KETERANGAN] [dbo].[KODEVC254] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVPAKETDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVPAKETDET] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KDPAKET] ASC,
	[KDTAHAP] ASC,
	[NODOK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVPRGOUTCOME](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC10] NOT NULL,
	[IDPRGRM] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODED] NULL,
	[INDIKATOR] [dbo].[KODEVC100] NULL,
	[SATUAN] [dbo].[KODEVC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVPRGOUTCOME] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVPRGOUTCOME] UNIQUE NONCLUSTERED 
(
	[IDPRGRM] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVPROBLEM](
	[KDPROBLEM] [dbo].[KODEC3] NOT NULL,
	[NMPROBLEM] [dbo].[KODEVC200] NULL,
	[KETERANGAN] [dbo].[KODEVC200] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVPROBLEM] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVPROBLEM] UNIQUE NONCLUSTERED 
(
	[KDPROBLEM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVPROSLANG](
	[KDPROSES] [dbo].[KODEC10] NOT NULL,
	[NMPROSES] [dbo].[KODEVC200] NULL,
	[KETERANGAN] [dbo].[KODEVC512] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVPROSLANG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVPROSLANG] UNIQUE NONCLUSTERED 
(
	[KDPROSES] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVREALKEUKEG](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[ANGGARAN] [dbo].[KODED] NULL,
	[REAL] [dbo].[KODED] NULL,
	[KDPROBLEM] [dbo].[KODEC3] NULL,
	[RINCPROBLEM] [dbo].[KODEVC512] NULL,
	[SOLUSI] [dbo].[KODEVC512] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVREALKEUKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVREALKEUKEG] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[KDKEGUNIT] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVREALTAHAPKEG](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[KDTAHAPKEG] [dbo].[KODEC3] NOT NULL,
	[KDSTKEG] [dbo].[KODEC2] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[TGLREAL] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVREALTAHAPKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVREALTAHAPKEG] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KDSTKEG] ASC,
	[KDTAHAP] ASC,
	[KDTAHAPKEG] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVRENCTAHAPKEG](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[KDTAHAPKEG] [dbo].[KODEC10] NOT NULL,
	[NMTAHAPKEG] [dbo].[KODEVC100] NULL,
	[KDSTDTAHAPKEG] [dbo].[KODEC3] NOT NULL,
	[TGLMULAI] [dbo].[KODEDT] NULL,
	[TGLSELESAI] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVRENCTAHAPKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVRENCTAHAPKEG] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KDTAHAP] ASC,
	[KDTAHAPKEG] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVSANGGAH](
	[KDSANGGAH] [dbo].[KODEC10] NOT NULL,
	[NMSANGGAH] [dbo].[KODEVC100] NULL,
	[KETERANGAN] [dbo].[KODEVC200] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVSANGGAH] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVSANGGAH] UNIQUE NONCLUSTERED 
(
	[KDSANGGAH] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVSISEVAL](
	[KDEVAL] [dbo].[KODEC10] NOT NULL,
	[NMEVAL] [dbo].[KODEVC100] NULL,
	[KETERANGAN] [dbo].[KODEVC254] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVSISEVAL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVSISEVAL] UNIQUE NONCLUSTERED 
(
	[KDEVAL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVSP2D](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[KD_BULAN] [dbo].[KODEC2] NOT NULL,
	[NOSP2D] [dbo].[KODEVC100] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVSP2D] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVSP2D_1] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[KDKEGUNIT] ASC,
	[NOSP2D] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVSTDTAHAPKEG](
	[KDSTDTAHAPKEG] [dbo].[KODEC3] NOT NULL,
	[NMSTDTAHAPKEG] [dbo].[KODEVC100] NULL,
	[KETERANGAN] [dbo].[KODEVC200] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVSTDTAHAPKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVSTDTAHAPKEG] UNIQUE NONCLUSTERED 
(
	[KDSTDTAHAPKEG] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVSTKEG](
	[KDSTKEG] [dbo].[KODEC2] NOT NULL,
	[NMSTKEG] [dbo].[KODEVC50] NULL,
	[URAIAN] [dbo].[KODEVC100] NULL,
	[WARNA] [dbo].[KODEVC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVSTKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVSTKEG] UNIQUE NONCLUSTERED 
(
	[KDSTKEG] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVUSERKEG](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[USERID] [dbo].[KODEC30] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVUSERKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVUSERKEG] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC,
	[USERID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVVALIDPAKETALL](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[NOVALID] [dbo].[KODEVC30] NOT NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[KETERANGAN] [dbo].[KODEVC254] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVVALIDPAKETALL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVVALIDPAKETALL] UNIQUE NONCLUSTERED 
(
	[KDTAHAP] ASC,
	[NOVALID] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVVALIDREALKEG](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEC2] NOT NULL,
	[TGLVALID] [dbo].[KODEDT] NOT NULL,
	[KETERANGAN] [dbo].[KODEVC254] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVVALIDREALKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVVALIDREALKEG] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVVALIDRENCKEG](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[TGLVALID] [dbo].[KODEDT] NOT NULL,
	[KETERANGAN] [dbo].[KODEVC254] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVVALIDRENCKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVVALIDRENCKEG] UNIQUE NONCLUSTERED 
(
	[KDTAHAP] ASC,
	[TGLVALID] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVWEBGROUP](
	[GROUPID] [dbo].[KODEC10] NOT NULL,
	[NMGROUP] [dbo].[KODEVC50] NULL,
	[KET] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVWEBGROUP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVWEBGROUP] UNIQUE NONCLUSTERED 
(
	[GROUPID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVWEBOTOR](
	[GROUPID] [dbo].[KODEC10] NOT NULL,
	[ROLEID] [dbo].[KODEC30] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVWEBOTOR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVWEBOTOR] UNIQUE NONCLUSTERED 
(
	[GROUPID] ASC,
	[ROLEID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVWEBROLE](
	[ROLEID] [dbo].[KODEC30] NOT NULL,
	[ROLE] [dbo].[KODEVC254] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[MENUID] [bigint] NULL,
	[BANTUAN] [text] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVWEBROLE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVWEBROLE] UNIQUE NONCLUSTERED 
(
	[ROLEID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MONEVWEBUSER](
	[USERID] [dbo].[KODEC30] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NULL,
	[NIP] [dbo].[KODEC30] NULL,
	[GROUPID] [dbo].[KODEC10] NULL,
	[PWD] [char](30) NULL,
	[NAMA] [dbo].[KODEVC50] NULL,
	[BLOKID] [dbo].[KODEC1] NULL,
	[TRANSECURE] [dbo].[KODEC1] NULL,
	[STINSERT] [dbo].[KODEC1] NULL,
	[STUPDATE] [dbo].[KODEC1] NULL,
	[STDELETE] [dbo].[KODEC1] NULL,
	[KET] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MONEVWEBUSER] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MONEVWEBUSER] UNIQUE NONCLUSTERED 
(
	[USERID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MPARKEG](
	[KDKEG_INDUK] [char](10) NOT NULL,
	[IDPRGRM] [char](10) NOT NULL,
	[KDPERSPEKTIF] [char](10) NULL,
	[NUKEG] [nvarchar](10) NULL,
	[NMKEGUNIT] [nvarchar](254) NULL,
	[LEVELKEG] [char](1) NULL,
	[TYPE] [char](1) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MPARKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MPARKEG] UNIQUE NONCLUSTERED 
(
	[KDKEG_INDUK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MPGRM](
	[IDPRGRM] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NULL,
	[NMPRGRM] [dbo].[KODEVC254] NULL,
	[NUPRGRM] [dbo].[KODEVC5] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MPGRM] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MPGRM] UNIQUE NONCLUSTERED 
(
	[IDPRGRM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTGDUNIT](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MTGDUNIT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MTGDUNIT] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTGNRCBCKP](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDPER] [dbo].[KODEVC30] NULL,
	[NMPER] [dbo].[KODEVC200] NULL,
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[KDKHUSUS] [dbo].[KODEC1] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MTGSBDANA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_MTGSBDANA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_MTGSBDANA] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NEXTKEY](
	[TABLEID] [dbo].[KODEC30] NOT NULL,
	[NEXTKEY] [dbo].[KODEC30] NULL,
	[NEXTKEYDESC] [dbo].[KODEVC200] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_NEXTKEY] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_NEXTKEY] UNIQUE NONCLUSTERED 
(
	[TABLEID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NOSPPGJ](
	[NOSPP] [dbo].[KODEVC50] NULL,
	[UNITKEY] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NPD](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[NONPD] [nvarchar](100) NOT NULL,
	[UNITKEY] [char](10) NOT NULL,
	[KEYBEND] [nchar](36) NOT NULL,
	[IDTRANS] [int] NOT NULL,
	[URAIAN] [nvarchar](512) NULL,
	[TGLNPD] [datetime] NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_NPD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_NPD] UNIQUE NONCLUSTERED 
(
	[IDTRANS] ASC,
	[NONPD] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NPDBPK](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[NONPD] [nvarchar](100) NOT NULL,
	[NOBPK] [nvarchar](100) NOT NULL,
	[UNITKEY] [char](10) NOT NULL,
	[IDTRANS] [int] NULL,
	[TGLKIRIM] [datetime] NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_NPDBPK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_NPDBPK] UNIQUE NONCLUSTERED 
(
	[NOBPK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_NPDBPK] UNIQUE NONCLUSTERED 
(
	[NONPD] ASC,
	[IDTRANS] ASC,
	[UNITKEY] ASC,
	[NOBPK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NPDSTS](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[NONPD] [nvarchar](100) NOT NULL,
	[NOSTS] [nvarchar](100) NOT NULL,
	[UNITKEY] [nchar](36) NOT NULL,
	[IDTRANS] [int] NULL,
	[TGLKIRIM] [datetime] NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_NPDSTS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_NPDSTS] UNIQUE NONCLUSTERED 
(
	[NOSTS] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_NPDSTS] UNIQUE NONCLUSTERED 
(
	[NONPD] ASC,
	[IDTRANS] ASC,
	[UNITKEY] ASC,
	[NOSTS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NPDTBPL](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[NONPD] [nvarchar](100) NOT NULL,
	[NOTBPL] [nvarchar](100) NOT NULL,
	[UNITKEY] [char](10) NOT NULL,
	[IDTRANS] [int] NULL,
	[TGLKIRIM] [datetime] NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_NPDTBPL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_NPDTBPL] UNIQUE NONCLUSTERED 
(
	[NOTBPL] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_NPDTBPL] UNIQUE NONCLUSTERED 
(
	[NONPD] ASC,
	[IDTRANS] ASC,
	[UNITKEY] ASC,
	[NOTBPL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NRCBEND](
	[KEYBEND] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_NRCBEND] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_NRCBEND] UNIQUE NONCLUSTERED 
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NRCBENDJKN](
	[KEYBEND] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_NRCBENDJKN] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_NRCBENDJKN] UNIQUE NONCLUSTERED 
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NRCELIMINASI](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[NOTUTUP] [dbo].[KODEC30] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_NRCELIMINASI] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_NRCELIMINASI] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NSKUP](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[PAGU] [dbo].[KODEM] NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_NSKUP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_NSKUP] UNIQUE NONCLUSTERED 
(
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OTOKOROLARIB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[MTGKEYNRC] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_OTOKOROLARIB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_OTOKOROLARIB] UNIQUE NONCLUSTERED 
(
	[KDPERS] ASC,
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OTOKOROLARIR](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[MTGKEYNRC] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_OTOKOROLARIR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_OTOKOROLARIR] UNIQUE NONCLUSTERED 
(
	[KDPERS] ASC,
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PAGUSKPD](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[UNITKEY] [char](10) NOT NULL,
	[KDTAHAP] [char](10) NOT NULL,
	[NILAIUP] [money] NULL,
	[NILAI] [money] NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_PAGUSKPD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_PAGUSKPD] UNIQUE NONCLUSTERED 
(
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PAJAK](
	[KDPER] [nvarchar](255) NOT NULL,
	[KDPAJAK] [nvarchar](255) NULL,
	[NMPER] [nvarchar](255) NULL,
	[PJKKEY] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_PAJAK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_PAJAK] UNIQUE NONCLUSTERED 
(
	[KDPER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[PJKKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PANJAR](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOPANJAR] [dbo].[KODEC50] NOT NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[NIP] [dbo].[KODEC30] NULL,
	[IDXKODE] [dbo].[KODEI] NOT NULL,
	[KDSTATUS] [dbo].[KODEC3] NULL,
	[STTUNAI] [dbo].[KODEBL] NULL,
	[STBANK] [dbo].[KODEBL] NULL,
	[TGLPANJAR] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[REFF] [dbo].[KODEVC10] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[KDBANK] [dbo].[KODEC3] NULL,
	[NOREK] [dbo].[KODEVC20] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_PANJAR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_PANJAR] UNIQUE NONCLUSTERED 
(
	[NOPANJAR] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PANJARDET](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOPANJAR] [dbo].[KODEC50] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_PANJARDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_PANJARDET] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[NOJETRA] ASC,
	[NOPANJAR] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PEGAWAI](
	[NIP] [dbo].[KODEC30] NOT NULL,
	[KDGOL] [dbo].[KODEC10] NULL,
	[UNITKEY] [dbo].[KODEC10] NULL,
	[NAMA] [dbo].[KODEVC100] NULL,
	[ALAMAT] [dbo].[KODEVC200] NULL,
	[JABATAN] [dbo].[KODEVC200] NULL,
	[PDDK] [dbo].[KODEVC30] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[NPWP] [nchar](50) NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_PEGAWAI] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_PEGAWAI] UNIQUE NONCLUSTERED 
(
	[NIP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PEMDA](
	[CONFIGID] [dbo].[KODEC10] NOT NULL,
	[CONFIGVAL] [dbo].[KODEVC100] NULL,
	[CONFIGDES] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_PEMDA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_PEMDA] UNIQUE NONCLUSTERED 
(
	[CONFIGID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PERICTK](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBA] [dbo].[KODEC50] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [money] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_PERICTK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_PERICTK] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOBA] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PERIODE](
	[KDPERIODE] [dbo].[KODEI] NOT NULL,
	[NMPERIODE] [dbo].[KODEVC30] NULL,
	[AWAL] [dbo].[KODEDT] NULL,
	[AKHIR] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_PERIODE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_PERIODE] UNIQUE NONCLUSTERED 
(
	[KDPERIODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PERMISSION](
	[RoleId] [int] NOT NULL,
	[MenuId] [int] NOT NULL,
	[Approver] [bit] NOT NULL,
	[Checker] [bit] NOT NULL,
	[Maker] [bit] NOT NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PERSACC](
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[NMPERS] [dbo].[KODEVC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_PERSACC] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_PERSACC] UNIQUE NONCLUSTERED 
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PGRMUNIT](
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDPRGRM] [dbo].[KODEC10] NOT NULL,
	[TARGET] [dbo].[KODEVC200] NULL,
	[SASARAN] [dbo].[KODEVC200] NULL,
	[NOPRIO] [dbo].[KODEI] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_PGRMUNIT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_PGRMUNIT] UNIQUE NONCLUSTERED 
(
	[IDPRGRM] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PJKPS](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOPUNGUT] [dbo].[KODEC50] NOT NULL,
	[NOSETOR] [dbo].[KODEC50] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_PJKPS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_PJKPS] UNIQUE NONCLUSTERED 
(
	[NOPUNGUT] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[POSNORMAL](
	[KDBAB] [dbo].[KODEVC30] NOT NULL,
	[NMBAB] [dbo].[KODEVC50] NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_POSNORMAL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_POSNORMAL] UNIQUE NONCLUSTERED 
(
	[KDBAB] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[POSTAPBD](
	[unitkey] [char](10) NOT NULL,
	[keybend] [char](10) NULL,
	[jmatang] [char](10) NOT NULL,
	[kdprgrm] [char](10) NOT NULL,
	[kdkeg] [char](10) NOT NULL,
	[mtgkey] [char](10) NULL,
	[jbuk] [char](10) NOT NULL,
	[nobuk] [char](50) NOT NULL,
	[persacc] [char](1) NOT NULL,
	[tgl] [datetime] NULL,
	[nilai] [money] NULL,
	[mtgbud] [char](10) NULL,
	[mtgbend] [char](10) NULL,
	[kolom] [char](2) NULL,
	[ket] [varchar](4096) NULL,
	[nobukas] [char](50) NULL,
	[ref] [char](100) NULL,
	[nojetra] [char](2) NULL,
	[kdstatus] [char](3) NULL,
	[mtgrkunit] [char](10) NULL,
	[mtgrkppkd] [char](10) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[POSTAPBDSKPD](
	[unitkey] [char](10) NOT NULL,
	[keybend] [char](10) NULL,
	[jmatang] [char](10) NOT NULL,
	[kdprgrm] [char](10) NOT NULL,
	[kdkeg] [char](10) NOT NULL,
	[mtgkey] [char](10) NULL,
	[jbuk] [char](10) NOT NULL,
	[nobuk] [char](50) NOT NULL,
	[persacc] [char](1) NOT NULL,
	[tgl] [datetime] NULL,
	[nilai] [money] NULL,
	[mtgbud] [char](10) NULL,
	[mtgbend] [char](10) NULL,
	[kolom] [char](2) NULL,
	[ket] [varchar](4096) NULL,
	[nobukas] [char](50) NULL,
	[ref] [char](100) NULL,
	[nojetra] [char](2) NULL,
	[kdstatus] [char](3) NULL,
	[mtgrkunit] [char](10) NULL,
	[mtgrkppkd] [char](10) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[POSTNRC](
	[unitkey] [char](10) NOT NULL,
	[jmatang] [char](10) NOT NULL,
	[mtgkey] [char](10) NULL,
	[jbuk] [char](10) NOT NULL,
	[nobuk] [char](50) NOT NULL,
	[persacc] [char](1) NOT NULL,
	[kolom] [char](2) NOT NULL,
	[tgl] [datetime] NULL,
	[nilai] [money] NULL,
	[ket] [varchar](4096) NULL,
	[nobukas] [char](50) NULL,
	[ref] [char](100) NULL,
	[nojetra] [char](2) NULL,
	[kdstatus] [char](3) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[POSTNRCSKPD](
	[unitkey] [char](10) NOT NULL,
	[jmatang] [char](10) NOT NULL,
	[mtgkey] [char](10) NULL,
	[jbuk] [char](10) NOT NULL,
	[nobuk] [char](50) NOT NULL,
	[persacc] [char](1) NOT NULL,
	[kolom] [char](2) NOT NULL,
	[tgl] [datetime] NULL,
	[nilai] [money] NULL,
	[ket] [varchar](4096) NULL,
	[nobukas] [char](50) NULL,
	[ref] [char](100) NULL,
	[nojetra] [char](2) NULL,
	[kdstatus] [char](3) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PPK](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NIP] [dbo].[KODEC30] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_PPK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_PPK] UNIQUE NONCLUSTERED 
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PRIOKEG](
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[PRIOKEY] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_PRIOKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_PRIOKEG] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROFIL](
	[KDPROFIL] [dbo].[KODEC2] NOT NULL,
	[NMPROFIL] [dbo].[KODEVC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_PROFIL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_PROFIL] UNIQUE NONCLUSTERED 
(
	[KDPROFIL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROFILUNIT](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDPROFIL] [dbo].[KODEC2] NOT NULL,
	[NODESK] [dbo].[KODEC2] NULL,
	[KETPROFIL] [dbo].[KODEVC4096] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_PROFILUNIT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_PROFILUNIT] UNIQUE NONCLUSTERED 
(
	[KDPROFIL] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PSPJ](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPJ] [dbo].[KODEC50] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[IDXKODE] [dbo].[KODEI] NOT NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[KDSTATUS] [dbo].[KODEC3] NOT NULL,
	[TGLSPJ] [dbo].[KODEDT] NULL,
	[TGLBUKU] [dbo].[KODEDT] NULL,
	[NOSAH] [dbo].[KODEVC50] NULL,
	[TGLSAH] [dbo].[KODEDT] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[KETERANGAN] [dbo].[KODEVC512] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_PSPJ] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_PSPJ] UNIQUE NONCLUSTERED 
(
	[NOSPJ] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RASKB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RASKB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RASKB] UNIQUE NONCLUSTERED 
(
	[KDTAHAP] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RASKBLNB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RASKBLNB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RASKBLNB] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[KDTAHAP] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RASKBLND](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RASKBLND] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RASKBLND] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[KDTAHAP] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RASKBLNR](
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RASKBLNR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RASKBLNR] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[KDKEGUNIT] ASC,
	[KDTAHAP] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RASKBLNRTL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RASKBLNRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RASKBLNRTL] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[KDTAHAP] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RASKD](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RASKD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RASKD] UNIQUE NONCLUSTERED 
(
	[KDTAHAP] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RASKDETB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDNILAI] [dbo].[KODEVC10] NOT NULL,
	[KDJABAR] [dbo].[KODEVC30] NULL,
	[URAIAN] [dbo].[KODEVC1024] NULL,
	[JUMBYEK] [dbo].[KODEM] NULL,
	[SATUAN] [dbo].[KODEVC20] NULL,
	[TARIF] [dbo].[KODEM] NULL,
	[SUBTOTAL] [dbo].[KODEM] NULL,
	[EKSPRESI] [dbo].[KODEVC254] NULL,
	[INCLSUBTOTAL] [dbo].[KODEBL] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[IDSTDHARGA] [dbo].[KODEC10] NULL,
	[KDDANA] [dbo].[KODEC3] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RASKDETB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RASKDETB] UNIQUE NONCLUSTERED 
(
	[KDNILAI] ASC,
	[KDTAHAP] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RASKDETD](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDNILAI] [dbo].[KODEVC10] NOT NULL,
	[KDJABAR] [dbo].[KODEVC30] NULL,
	[URAIAN] [dbo].[KODEVC1024] NULL,
	[JUMBYEK] [dbo].[KODEM] NULL,
	[SATUAN] [dbo].[KODEVC20] NULL,
	[TARIF] [dbo].[KODEM] NULL,
	[SUBTOTAL] [dbo].[KODEM] NULL,
	[EKSPRESI] [dbo].[KODEVC254] NULL,
	[INCLSUBTOTAL] [dbo].[KODEBL] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[IDSTDHARGA] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RASKDETD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RASKDETD] UNIQUE NONCLUSTERED 
(
	[KDNILAI] ASC,
	[KDTAHAP] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RASKDETR](
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDNILAI] [dbo].[KODEVC10] NOT NULL,
	[KDJABAR] [dbo].[KODEVC512] NULL,
	[URAIAN] [dbo].[KODEVC1024] NULL,
	[JUMBYEK] [dbo].[KODEM] NULL,
	[SATUAN] [dbo].[KODEVC254] NULL,
	[TARIF] [dbo].[KODEM] NULL,
	[SUBTOTAL] [dbo].[KODEM] NULL,
	[EKSPRESI] [dbo].[KODEVC254] NULL,
	[INCLSUBTOTAL] [dbo].[KODEBL] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[IDSTDHARGA] [dbo].[KODEC50] NULL,
	[KDDANA] [dbo].[KODEC3] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RASKDETR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RASKDETR] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KDNILAI] ASC,
	[KDTAHAP] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RASKDETRTL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDNILAI] [dbo].[KODEVC10] NOT NULL,
	[KDJABAR] [dbo].[KODEVC30] NULL,
	[URAIAN] [dbo].[KODEVC1024] NULL,
	[JUMBYEK] [dbo].[KODEM] NULL,
	[SATUAN] [dbo].[KODEVC20] NULL,
	[TARIF] [dbo].[KODEM] NULL,
	[SUBTOTAL] [dbo].[KODEM] NULL,
	[EKSPRESI] [dbo].[KODEVC254] NULL,
	[INCLSUBTOTAL] [dbo].[KODEBL] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[IDSTDHARGA] [dbo].[KODEC10] NULL,
	[KDDANA] [dbo].[KODEC3] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RASKDETRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RASKDETRTL] UNIQUE NONCLUSTERED 
(
	[KDNILAI] ASC,
	[KDTAHAP] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RASKR](
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RASKR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RASKR] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KDTAHAP] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RASKRTL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[NILAIPLS1] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RASKRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RASKRTL] UNIQUE NONCLUSTERED 
(
	[KDTAHAP] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RBMDETB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBM] [dbo].[KODEC50] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RBMDETB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RBMDETB] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOBM] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RBMDETD](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBM] [dbo].[KODEC50] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RBMDETD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RBMDETD] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOBM] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RBMDETN](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBM] [dbo].[KODEC50] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RBMDETN] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RBMDETN] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOBM] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RBMDETR](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBM] [dbo].[KODEC50] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RBMDETR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RBMDETR] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[NOBM] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RBMDETRTL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOBM] [dbo].[KODEC50] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RBMDETRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RBMDETRTL] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOBM] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REAL_BLUD](
	[NOBUKTI] [char](100) NOT NULL,
	[KDUNIT] [char](10) NULL,
	[NOBKUSKPD] [varchar](100) NULL,
	[KDSTATUS] [char](3) NULL,
	[IDXKODE] [int] NULL,
	[TGLBUKTI] [datetime] NULL,
	[BULAN] [int] NULL,
	[URAIAN] [varchar](4096) NULL,
	[KDPRGRM] [char](10) NULL,
	[KDKEG] [char](10) NULL,
	[KEYBEND] [char](10) NULL,
	[KDPER] [varchar](30) NOT NULL,
	[NMPER] [varchar](1024) NULL,
	[NILAI] [money] NULL,
	[TGLVALID] [datetime] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_REAL_BLUD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_REAL_BLUD_1] UNIQUE NONCLUSTERED 
(
	[KDPER] ASC,
	[NOBUKTI] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REALISASI_INV](
	[UNITKEY] [char](10) NOT NULL,
	[KDSKPD] [char](20) NULL,
	[NMSKPD] [char](20) NULL,
	[NOBKUSKPD] [varchar](100) NOT NULL,
	[NOBUKTI] [varchar](100) NULL,
	[TGLBUKTI] [datetime] NULL,
	[TGLVALID] [datetime] NULL,
	[KDPERBRG] [char](30) NOT NULL,
	[NMPERBRG] [varchar](200) NULL,
	[KODEINV] [int] NOT NULL,
	[MTGKEY] [char](10) NOT NULL,
	[KDPER] [char](30) NOT NULL,
	[NMPER] [varchar](200) NULL,
	[NILAI] [money] NULL,
	[KET] [varchar](512) NULL,
	[TGLCREATE] [datetime] NULL,
	[TGLKIRIM] [datetime] NULL,
	[TGLTERIMA] [datetime] NULL,
	[INTEGST] [int] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_REALISASI_INV] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_REALISASI_INV] UNIQUE NONCLUSTERED 
(
	[KDPERBRG] ASC,
	[KODEINV] ASC,
	[MTGKEY] ASC,
	[NOBKUSKPD] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REFRESHTOKEN](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Token] [nvarchar](max) NULL,
	[IssuedAt] [datetime2](7) NOT NULL,
	[ExpireAt] [datetime2](7) NOT NULL,
	[UserId] [int] NOT NULL,
 CONSTRAINT [PK_REFRESHTOKEN] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REKAKAS](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDAKAS] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_REKAKAS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_REKAKAS] UNIQUE NONCLUSTERED 
(
	[KDAKAS] ASC,
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REKKEG](
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_REKKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_REKKEG] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REKONSET](
	[KDREKON] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[NMREKON] [dbo].[KODEVC20] NULL,
	[KET] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_REKONSET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_REKONSET] UNIQUE NONCLUSTERED 
(
	[KDREKON] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RKASAH](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[TGLSAH] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RKASAH] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RKASAH] UNIQUE NONCLUSTERED 
(
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RKMDETB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSTS] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[KDDANA] [dbo].[KODEC3] NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RKMDETB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RKMDETB] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSTS] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RKMDETD](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSTS] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RKMDETD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RKMDETD] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSTS] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RKMDETR](
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSTS] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[KDDANA] [dbo].[KODEC3] NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RKMDETR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RKMDETR] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSTS] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RKMDETRTL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSTS] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[KDDANA] [dbo].[KODEC3] NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RKMDETRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RKMDETRTL] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSTS] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RKMDETT](
	[NOBBANTU] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSTS] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_RKMDETT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_RKMDETT] UNIQUE NONCLUSTERED 
(
	[NOBBANTU] ASC,
	[NOJETRA] ASC,
	[NOSTS] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ROLE](
	[Id] [int] NOT NULL,
	[Nama] [nvarchar](max) NULL,
	[Deskripsi] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALDOAKHIR](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[SOAKHIR] [dbo].[KODEM] NULL,
	[SOMAN] [dbo].[KODEM] NULL,
	[STVALID] [dbo].[KODEC1] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SALDOAKHIR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SALDOAKHIR] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALDOAWAL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[SOAWAL] [dbo].[KODEM] NULL,
	[STVALID] [dbo].[KODEC1] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SALDOAWAL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SALDOAWAL] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALDOBLALU](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[STVALID] [dbo].[KODEC1] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SALDOBLALU] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SALDOBLALU] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALDODETB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[KDNILAI] [dbo].[KODEVC10] NOT NULL,
	[KDJABAR] [dbo].[KODEVC30] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[JUMBYEK] [dbo].[KODEM] NULL,
	[SATUAN] [dbo].[KODEVC20] NULL,
	[TARIF] [dbo].[KODEM] NULL,
	[SUBTOTAL] [dbo].[KODEM] NULL,
	[EKSPRESI] [dbo].[KODEVC254] NULL,
	[INCLSUBTOTAL] [dbo].[KODEBL] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[IDSTDHARGA] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SALDODETB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SALDODETB] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[KDNILAI] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALDODETD](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[KDNILAI] [dbo].[KODEVC10] NOT NULL,
	[KDJABAR] [dbo].[KODEVC30] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[JUMBYEK] [dbo].[KODEM] NULL,
	[SATUAN] [dbo].[KODEVC20] NULL,
	[TARIF] [dbo].[KODEM] NULL,
	[SUBTOTAL] [dbo].[KODEM] NULL,
	[EKSPRESI] [dbo].[KODEVC254] NULL,
	[INCLSUBTOTAL] [dbo].[KODEBL] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[IDSTDHARGA] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SALDODETD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SALDODETD] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[KDNILAI] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALDODETR](
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[KDNILAI] [dbo].[KODEVC10] NOT NULL,
	[KDJABAR] [dbo].[KODEVC30] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[JUMBYEK] [dbo].[KODEM] NULL,
	[SATUAN] [dbo].[KODEVC20] NULL,
	[TARIF] [dbo].[KODEM] NULL,
	[SUBTOTAL] [dbo].[KODEM] NULL,
	[EKSPRESI] [dbo].[KODEVC254] NULL,
	[INCLSUBTOTAL] [dbo].[KODEBL] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[IDSTDHARGA] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SALDODETR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SALDODETR] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[KDKEGUNIT] ASC,
	[KDNILAI] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALDODETRTL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[KDNILAI] [dbo].[KODEVC10] NOT NULL,
	[KDJABAR] [dbo].[KODEVC30] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[JUMBYEK] [dbo].[KODEM] NULL,
	[SATUAN] [dbo].[KODEVC20] NULL,
	[TARIF] [dbo].[KODEM] NULL,
	[SUBTOTAL] [dbo].[KODEM] NULL,
	[EKSPRESI] [dbo].[KODEVC254] NULL,
	[INCLSUBTOTAL] [dbo].[KODEBL] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[IDSTDHARGA] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SALDODETRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SALDODETRTL] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[KDNILAI] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALDODLALU](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[STVALID] [dbo].[KODEC1] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SALDODLALU] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SALDODLALU] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALDOLAKB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[SOAKHIR] [dbo].[KODEM] NULL,
	[SOMAN] [dbo].[KODEM] NULL,
	[STVALID] [dbo].[KODEC1] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SALDOLAKB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SALDOLAKB] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALDOLAKD](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[SOAKHIR] [dbo].[KODEM] NULL,
	[SOMAN] [dbo].[KODEM] NULL,
	[STVALID] [dbo].[KODEC1] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SALDOLAKD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SALDOLAKD] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALDOLAKR](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[SOAKHIR] [dbo].[KODEM] NULL,
	[SOMAN] [dbo].[KODEM] NULL,
	[STVALID] [dbo].[KODEC1] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SALDOLAKR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SALDOLAKR] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALDOLAKRTL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[SOAKHIR] [dbo].[KODEM] NULL,
	[SOMAN] [dbo].[KODEM] NULL,
	[STVALID] [dbo].[KODEC1] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SALDOLAKRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SALDOLAKRTL] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALDOLRAB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[SOAKHIR] [dbo].[KODEM] NULL,
	[NPROGNOSIS] [dbo].[KODEM] NULL,
	[SOMAN] [dbo].[KODEM] NULL,
	[URAIAN] [dbo].[KODEVC4096] NULL,
	[STVALID] [dbo].[KODEC1] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SALDOLRAB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SALDOLRAB] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALDOLRAD](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[SOAKHIR] [dbo].[KODEM] NULL,
	[NPROGNOSIS] [dbo].[KODEM] NULL,
	[SOMAN] [dbo].[KODEM] NULL,
	[URAIAN] [dbo].[KODEVC4096] NULL,
	[STVALID] [dbo].[KODEC1] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SALDOLRAD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SALDOLRAD] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALDOLRAR](
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[SOAKHIR] [dbo].[KODEM] NULL,
	[NPROGNOSIS] [dbo].[KODEM] NULL,
	[SOMAN] [dbo].[KODEM] NULL,
	[URAIAN] [dbo].[KODEVC4096] NULL,
	[STVALID] [dbo].[KODEC1] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SALDOLRAR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SALDOLRAR] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALDOLRARTL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NOT NULL,
	[SOAKHIR] [dbo].[KODEM] NULL,
	[NPROGNOSIS] [dbo].[KODEM] NULL,
	[SOMAN] [dbo].[KODEM] NULL,
	[URAIAN] [dbo].[KODEVC4096] NULL,
	[STVALID] [dbo].[KODEC1] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SALDOLRARTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SALDOLRARTL] UNIQUE NONCLUSTERED 
(
	[KD_BULAN] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALDORLALU](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[STVALID] [dbo].[KODEC1] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SALDORLALU] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SALDORLALU_1] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SANGGAH](
	[KDSANGGAH] [dbo].[KODEC10] NOT NULL,
	[NMSANGGAH] [dbo].[KODEVC100] NULL,
	[KETERANGAN] [dbo].[KODEVC200] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SANGGAH] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SANGGAH] UNIQUE NONCLUSTERED 
(
	[KDSANGGAH] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SAPLO](
	[KDPER] [varchar](30) NULL,
	[NMPER] [varchar](200) NULL,
	[MTGLEVEL] [char](2) NULL,
	[KDKHUSUS] [char](1) NULL,
	[TYPE] [char](1) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SBDANAB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SBDANAB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SBDANAB] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[KDTAHAP] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SBDANAKEG](
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SBDANAKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SBDANAKEG] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[KDKEGUNIT] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SBDANAR](
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SBDANAR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SBDANAR] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[KDKEGUNIT] ASC,
	[KDTAHAP] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SBDANARTL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SBDANARTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SBDANARTL] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[KDTAHAP] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETBLAK](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEYLAK] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETBLAK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETBLAK] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETBLRA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEYLRA] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETBLRA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETBLRA] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETBLRA64](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEYLRA] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETBLRA64] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETBLRA64] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETDLAK](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEYLAK] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETDLAK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETDLAK] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETDLRA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEYLRA] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETDLRA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETDLRA] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETDLRA64](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEYLRA] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETDLRA64] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETDLRA64] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETDLRALO](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEYLRA] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETDLRALO] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETDLRALO] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[MTGKEYLRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETKDP](
	[MTGKEYKDP] [dbo].[KODEC10] NOT NULL,
	[MTGKEYBM] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETKDP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETKDP] UNIQUE NONCLUSTERED 
(
	[MTGKEYBM] ASC,
	[MTGKEYKDP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETKEG_ENTRY](
	[KDTAHAP] [varchar](2) NOT NULL,
	[UNITKEY] [varchar](10) NOT NULL,
	[KDKEGUNIT] [varchar](10) NOT NULL,
	[SET_REK] [bit] NOT NULL,
	[SET_JBR] [bit] NOT NULL,
	[SET_BLN] [bit] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETKEG_ENTRY] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETKEG_ENTRY] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETKOR](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEYNRC] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETKOR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETKOR] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETLRAB24](
	[MTGKEY] [char](10) NOT NULL,
	[MTGKEY24] [char](10) NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETLRAD24](
	[MTGKEY] [char](10) NOT NULL,
	[MTGKEY24] [char](10) NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETLRAR24](
	[MTGKEY] [char](10) NOT NULL,
	[MTGKEY24] [char](10) NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETNRCMAPPING](
	[MTGKEYASET] [dbo].[KODEC10] NOT NULL,
	[MTGKEYHUTANG] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETNRCMAPPING] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETNRCMAPPING] UNIQUE NONCLUSTERED 
(
	[MTGKEYASET] ASC,
	[MTGKEYHUTANG] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETPFK](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[PJKKEY] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETPFK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETPFK] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETRLAK](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEYLAK] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETRLAK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETRLAK] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETRLRA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEYLRA] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETRLRA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETRLRA] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETRLRA64](
	[MTGKEY] [dbo].[KODEC20] NOT NULL,
	[MTGKEYLRA] [dbo].[KODEC20] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETRLRA64] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETRLRA64] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETRLRALO](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEYLRA] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETRLRALO] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETRLRALO] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[MTGKEYLRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETUM](
	[MTGKEYUM] [dbo].[KODEC10] NOT NULL,
	[MTGKEYBL] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETUM] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETUM] UNIQUE NONCLUSTERED 
(
	[MTGKEYBL] ASC,
	[MTGKEYUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETUNIT_ENTRY](
	[KDTAHAP] [varchar](2) NOT NULL,
	[UNITKEY] [varchar](10) NOT NULL,
	[SETALL_KEG] [bit] NOT NULL,
	[SETALL_REK] [bit] NOT NULL,
	[SETALL_JBR] [bit] NOT NULL,
	[SETALL_BLN] [bit] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETUNIT_ENTRY] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETUNIT_ENTRY] UNIQUE NONCLUSTERED 
(
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETUPDLO](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEYLRA] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETUPDLO] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETUPDLO] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[MTGKEYLRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SETUPRLO](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[MTGKEYLRA] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SETUPRLO] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SETUPRLO] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[MTGKEYLRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SIFATKEG](
	[KDSIFAT] [dbo].[KODEC2] NOT NULL,
	[NMSIFAT] [dbo].[KODEVC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SIFATKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SIFATKEG] UNIQUE NONCLUSTERED 
(
	[KDSIFAT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SIKDPEMDA](
	[tahun] [varchar](4) NULL,
	[satker] [varchar](10) NULL,
	[kdpemda] [varchar](10) NULL,
	[kddata] [varchar](10) NULL,
	[kdakun] [varchar](10) NULL,
	[uraiakun] [varchar](512) NULL,
	[kdkel] [varchar](10) NULL,
	[uraikel] [varchar](512) NULL,
	[kdjns] [varchar](10) NULL,
	[uraijns] [varchar](512) NULL,
	[kdobj] [varchar](10) NULL,
	[uraiobj] [varchar](512) NULL,
	[kdrinci] [varchar](10) NULL,
	[urairinci] [varchar](512) NULL,
	[kdurus] [varchar](10) NULL,
	[uraiurus] [varchar](512) NULL,
	[kdkelurus] [varchar](10) NULL,
	[uraikelurus] [varchar](512) NULL,
	[kdorgan] [varchar](10) NULL,
	[uraiorgan] [varchar](512) NULL,
	[kdpgrm] [varchar](10) NULL,
	[uraipgrm] [varchar](512) NULL,
	[kdkeg] [varchar](10) NULL,
	[uraikeg] [varchar](512) NULL,
	[kdfung] [varchar](10) NULL,
	[uraifung] [varchar](512) NULL,
	[kdsubfung] [varchar](10) NULL,
	[uraisubfung] [varchar](512) NULL,
	[kdsubfungdet] [varchar](10) NULL,
	[uraisubfungdet] [varchar](512) NULL,
	[nilai] [money] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SKDASK](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDXDASK] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[IDXKODE] [dbo].[KODEI] NOT NULL,
	[IDXTTD1] [dbo].[KODEC10] NULL,
	[IDXTTD2] [dbo].[KODEC10] NULL,
	[NODASK] [dbo].[KODEVC50] NULL,
	[TGLDASK] [dbo].[KODEDT] NULL,
	[NOSAH] [dbo].[KODEVC50] NULL,
	[KETDASK] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SKDASK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SKDASK] UNIQUE NONCLUSTERED 
(
	[IDXDASK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SKO](
	[IDXSKO] [dbo].[KODEC10] NOT NULL,
	[KD_BULAN1] [dbo].[KODEI] NULL,
	[KD_BULAN2] [dbo].[KODEI] NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[IDXKODE] [dbo].[KODEI] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDXDASK] [dbo].[KODEC10] NOT NULL,
	[KDDSR] [dbo].[KODEC10] NULL,
	[NOSKDPA] [dbo].[KODEVC50] NULL,
	[TGLSKDPA] [dbo].[KODEDT] NULL,
	[NOSKO] [dbo].[KODEVC50] NULL,
	[TGLSKO] [dbo].[KODEDT] NULL,
	[KETERANGAN] [dbo].[KODEVC512] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SKO] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SKO] UNIQUE NONCLUSTERED 
(
	[IDXSKO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SKOBDET](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDXSKO] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SKOBDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SKOBDET] UNIQUE NONCLUSTERED 
(
	[IDXSKO] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SKODDET](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDXSKO] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SKODDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SKODDET] UNIQUE NONCLUSTERED 
(
	[IDXSKO] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SKORDET](
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDXSKO] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SKORDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SKORDET] UNIQUE NONCLUSTERED 
(
	[IDXSKO] ASC,
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SKORTLDET](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[IDXSKO] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SKORTLDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SKORTLDET] UNIQUE NONCLUSTERED 
(
	[IDXSKO] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SKP](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSKP] [dbo].[KODEC50] NOT NULL,
	[KDSTATUS] [dbo].[KODEC3] NOT NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[NPWPD] [dbo].[KODEC30] NULL,
	[IDXKODE] [dbo].[KODEI] NOT NULL,
	[TGLSKP] [dbo].[KODEDT] NULL,
	[PENYETOR] [dbo].[KODEVC100] NULL,
	[ALAMAT] [dbo].[KODEVC200] NULL,
	[URAISKP] [dbo].[KODEVC254] NULL,
	[TGLTEMPO] [dbo].[KODEDT] NULL,
	[BUNGA] [dbo].[KODEM] NULL,
	[KENAIKAN] [dbo].[KODEM] NULL,
	[TGLVALID] [datetime] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SKP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SKP] UNIQUE NONCLUSTERED 
(
	[NOSKP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SKPDET](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSKP] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SKPDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SKPDET] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSKP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SKPPKD](
	[UNITKEY] [dbo].[KODEVC10] NOT NULL,
	[NOSK] [dbo].[KODEC50] NOT NULL,
	[TGLSK] [dbo].[KODEDT] NULL,
	[KET] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[KDSTATUS] [dbo].[KODEC3] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SKPPKD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SKPPKD_1] UNIQUE NONCLUSTERED 
(
	[NOSK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SKPPKDDET](
	[MTGKEY] [dbo].[KODEVC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSK] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SKPPKDDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SKPPKDDET] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOSK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SKPPKDSPP](
	[NOSPP] [dbo].[KODEC50] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSK] [dbo].[KODEC50] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SKPPKDSPP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SKPPKDSPP_1] UNIQUE NONCLUSTERED 
(
	[NOSPP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SKPSTS](
	[NOSKP] [dbo].[KODEC50] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSTS] [dbo].[KODEC50] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SKPSTS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SKPSTS_1] UNIQUE NONCLUSTERED 
(
	[NOSTS] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SKPTBP](
	[NOTBP] [dbo].[KODEC50] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSKP] [dbo].[KODEC50] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SKPTBP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SKPTBP] UNIQUE NONCLUSTERED 
(
	[NOTBP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SP2B](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP2B] [dbo].[KODEC50] NOT NULL,
	[TGLSP2B] [dbo].[KODEDT] NULL,
	[URAISP2B] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SP2B] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SP2B] UNIQUE NONCLUSTERED 
(
	[NOSP2B] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SP2BDET](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP2B] [dbo].[KODEC50] NOT NULL,
	[NOSP3B] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SP2BDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SP2BDET] UNIQUE NONCLUSTERED 
(
	[NOSP2B] ASC,
	[NOSP3B] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SP2D](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[KDSTATUS] [dbo].[KODEC3] NOT NULL,
	[NOSPM] [dbo].[KODEC50] NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[IDXSKO] [dbo].[KODEC10] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[KDP3] [dbo].[KODEC10] NULL,
	[IDXKODE] [dbo].[KODEI] NOT NULL,
	[NOREG] [dbo].[KODEVC5] NULL,
	[KETOTOR] [dbo].[KODEVC254] NULL,
	[NOKONTRAK] [dbo].[KODEVC2048] NULL,
	[KEPERLUAN] [dbo].[KODEVC4096] NULL,
	[PENOLAKAN] [dbo].[KODEC1] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[TGLSP2D] [dbo].[KODEDT] NULL,
	[TGLSPM] [dbo].[KODEDT] NULL,
	[NOBBANTU] [dbo].[KODEC10] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SP2D] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SP2D] UNIQUE NONCLUSTERED 
(
	[NOSP2D] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SP2DBPK](
	[NOBPK] [dbo].[KODEC50] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SP2DBPK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SP2DBPK] UNIQUE NONCLUSTERED 
(
	[NOBPK] ASC,
	[NOSP2D] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SP2DDETB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[KDDANA] [dbo].[KODEC3] NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SP2DDETB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SP2DDETB] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSP2D] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SP2DDETBDANA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SP2DDETBDANA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SP2DDETBDANA] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[MTGKEY] ASC,
	[NOSP2D] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SP2DDETD](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SP2DDETD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SP2DDETD] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSP2D] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SP2DDETR](
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[KDDANA] [dbo].[KODEC3] NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SP2DDETR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SP2DDETR] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSP2D] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SP2DDETRDANA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SP2DDETRDANA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SP2DDETRDANA] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[NOSP2D] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SP2DDETRTL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[KDDANA] [dbo].[KODEC3] NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SP2DDETRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SP2DDETRTL] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSP2D] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SP2DDETRTLDANA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SP2DDETRTLDANA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SP2DDETRTLDANA] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[MTGKEY] ASC,
	[NOSP2D] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SP2DNTPN](
	[NTPN] [dbo].[KODEVC50] NOT NULL,
	[TGLNTPN] [dbo].[KODEDT] NULL,
	[NOSP2D] [dbo].[KODEVC50] NULL,
	[IDXKODE] [dbo].[KODEI] NULL,
	[KDSTATUS] [dbo].[KODEC3] NULL,
	[UNITKEY] [dbo].[KODEVC30] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SP2DNTPN] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SP2DNTPN] UNIQUE NONCLUSTERED 
(
	[NTPN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SP2DPJK](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[PJKKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[KETERANGAN] [dbo].[KODEVC512] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SP2DPJK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SP2DPJK] UNIQUE NONCLUSTERED 
(
	[NOSP2D] ASC,
	[PJKKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SP2DSALUR](
	[NOSALUR] [dbo].[KODEC50] NOT NULL,
	[TANGGAL] [dbo].[KODEDT] NULL,
	[NOCEK] [dbo].[KODEC50] NULL,
	[URAISALUR] [dbo].[KODEVC254] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SP2DSALUR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SP2DSALUR] UNIQUE NONCLUSTERED 
(
	[NOSALUR] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SP2DSALURDET](
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[NOSALUR] [dbo].[KODEC50] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SP2DSALURDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SP2DSALURDET] UNIQUE NONCLUSTERED 
(
	[NOSP2D] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SP3B](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP3B] [dbo].[KODEC50] NOT NULL,
	[TGLSP3B] [dbo].[KODEDT] NULL,
	[URAISP3B] [dbo].[KODEVC254] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[UNITKEY2] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SP3B] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SP3B] UNIQUE NONCLUSTERED 
(
	[NOSP3B] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SP3BDET](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP3B] [dbo].[KODEC50] NOT NULL,
	[NOSPJ] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[UNITKEY2] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SP3BDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SP3BDET] UNIQUE NONCLUSTERED 
(
	[NOSP3B] ASC,
	[NOSPJ] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPJDETB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPJ] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[KDDANA] [dbo].[KODEC3] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPJDETB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPJDETB] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSPJ] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPJDETD](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPJ] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPJDETD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPJDETD] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSPJ] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPJDETP](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPJ] [dbo].[KODEC50] NOT NULL,
	[PJKKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[KETERANGAN] [dbo].[KODEVC512] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPJDETP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPJDETP] UNIQUE NONCLUSTERED 
(
	[NOSPJ] ASC,
	[PJKKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPJDETR](
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPJ] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[KDDANA] [dbo].[KODEC3] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPJDETR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPJDETR] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSPJ] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPJDETRTL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPJ] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[KDDANA] [dbo].[KODEC3] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPJDETRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPJDETRTL] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSPJ] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPJSP2D](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPJ] [dbo].[KODEC50] NOT NULL,
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPJSP2D] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPJSP2D] UNIQUE NONCLUSTERED 
(
	[NOSP2D] ASC,
	[NOSPJ] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPJSPP](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPJ] [dbo].[KODEC50] NOT NULL,
	[NOSPP] [dbo].[KODEC50] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPJSPP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPJSPP] UNIQUE NONCLUSTERED 
(
	[NOSPJ] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPJSTS](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSTS] [dbo].[KODEC50] NOT NULL,
	[NOSPJ] [dbo].[KODEC50] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPJSTS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPJSTS] UNIQUE NONCLUSTERED 
(
	[NOSTS] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPMDETB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPM] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPMDETB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPMDETB] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSPM] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPMDETBDANA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPM] [dbo].[KODEC50] NOT NULL,
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPMDETBDANA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPMDETBDANA] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[MTGKEY] ASC,
	[NOSPM] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPMDETD](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPM] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPMDETD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPMDETD] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSPM] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPMDETR](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPM] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPMDETR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPMDETR] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSPM] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPMDETRDANA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPM] [dbo].[KODEC50] NOT NULL,
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPMDETRDANA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPMDETRDANA] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[NOSPM] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPMDETRTL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPM] [dbo].[KODEC50] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPMDETRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPMDETRTL] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSPM] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPMDETRTLDANA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPM] [dbo].[KODEC50] NOT NULL,
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPMDETRTLDANA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPMDETRTLDANA] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[MTGKEY] ASC,
	[NOSPM] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPMPJK](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPM] [dbo].[KODEC50] NOT NULL,
	[PJKKEY] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[KETERANGAN] [dbo].[KODEVC512] NULL,
	[IDBILLING] [dbo].[KODEC20] NULL,
	[TGLBILLING] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[MTGKEYPJK] [nchar](10) NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPMPJK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPMPJK] UNIQUE NONCLUSTERED 
(
	[NOSPM] ASC,
	[PJKKEY] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPP](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPP] [dbo].[KODEC50] NOT NULL,
	[KDSTATUS] [dbo].[KODEC3] NOT NULL,
	[KD_BULAN] [dbo].[KODEI] NULL,
	[KEYBEND] [dbo].[KODEC10] NULL,
	[IDXSKO] [dbo].[KODEC10] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[KDP3] [dbo].[KODEC10] NULL,
	[IDXKODE] [dbo].[KODEI] NOT NULL,
	[NOREG] [dbo].[KODEVC5] NULL,
	[KETOTOR] [dbo].[KODEVC254] NULL,
	[NOKONTRAK] [dbo].[KODEVC254] NULL,
	[KEPERLUAN] [dbo].[KODEVC4096] NULL,
	[PENOLAKAN] [dbo].[KODEC1] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[TGSPP] [dbo].[KODEDT] NULL,
	[STATUS] [dbo].[KODEC3] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPP] UNIQUE NONCLUSTERED 
(
	[NOSPP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPPBA](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[NOSPP] [char](50) NOT NULL,
	[UNITKEY] [char](10) NOT NULL,
	[NOBA] [char](50) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPPBA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPPBA] UNIQUE NONCLUSTERED 
(
	[NOSPP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPPBPK](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[UNITKEY] [char](10) NOT NULL,
	[NOBPK] [char](50) NOT NULL,
	[NOSPP] [char](50) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPPBPK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPPBPK] UNIQUE NONCLUSTERED 
(
	[NOBPK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPPDETB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[NOSPP] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPPDETB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPPDETB] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSPP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPPDETBDANA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPP] [dbo].[KODEC50] NOT NULL,
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPPDETBDANA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPPDETBDANA] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[MTGKEY] ASC,
	[NOSPP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPPDETD](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[NOSPP] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPPDETD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPPDETD] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSPP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPPDETR](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[NOSPP] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPPDETR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPPDETR] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSPP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPPDETRDANA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPP] [dbo].[KODEC50] NOT NULL,
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPPDETRDANA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPPDETRDANA] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[NOSPP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPPDETRP](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[MTGKEY] [nchar](36) NOT NULL,
	[UNITKEY] [nchar](36) NOT NULL,
	[KDKEGUNIT] [nchar](36) NOT NULL,
	[NOSPP] [nvarchar](100) NOT NULL,
	[MTGKEYPJK] [nchar](36) NOT NULL,
	[NOJETRA] [nchar](2) NOT NULL,
	[NILAI] [money] NULL,
	[KETERANGAN] [nvarchar](512) NULL,
	[IDBILLING] [nchar](20) NULL,
	[TGLBILLING] [datetime] NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPPDETRP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPPDETRP] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[MTGKEYPJK] ASC,
	[NOJETRA] ASC,
	[NOSPP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPPDETRTL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[NOSPP] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPPDETRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPPDETRTL] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOSPP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPPDETRTLDANA](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPP] [dbo].[KODEC50] NOT NULL,
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPPDETRTLDANA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPPDETRTLDANA] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[MTGKEY] ASC,
	[NOSPP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPPDETRTLP](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[MTGKEY] [nchar](36) NOT NULL,
	[UNITKEY] [nchar](36) NOT NULL,
	[NOSPP] [nvarchar](100) NOT NULL,
	[MTGKEYPJK] [nchar](36) NOT NULL,
	[NOJETRA] [nchar](2) NOT NULL,
	[NILAI] [money] NULL,
	[KETERANGAN] [nvarchar](512) NULL,
	[IDBILLING] [nchar](20) NULL,
	[TGLBILLING] [datetime] NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPPDETRTLP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPPDETRTLP] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[MTGKEYPJK] ASC,
	[NOJETRA] ASC,
	[NOSPP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SPPSBDANA](
	[KDDANA] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSPP] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_SPPSBDANA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_SPPSBDANA] UNIQUE NONCLUSTERED 
(
	[KDDANA] ASC,
	[MTGKEY] ASC,
	[NOSPP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[STATTRS](
	[KDSTATUS] [dbo].[KODEC3] NOT NULL,
	[LBLSTATUS] [dbo].[KODEVC50] NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_STATTRS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_STATTRS] UNIQUE NONCLUSTERED 
(
	[KDSTATUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[STDHARGA](
	[IDSTDHARGA] [dbo].[KODEC10] NOT NULL,
	[KDJNSSTD] [dbo].[KODEC10] NULL,
	[NOSTD] [dbo].[KODEVC20] NULL,
	[NMSTD] [dbo].[KODEVC512] NULL,
	[SPEKSTD] [dbo].[KODEVC512] NULL,
	[MERKSTD] [dbo].[KODEVC20] NULL,
	[SATUAN] [dbo].[KODEVC30] NULL,
	[HRGSTD] [dbo].[KODEM] NULL,
	[KET] [dbo].[KODEVC2048] NULL,
	[STVALID] [dbo].[KODEC1] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_STDHARGA] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_STDHARGA] UNIQUE NONCLUSTERED 
(
	[IDSTDHARGA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[STDHARGAD](
	[IDSTDHARGA] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_STDHARGAD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_STDHARGAD] UNIQUE NONCLUSTERED 
(
	[IDSTDHARGA] ASC,
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[STDHARGAR](
	[IDSTDHARGA] [dbo].[KODEC10] NOT NULL,
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_STDHARGAR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_STDHARGAR] UNIQUE NONCLUSTERED 
(
	[IDSTDHARGA] ASC,
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[STRUREK](
	[MTGLEVEL] [dbo].[KODEC2] NOT NULL,
	[NMLEVEL] [dbo].[KODEVC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_STRUREK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_STRUREK] UNIQUE NONCLUSTERED 
(
	[MTGLEVEL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[STRUUNIT](
	[KDLEVEL] [dbo].[KODEC2] NOT NULL,
	[NMLEVEL] [dbo].[KODEVC30] NULL,
	[NUMDIGIT] [dbo].[KODEVC50] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_STRUUNIT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_STRUUNIT] UNIQUE NONCLUSTERED 
(
	[KDLEVEL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[STS](
	[UNITKEY] [nchar](10) NOT NULL,
	[NOSTS] [nchar](50) NOT NULL,
	[KEYBEND1] [nchar](10) NULL,
	[KDSTATUS] [nchar](10) NOT NULL,
	[IDXKODE] [int] NOT NULL,
	[KEYBEND2] [nchar](10) NULL,
	[IDXTTD] [nchar](10) NULL,
	[NOBBANTU] [nchar](10) NOT NULL,
	[TGLSTS] [datetime] NULL,
	[URAIAN] [nchar](254) NULL,
	[TGLVALID] [datetime] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[KDRILIS] [bigint] NULL,
	[STKIRIM] [int] NULL,
	[STCAIR] [int] NULL,
	[KDTRANSFER] [int] NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_STS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_STS] UNIQUE NONCLUSTERED 
(
	[NOSTS] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TAHAP](
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TAHAP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TAHAP] UNIQUE NONCLUSTERED 
(
	[KDTAHAP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TAHAPSAH](
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[KDDOKSAH] [dbo].[KODEC2] NOT NULL,
	[NOSAH] [dbo].[KODEVC50] NULL,
	[TGLSAH] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TAHAPSAH] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TAHAPSAH] UNIQUE NONCLUSTERED 
(
	[KDDOKSAH] ASC,
	[KDTAHAP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TAHUN](
	[KDTAHUN] [dbo].[KODEC2] NOT NULL,
	[NMTAHUN] [dbo].[KODEVC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TAHUN] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TAHUN] UNIQUE NONCLUSTERED 
(
	[KDTAHUN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TBP](
	[UNITKEY] [char](10) NOT NULL,
	[NOTBP] [char](50) NOT NULL,
	[KEYBEND1] [char](10) NULL,
	[KDSTATUS] [char](3) NOT NULL,
	[KEYBEND2] [char](10) NULL,
	[IDXKODE] [int] NOT NULL,
	[TGLTBP] [datetime] NULL,
	[PENYETOR] [varchar](100) NULL,
	[ALAMAT] [varchar](200) NULL,
	[URAITBP] [varchar](254) NULL,
	[TGLVALID] [datetime] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TBP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TBP] UNIQUE NONCLUSTERED 
(
	[NOTBP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TBPDETB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOTBP] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TBPDETB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TBPDETB] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOTBP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TBPDETD](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOTBP] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TBPDETD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TBPDETD] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOTBP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TBPDETR](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOTBP] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TBPDETR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TBPDETR] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOTBP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TBPDETRTL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOTBP] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TBPDETRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TBPDETRTL] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC,
	[NOJETRA] ASC,
	[NOTBP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TBPDETT](
	[KEYBEND] [dbo].[KODEC10] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOTBP] [dbo].[KODEC50] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TBPDETT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TBPDETT] UNIQUE NONCLUSTERED 
(
	[KEYBEND] ASC,
	[NOJETRA] ASC,
	[NOTBP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TBPDETTKEG](
	[KEYBEND] [dbo].[KODEC10] NOT NULL,
	[NOJETRA] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOTBP] [dbo].[KODEC50] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[NILAI] [dbo].[KODEM] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TBPDETTKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TBPDETTKEG] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KEYBEND] ASC,
	[NOJETRA] ASC,
	[NOTBP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TBPL](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[UNITKEY] [nchar](36) NOT NULL,
	[NOTBPL] [nvarchar](100) NOT NULL,
	[KEYBEND] [nchar](36) NULL,
	[KDSTATUS] [nchar](3) NOT NULL,
	[IDXKODE] [int] NOT NULL,
	[KDRILIS] [bigint] NULL,
	[TGLTBPL] [datetime] NULL,
	[PENYETOR] [nvarchar](100) NULL,
	[ALAMAT] [nvarchar](200) NULL,
	[URAITBPL] [nvarchar](254) NULL,
	[TGLVALID] [datetime] NULL,
	[STKIRIM] [int] NULL,
	[STCAIR] [int] NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
	[KDTRANSFER] [int] NULL,
 CONSTRAINT [PK_TBPL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TBPL] UNIQUE NONCLUSTERED 
(
	[NOTBPL] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TBPLDET](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[UNITKEY] [nchar](36) NOT NULL,
	[NOTBPL] [nvarchar](100) NOT NULL,
	[KEYBEND] [nchar](36) NOT NULL,
	[NOJETRA] [nchar](2) NOT NULL,
	[NILAI] [money] NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TBPLDET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TBPLDET] UNIQUE NONCLUSTERED 
(
	[NOTBPL] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_TBPLDET] UNIQUE NONCLUSTERED 
(
	[UNITKEY] ASC,
	[NOTBPL] ASC,
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TBPLDETKEG](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[UNITKEY] [nchar](36) NOT NULL,
	[NOTBPL] [nvarchar](100) NOT NULL,
	[KEYBEND] [nchar](36) NOT NULL,
	[NOJETRA] [nchar](2) NOT NULL,
	[KDKEGUNIT] [nchar](36) NOT NULL,
	[NILAI] [money] NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TBPLDETKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TBPLDETKEG] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[KEYBEND] ASC,
	[NOTBPL] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TBPSTS](
	[NOTBP] [dbo].[KODEC50] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSTS] [dbo].[KODEC50] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TBPSTS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TBPSTS] UNIQUE NONCLUSTERED 
(
	[NOTBP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TEMPBKUK_DEF](
	[NOBUKAS] [dbo].[KODEC50] NOT NULL,
	[NOBBANTU] [dbo].[KODEC10] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[KDBUKTI] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[TGLKAS] [dbo].[KODEDT] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC512] NULL,
	[NOBUKTIKAS] [dbo].[KODEVC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TEMPBKUK_EDIT](
	[NOBUKAS] [dbo].[KODEC50] NOT NULL,
	[NOBBANTU] [dbo].[KODEC10] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[KDBUKTI] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[TGLKAS] [dbo].[KODEDT] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC512] NULL,
	[NOBUKTIKAS] [dbo].[KODEVC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TEMPBKUK_EDIT2](
	[NOBUKAS] [dbo].[KODEC50] NOT NULL,
	[NOBBANTU] [dbo].[KODEC10] NOT NULL,
	[IDXTTD] [dbo].[KODEC10] NULL,
	[KDBUKTI] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NOSP2D] [dbo].[KODEC50] NOT NULL,
	[TGLKAS] [dbo].[KODEDT] NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[URAIAN] [dbo].[KODEVC512] NULL,
	[NOBUKTIKAS] [dbo].[KODEVC30] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TEMPPAJAK](
	[KDPER] [nvarchar](255) NOT NULL,
	[KDPAJAK] [nvarchar](255) NOT NULL,
	[NMPAJAK] [nvarchar](255) NULL,
	[PJKKEY] [dbo].[KODEC10] NOT NULL,
	[JNS] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TEMPPAJAK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TEMPPAJAK] UNIQUE NONCLUSTERED 
(
	[KDPAJAK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[PJKKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TGLPOSTING](
	[IDPOSTING] [dbo].[KODEC10] NOT NULL,
	[KDPOSTING] [dbo].[KODEC10] NULL,
	[TGLPOSTING] [dbo].[KODEDT] NULL,
	[KETERANGAN] [dbo].[KODEVC100] NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TGLPOSTING] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TGLPOSTING] UNIQUE NONCLUSTERED 
(
	[IDPOSTING] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TMPSBDANA002](
	[BELANJA] [varchar](15) NOT NULL,
	[unitkey] [char](10) NOT NULL,
	[kdunit] [varchar](30) NULL,
	[NMUNIT] [varchar](200) NULL,
	[MTGKEY] [char](10) NULL,
	[NUPRGRM] [varchar](5) NULL,
	[IDPRGRM] [char](10) NULL,
	[NMPRGRM] [varchar](254) NULL,
	[KDKEGUNIT] [char](10) NULL,
	[NUKEG] [varchar](10) NULL,
	[NMKEGUNIT] [varchar](254) NULL,
	[KDTAHAP] [char](2) NOT NULL,
	[NILAIDBHPAGU] [money] NOT NULL,
	[NILAIDAUPAGU] [money] NOT NULL,
	[NILAIDAKFISIKPAGU] [money] NOT NULL,
	[NILAIDAKNONFISIKPAGU] [money] NOT NULL,
	[NILAIINSENTIFDAERAHPAGU] [money] NOT NULL,
	[NILAIDANADESAPAGU] [money] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TRSKLP](
	[NODOKLKP] [dbo].[KODEC50] NOT NULL,
	[KDLIST] [dbo].[KODEC10] NOT NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TRSKLP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TRSKLP] UNIQUE NONCLUSTERED 
(
	[KDLIST] ASC,
	[NODOKLKP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TTAPD](
	[NIP] [dbo].[KODEC30] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TTAPD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TTAPD] UNIQUE NONCLUSTERED 
(
	[KDTAHAP] ASC,
	[NIP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TTAPDR](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[NIP] [dbo].[KODEC30] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[IDXKODE] [dbo].[KODEI] NOT NULL,
	[NO] [dbo].[KODEI] NULL,
	[JAB] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TTAPDR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TTAPDR] UNIQUE NONCLUSTERED 
(
	[IDXKODE] ASC,
	[KDKEGUNIT] ASC,
	[KDTAHAP] ASC,
	[NIP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TUPB](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[NOTUTUP] [dbo].[KODEC30] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TUPB] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TUPB] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TUPD](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[NOTUTUP] [dbo].[KODEC30] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TUPD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TUPD] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TUPR](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[KDPERS] [dbo].[KODEC1] NOT NULL,
	[NOTUTUP] [dbo].[KODEC30] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_TUPR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_TUPR] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UJILKP](
	[NODOKLKP] [dbo].[KODEC50] NOT NULL,
	[NIP] [dbo].[KODEC30] NOT NULL,
	[TGLPERIKSA] [dbo].[KODEDT] NULL,
	[TGLDITERUSKAN] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_UJILKP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_UJILKP] UNIQUE NONCLUSTERED 
(
	[NIP] ASC,
	[NODOKLKP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[URUSANUNIT](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[URUSKEY] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_URUSANUNIT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_URUSANUNIT] UNIQUE NONCLUSTERED 
(
	[UNITKEY] ASC,
	[URUSKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[URUSRTL](
	[MTGKEY] [dbo].[KODEC10] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_URUSRTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_URUSRTL] UNIQUE NONCLUSTERED 
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[USER](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Username] [nvarchar](450) NULL,
	[UnitOrganisasiId] [int] NULL,
	[Password] [nvarchar](max) NULL,
	[FalseLoginCount] [tinyint] NOT NULL,
	[LockedOut] [bit] NOT NULL,
	[Deskripsi] [nvarchar](max) NULL,
	[NIP] [dbo].[KODEC30] NULL,
 CONSTRAINT [PK_USER] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[USERDESK](
	[USERID] [varchar](50) NOT NULL,
	[UNITKEY] [varchar](10) NOT NULL,
	[KEYBEND] [varchar](10) NOT NULL,
	[KDKEGUNIT] [varchar](10) NOT NULL,
	[ACTIVE] [bit] NOT NULL,
	[BTL] [bit] NOT NULL,
	[PDP] [bit] NOT NULL,
	[PBY] [bit] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_USERDESK] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_USERDESK_1] UNIQUE NONCLUSTERED 
(
	[USERID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[USERDESK_BEND](
	[USERID] [varchar](50) NOT NULL,
	[KEYBEND] [varchar](10) NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_USERDESK_BEND] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_USERDESK_BEND] UNIQUE NONCLUSTERED 
(
	[KEYBEND] ASC,
	[USERID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[USERDESK_KEG](
	[USERID] [varchar](50) NOT NULL,
	[KDKEGUNIT] [varchar](10) NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_USERDESK_KEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_USERDESK_KEG] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[USERID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[USERDESK_UNIT](
	[USERID] [varchar](50) NOT NULL,
	[UNITKEY] [varchar](10) NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_USERDESK_UNIT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_USERDESK_UNIT] UNIQUE NONCLUSTERED 
(
	[UNITKEY] ASC,
	[USERID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[USERKEG](
	[UNITUSERID] [dbo].[KODEC10] NOT NULL,
	[USERID] [dbo].[KODEC30] NOT NULL,
	[KDKEGUNIT] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_USERKEG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_USERKEG] UNIQUE NONCLUSTERED 
(
	[KDKEGUNIT] ASC,
	[UNITUSERID] ASC,
	[USERID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[USERROLE](
	[UserId] [int] NOT NULL,
	[RoleId] [int] NOT NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[USERSKPD](
	[USERID] [dbo].[KODEC30] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_USERSKPD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_USERSKPD] UNIQUE NONCLUSTERED 
(
	[UNITKEY] ASC,
	[USERID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VALIDPAKETALL](
	[UNITKEY] [dbo].[KODEC10] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[NOVALID] [dbo].[KODEVC30] NOT NULL,
	[TGLVALID] [dbo].[KODEDT] NULL,
	[KETERANGAN] [dbo].[KODEVC254] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_VALIDPAKETALL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_VALIDPAKETALL] UNIQUE NONCLUSTERED 
(
	[KDTAHAP] ASC,
	[NOVALID] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WEBERROR](
	[ROLEID] [dbo].[KODEC30] NOT NULL,
	[ERRID] [dbo].[KODEC10] NOT NULL,
	[TGLERR] [dbo].[KODEDT] NULL,
	[ERRNM] [dbo].[KODEVC100] NULL,
	[CORRECTED] [dbo].[KODEBL] NULL,
	[TGLOK] [dbo].[KODEDT] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_WEBERROR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_WEBERROR] UNIQUE NONCLUSTERED 
(
	[ERRID] ASC,
	[ROLEID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WEBFITUR](
	[ROLEID] [dbo].[KODEC30] NOT NULL,
	[FITURID] [dbo].[KODEVC10] NOT NULL,
	[KDFITUR] [dbo].[KODEVC30] NULL,
	[NMFITUR] [dbo].[KODEVC100] NULL,
	[BANTUAN] [dbo].[KODEVC4096] NULL,
	[STATUS] [bit] NULL,
	[TYPE] [char](1) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_WEBFITUR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_WEBFITUR] UNIQUE NONCLUSTERED 
(
	[FITURID] ASC,
	[ROLEID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WEBGRIDCONTROL](
	[MENUID] [bigint] NOT NULL,
	[OLIST1] [dbo].[KODEVC50] NULL,
	[OLISTDETIL1] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL1a] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL1b] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL1c] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL1d] [dbo].[KODEVC50] NULL,
	[OLIST2] [dbo].[KODEVC50] NULL,
	[OLISTDETIL2] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL2a] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL2b] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL2c] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL2d] [dbo].[KODEVC50] NULL,
	[OLIST3] [dbo].[KODEVC50] NULL,
	[OLISTDETIL3] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL3a] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL3b] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL3c] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL3d] [dbo].[KODEVC50] NULL,
	[OLIST4] [dbo].[KODEVC50] NULL,
	[OLISTDETIL4] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL4a] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL4b] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL4c] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL4d] [dbo].[KODEVC50] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_WEBGRIDCONTROL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_WEBGRIDCONTROL] UNIQUE NONCLUSTERED 
(
	[MENUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WEBGROUP](
	[GROUPID] [dbo].[KODEC10] NOT NULL,
	[NMGROUP] [dbo].[KODEVC50] NULL,
	[KET] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_WEBGROUP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_WEBGROUP] UNIQUE NONCLUSTERED 
(
	[GROUPID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WEBLKPCONTROL](
	[MENUID] [bigint] NOT NULL,
	[OLIST1] [dbo].[KODEVC50] NULL,
	[OLISTDETIL1] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL1a] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL1b] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL1c] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL1d] [dbo].[KODEVC50] NULL,
	[OLIST2] [dbo].[KODEVC50] NULL,
	[OLISTDETIL2] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL2a] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL2b] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL2c] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL2d] [dbo].[KODEVC50] NULL,
	[OLIST3] [dbo].[KODEVC50] NULL,
	[OLISTDETIL3] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL3a] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL3b] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL3c] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL3d] [dbo].[KODEVC50] NULL,
	[OLIST4] [dbo].[KODEVC50] NULL,
	[OLISTDETIL4] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL4a] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL4b] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL4c] [dbo].[KODEVC50] NULL,
	[OLISTDETILDETIL4d] [dbo].[KODEVC50] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_WEBLKPCONTROL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_WEBLKPCONTROL] UNIQUE NONCLUSTERED 
(
	[MENUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WEBOTOR](
	[GROUPID] [dbo].[KODEC10] NOT NULL,
	[ROLEID] [dbo].[KODEC30] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_WEBOTOR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_WEBOTOR] UNIQUE NONCLUSTERED 
(
	[GROUPID] ASC,
	[ROLEID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WEBROLE](
	[ROLEID] [dbo].[KODEC30] NOT NULL,
	[ROLE] [dbo].[KODEVC254] NULL,
	[TYPE] [dbo].[KODEC2] NULL,
	[MENUID] [bigint] NULL,
	[BANTUAN] [text] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_WEBROLE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_WEBROLE] UNIQUE NONCLUSTERED 
(
	[ROLEID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WEBSET](
	[KDSET] [dbo].[KODEC10] NOT NULL,
	[VALSET] [dbo].[KODEVC100] NULL,
	[VALDESC] [varchar](200) NULL,
	[MODEENTRY] [dbo].[KODEI] NULL,
	[VALLIST] [dbo].[KODEVC200] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_WEBSET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_WEBSET] UNIQUE NONCLUSTERED 
(
	[KDSET] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WEBUSER](
	[USERID] [dbo].[KODEC30] NOT NULL,
	[KDTAHAP] [dbo].[KODEC2] NOT NULL,
	[UNITKEY] [dbo].[KODEC10] NULL,
	[NIP] [dbo].[KODEC30] NULL,
	[GROUPID] [dbo].[KODEC10] NULL,
	[PWD] [char](30) NULL,
	[NAMA] [dbo].[KODEVC50] NULL,
	[BLOKID] [dbo].[KODEC1] NULL,
	[TRANSECURE] [dbo].[KODEC1] NULL,
	[STINSERT] [dbo].[KODEC1] NULL,
	[STUPDATE] [dbo].[KODEC1] NULL,
	[STDELETE] [dbo].[KODEC1] NULL,
	[KET] [dbo].[KODEVC100] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[EMAIL] [char](10) NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
	[KDPEMDA] [nchar](10) NULL,
 CONSTRAINT [PK_WEBUSER] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_WEBUSER] UNIQUE NONCLUSTERED 
(
	[USERID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ZKODE](
	[IDXKODE] [dbo].[KODEI] NOT NULL,
	[URAIAN] [dbo].[KODEVC254] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[DATECREATE] [datetime] NULL,
	[DATEUPDATE] [datetime] NULL,
 CONSTRAINT [PK_ZKODE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [AK_PK_ZKODE] UNIQUE NONCLUSTERED 
(
	[IDXKODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [SIE].[AnalisisLapKeu](
	[UraiAnalisis] [varchar](50) NULL,
	[Penjelasan] [varchar](50) NULL,
	[Formula] [varchar](50) NULL,
	[Batasan] [varchar](50) NULL,
	[Nilai] [decimal](18, 0) NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SIE].[ANGPBD](
	[GRUP] [varchar](100) NULL,
	[BIDANG URUSAN] [varchar](200) NULL,
	[URUSAN] [varchar](100) NULL,
	[NMUNIT] [varchar](150) NULL,
	[JENIS] [varchar](100) NULL,
	[BABID] [int] NULL,
	[KELOMPOK] [varchar](100) NULL,
	[OBYEK] [varchar](100) NULL,
	[RINCIAN] [varchar](100) NULL,
	[NMPER] [varchar](50) NULL,
	[KD_TAHAP] [int] NULL,
	[ANGGARAN] [decimal](18, 0) NULL,
	[PROYEKSI N+1] [decimal](18, 0) NULL,
	[KD URUSAN] [varchar](8) NULL,
	[KD BIDANG] [varchar](8) NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SIE].[GrafikAngKas](
	[JBukas] [varchar](50) NULL,
	[NilaiAPBD] [decimal](18, 0) NULL,
	[NilaiSPD] [decimal](18, 0) NULL,
	[NilaiKASDA] [decimal](18, 0) NULL,
	[Tanggal] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SIE].[GrafikKontrolSP2D_SPD](
	[JBukas] [varchar](50) NULL,
	[NilaiSP2D] [decimal](18, 0) NULL,
	[Tanggal] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SIE].[GrafikKontrolSPD](
	[JBukas] [varchar](50) NULL,
	[Nilai] [decimal](18, 0) NULL,
	[Tanggal] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SIE].[GrafikRealAPBD](
	[NilaiBelanja] [decimal](18, 0) NULL,
	[NilaiPendapatan] [decimal](18, 0) NULL,
	[Bulan] [int] NULL,
	[Tahun] [int] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SIE].[JBABAPBD](
	[BABID] [int] NOT NULL,
	[KDPERS] [char](1) NULL,
	[STATUS] [char](1) NULL,
	[KDBAB] [varchar](30) NOT NULL,
	[NMBAB] [varchar](200) NULL,
 CONSTRAINT [PK_JBABAPBD] PRIMARY KEY CLUSTERED 
(
	[BABID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SIE].[KasBendKeluar](
	[JBukas] [varchar](50) NULL,
	[Nilai] [decimal](18, 0) NULL,
	[Tanggal] [datetime] NULL,
	[KdJbuk] [int] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SIE].[KasDaerah](
	[JBukas] [varchar](50) NULL,
	[Nilai] [decimal](18, 0) NULL,
	[Tanggal] [datetime] NULL,
	[KdJbuk] [int] NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SIE].[RekeningKasDaerah](
	[NmBank] [varchar](50) NULL,
	[NoRekening] [varchar](50) NULL,
	[NilaiSTS] [decimal](18, 0) NULL,
	[NilaiSP2D] [decimal](18, 0) NULL,
	[NilaiSaldo] [decimal](18, 0) NULL,
	[NilaiKasDaerahTotal] [decimal](18, 0) NULL,
	[Tanggal] [datetime] NULL
) ON [PRIMARY]
GO

------------ INDEX and RELATIONSHIP ------------------

SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_396_FK] ON [dbo].[ANTARBYR]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_608_FK] ON [dbo].[ANTARBYR]
(
	[IDXSKO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_609_FK] ON [dbo].[ANTARBYR]
(
	[IDXKODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_610_FK] ON [dbo].[ANTARBYR]
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_611_FK] ON [dbo].[ANTARBYR]
(
	[KDP3] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_612_FK] ON [dbo].[ANTARBYR]
(
	[KDSTATUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_613_FK] ON [dbo].[ANTARBYR]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_37_FK] ON [dbo].[ATASBEND]
(
	[NIP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_38_FK] ON [dbo].[BEND]
(
	[JNS_BEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_39_FK] ON [dbo].[BEND]
(
	[NIP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_41_FK] ON [dbo].[BEND]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_42_FK] ON [dbo].[BEND]
(
	[KDBANK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_502_FK] ON [dbo].[BKBANK]
(
	[KDSTATUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_503_FK] ON [dbo].[BKBANK]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_504_FK] ON [dbo].[BKBANK]
(
	[KEYBEND1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_506_FK] ON [dbo].[BKBANK]
(
	[KEYBEND2] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_539_FK] ON [dbo].[BKBANK]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_509_FK] ON [dbo].[BKBANKDET]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_51_FK] ON [dbo].[BKBKAS]
(
	[KDBANK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_52_FK] ON [dbo].[BKBKAS]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_53_FK] ON [dbo].[BKBKAS]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_273_FK] ON [dbo].[BKBM]
(
	[UNITKEY] ASC,
	[NOBM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_583_FK] ON [dbo].[BKBM]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_279_FK] ON [dbo].[BKBMDET]
(
	[NOBK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_294_FK] ON [dbo].[BKBMDET]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_295_FK] ON [dbo].[BKBMDET]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_510_FK] ON [dbo].[BKPAJAK]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_511_FK] ON [dbo].[BKPAJAK]
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_512_FK] ON [dbo].[BKPAJAK]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_515_FK] ON [dbo].[BKPAJAK]
(
	[KDSTATUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_357_FK] ON [dbo].[BKRKK]
(
	[UNITKEY] ASC,
	[NOBKUSKPD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_584_FK] ON [dbo].[BKRKK]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_280_FK] ON [dbo].[BKRKKDET]
(
	[NOBK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_296_FK] ON [dbo].[BKRKKDET]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_297_FK] ON [dbo].[BKRKKDET]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_356_FK] ON [dbo].[BKRKM]
(
	[UNITKEY] ASC,
	[NOBKUSKPD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_585_FK] ON [dbo].[BKRKM]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_281_FK] ON [dbo].[BKRKMDET]
(
	[NOBK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_298_FK] ON [dbo].[BKRKMDET]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_299_FK] ON [dbo].[BKRKMDET]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_276_FK] ON [dbo].[BKSPJ]
(
	[UNITKEY] ASC,
	[NOSPJ] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_346_FK] ON [dbo].[BKSPJ]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_277_FK] ON [dbo].[BKSPJDET]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_278_FK] ON [dbo].[BKSPJDET]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_282_FK] ON [dbo].[BKSPJDET]
(
	[NOBK] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_261_FK] ON [dbo].[BKTMEM]
(
	[KDBM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_262_FK] ON [dbo].[BKTMEM]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_263_FK] ON [dbo].[BKTMEM]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_477_FK] ON [dbo].[BKUBANK]
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_521_FK] ON [dbo].[BKUBANK]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_540_FK] ON [dbo].[BKUBANK]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_624_FK] ON [dbo].[BKUBPK]
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_625_FK] ON [dbo].[BKUBPK]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_642_FK] ON [dbo].[BKUBPK]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_203_FK] ON [dbo].[BKUD]
(
	[KDBUKTI] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_344_FK] ON [dbo].[BKUD]
(
	[NOBBANTU] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_474_FK] ON [dbo].[BKUD]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_475_FK] ON [dbo].[BKUD]
(
	[UNITKEY] ASC,
	[NOSTS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_205_FK] ON [dbo].[BKUK]
(
	[KDBUKTI] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_207_FK] ON [dbo].[BKUK]
(
	[UNITKEY] ASC,
	[NOSP2D] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_418_FK] ON [dbo].[BKUK]
(
	[NOBBANTU] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_550_FK] ON [dbo].[BKUK]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE UNIQUE NONCLUSTERED INDEX [UC_BKUK] ON [dbo].[BKUK]
(
	[NOSP2D] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_626_FK] ON [dbo].[BKUPAJAK]
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_627_FK] ON [dbo].[BKUPAJAK]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_645_FK] ON [dbo].[BKUPAJAK]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_622_FK] ON [dbo].[BKUPANJAR]
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_623_FK] ON [dbo].[BKUPANJAR]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_639_FK] ON [dbo].[BKUPANJAR]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_620_FK] ON [dbo].[BKUSP2D]
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_621_FK] ON [dbo].[BKUSP2D]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_636_FK] ON [dbo].[BKUSP2D]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_616_FK] ON [dbo].[BKUSTS]
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_617_FK] ON [dbo].[BKUSTS]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_630_FK] ON [dbo].[BKUSTS]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_618_FK] ON [dbo].[BKUTBP]
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_619_FK] ON [dbo].[BKUTBP]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_633_FK] ON [dbo].[BKUTBP]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_BPK_KDBAYAR] ON [dbo].[BPK]
(
	[KDBAYAR] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_252_FK] ON [dbo].[BPK]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_253_FK] ON [dbo].[BPK]
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_254_FK] ON [dbo].[BPK]
(
	[IDXKODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_425_FK] ON [dbo].[BPK]
(
	[KDSTATUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_257_FK] ON [dbo].[BPKDETB]
(
	[UNITKEY] ASC,
	[NOBPK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_427_FK] ON [dbo].[BPKDETB]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_581_FK] ON [dbo].[BPKDETB]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_256_FK] ON [dbo].[BPKDETD]
(
	[UNITKEY] ASC,
	[NOBPK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_426_FK] ON [dbo].[BPKDETD]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_580_FK] ON [dbo].[BPKDETD]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_255_FK] ON [dbo].[BPKDETR]
(
	[UNITKEY] ASC,
	[NOBPK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_429_FK] ON [dbo].[BPKDETR]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_430_FK] ON [dbo].[BPKDETR]
(
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_490_FK] ON [dbo].[BPKDETR]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_258_FK] ON [dbo].[BPKDETRTL]
(
	[UNITKEY] ASC,
	[NOBPK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_428_FK] ON [dbo].[BPKDETRTL]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_582_FK] ON [dbo].[BPKDETRTL]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_544_FK] ON [dbo].[BPKSPJ]
(
	[UNITKEY] ASC,
	[NOSPJ] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_75_FK] ON [dbo].[BULAN]
(
	[KDPERIODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_DAFTUNIT] ON [dbo].[DAFTUNIT]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_13_FK] ON [dbo].[DAFTUNIT]
(
	[KDLEVEL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_103_FK] ON [dbo].[DASKB]
(
	[UNITKEY] ASC,
	[IDXDASK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_377_FK] ON [dbo].[DASKB]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_110_FK] ON [dbo].[DASKBLNB]
(
	[KD_BULAN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_455_FK] ON [dbo].[DASKBLNB]
(
	[UNITKEY] ASC,
	[MTGKEY] ASC,
	[IDXDASK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_109_FK] ON [dbo].[DASKBLND]
(
	[KD_BULAN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_379_FK] ON [dbo].[DASKBLND]
(
	[UNITKEY] ASC,
	[MTGKEY] ASC,
	[IDXDASK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_108_FK] ON [dbo].[DASKBLNR]
(
	[KD_BULAN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_457_FK] ON [dbo].[DASKBLNR]
(
	[UNITKEY] ASC,
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[IDXDASK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_111_FK] ON [dbo].[DASKBLNRTL]
(
	[KD_BULAN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_456_FK] ON [dbo].[DASKBLNRTL]
(
	[UNITKEY] ASC,
	[MTGKEY] ASC,
	[IDXDASK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_102_FK] ON [dbo].[DASKD]
(
	[UNITKEY] ASC,
	[IDXDASK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_378_FK] ON [dbo].[DASKD]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_311_FK] ON [dbo].[DASKDETB]
(
	[UNITKEY] ASC,
	[MTGKEY] ASC,
	[IDXDASK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_572_FK] ON [dbo].[DASKDETB]
(
	[IDSTDHARGA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_310_FK] ON [dbo].[DASKDETD]
(
	[UNITKEY] ASC,
	[MTGKEY] ASC,
	[IDXDASK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_571_FK] ON [dbo].[DASKDETD]
(
	[IDSTDHARGA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_312_FK] ON [dbo].[DASKDETRTL]
(
	[UNITKEY] ASC,
	[MTGKEY] ASC,
	[IDXDASK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_573_FK] ON [dbo].[DASKDETRTL]
(
	[IDSTDHARGA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_444_FK] ON [dbo].[DASKL]
(
	[UNITKEY] ASC,
	[IDXDASK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_445_FK] ON [dbo].[DASKL]
(
	[KDTAHUN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_374_FK] ON [dbo].[DASKR]
(
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_376_FK] ON [dbo].[DASKR]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_98_FK] ON [dbo].[DASKR]
(
	[UNITKEY] ASC,
	[IDXDASK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_104_FK] ON [dbo].[DASKRTL]
(
	[UNITKEY] ASC,
	[IDXDASK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_375_FK] ON [dbo].[DASKRTL]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_333_FK] ON [dbo].[DASKUM]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_29_FK] ON [dbo].[DASKUMB]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_30_FK] ON [dbo].[DASKUMB]
(
	[KDDASKUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_26_FK] ON [dbo].[DASKUMD]
(
	[KDDASKUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_336_FK] ON [dbo].[DASKUMD]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_27_FK] ON [dbo].[DASKUMR]
(
	[KDDASKUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_28_FK] ON [dbo].[DASKUMR]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_529_FK] ON [dbo].[DP]
(
	[IDXKODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_538_FK] ON [dbo].[DP]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_224_FK] ON [dbo].[DPDET]
(
	[NODP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_225_FK] ON [dbo].[DPDET]
(
	[UNITKEY] ASC,
	[NOSP2D] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_48_FK] ON [dbo].[FUNGSINIT]
(
	[IDFUNG] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_365_FK] ON [dbo].[JABTTD]
(
	[NIP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_366_FK] ON [dbo].[JABTTD]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_45_FK] ON [dbo].[JABTTD]
(
	[KDDOK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_204_FK] ON [dbo].[JTRNLKAS]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_283_FK] ON [dbo].[JURTUP]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_288_FK] ON [dbo].[JURTUP]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_337_FK] ON [dbo].[KASKEG]
(
	[KD_BULAN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_338_FK] ON [dbo].[KASKEG]
(
	[KDTAHAP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_339_FK] ON [dbo].[KASKEG]
(
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_355_FK] ON [dbo].[KASKEG]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_451_FK] ON [dbo].[KINKEG]
(
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_452_FK] ON [dbo].[KINKEG]
(
	[KDTAHAP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_453_FK] ON [dbo].[KINKEG]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_64_FK] ON [dbo].[KINKEG]
(
	[KDJKK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_KONTRAK_KDKEGUNIT] ON [dbo].[KONTRAK]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_KONTRAK_NOKON] ON [dbo].[KONTRAK]
(
	[NOKON] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_KONTRAK_UNITKEY] ON [dbo].[KONTRAK]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_521_FK] ON [dbo].[MATANGB]
(
	[MTGLEVEL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_566_FK] ON [dbo].[MATANGB]
(
	[KDKHUSUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_596_FK] ON [dbo].[MATANGBLRA]
(
	[MTGLEVEL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_597_FK] ON [dbo].[MATANGBLRA]
(
	[KDKHUSUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_516_FK] ON [dbo].[MATANGD]
(
	[MTGLEVEL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_562_FK] ON [dbo].[MATANGD]
(
	[KDKHUSUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_598_FK] ON [dbo].[MATANGDLAK]
(
	[MTGLEVEL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_599_FK] ON [dbo].[MATANGDLAK]
(
	[KDKHUSUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_592_FK] ON [dbo].[MATANGDLRA]
(
	[MTGLEVEL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_593_FK] ON [dbo].[MATANGDLRA]
(
	[KDKHUSUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_518_FK] ON [dbo].[MATANGNRC]
(
	[MTGLEVEL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_565_FK] ON [dbo].[MATANGNRC]
(
	[KDKHUSUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_517_FK] ON [dbo].[MATANGR]
(
	[MTGLEVEL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_564_FK] ON [dbo].[MATANGR]
(
	[KDKHUSUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_600_FK] ON [dbo].[MATANGRLAK]
(
	[MTGLEVEL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_601_FK] ON [dbo].[MATANGRLAK]
(
	[KDKHUSUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_594_FK] ON [dbo].[MATANGRLRA]
(
	[MTGLEVEL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_595_FK] ON [dbo].[MATANGRLRA]
(
	[KDKHUSUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_443_FK] ON [dbo].[MKEGIATAN]
(
	[KDPERSPEKTIF] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_541_FK] ON [dbo].[MKEGIATAN]
(
	[IDPRGRM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_335_FK] ON [dbo].[MPGRM]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_364_FK] ON [dbo].[MTGDUNIT]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_4_FK] ON [dbo].[MTGDUNIT]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_543_FK] ON [dbo].[NRCBEND]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_287_FK] ON [dbo].[NRCELIMINASI]
(
	[NOTUTUP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_289_FK] ON [dbo].[NRCELIMINASI]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_532_FK] ON [dbo].[OTOKOROLARIB]
(
	[MTGKEYNRC] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_533_FK] ON [dbo].[OTOKOROLARIB]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_534_FK] ON [dbo].[OTOKOROLARIB]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_530_FK] ON [dbo].[OTOKOROLARIR]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_531_FK] ON [dbo].[OTOKOROLARIR]
(
	[MTGKEYNRC] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_535_FK] ON [dbo].[OTOKOROLARIR]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_480_FK] ON [dbo].[PANJAR]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_481_FK] ON [dbo].[PANJAR]
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_485_FK] ON [dbo].[PANJAR]
(
	[NIP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_495_FK] ON [dbo].[PANJAR]
(
	[KDSTATUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_496_FK] ON [dbo].[PANJAR]
(
	[IDXKODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_482_FK] ON [dbo].[PANJARDET]
(
	[UNITKEY] ASC,
	[NOPANJAR] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_483_FK] ON [dbo].[PANJARDET]
(
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_497_FK] ON [dbo].[PANJARDET]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_34_FK] ON [dbo].[PEGAWAI]
(
	[KDGOL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_35_FK] ON [dbo].[PEGAWAI]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_19_FK] ON [dbo].[PGRMUNIT]
(
	[KDTAHAP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_20_FK] ON [dbo].[PGRMUNIT]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_360_FK] ON [dbo].[PGRMUNIT]
(
	[IDPRGRM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_462_FK] ON [dbo].[POSNORMAL]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_536_FK] ON [dbo].[PPK]
(
	[NIP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_62_FK] ON [dbo].[PROFILUNIT]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_63_FK] ON [dbo].[PROFILUNIT]
(
	[KDPROFIL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_226_FK] ON [dbo].[PSPJ]
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_227_FK] ON [dbo].[PSPJ]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_404_FK] ON [dbo].[PSPJ]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_487_FK] ON [dbo].[PSPJ]
(
	[IDXKODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_488_FK] ON [dbo].[PSPJ]
(
	[KDSTATUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_355_FK] ON [dbo].[RASKB]
(
	[KDTAHAP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_372_FK] ON [dbo].[RASKB]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_443_FK] ON [dbo].[RASKB]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_363_FK] ON [dbo].[RASKBLNB]
(
	[MTGKEY] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_78_FK] ON [dbo].[RASKBLNB]
(
	[KD_BULAN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_362_FK] ON [dbo].[RASKBLND]
(
	[MTGKEY] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_77_FK] ON [dbo].[RASKBLND]
(
	[KD_BULAN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_368_FK] ON [dbo].[RASKBLNR]
(
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_76_FK] ON [dbo].[RASKBLNR]
(
	[KD_BULAN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_367_FK] ON [dbo].[RASKBLNRTL]
(
	[MTGKEY] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_79_FK] ON [dbo].[RASKBLNRTL]
(
	[KD_BULAN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_329_FK] ON [dbo].[RASKD]
(
	[KDTAHAP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_441_FK] ON [dbo].[RASKD]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_454_FK] ON [dbo].[RASKD]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_568_FK] ON [dbo].[RASKDETB]
(
	[IDSTDHARGA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_87_FK] ON [dbo].[RASKDETB]
(
	[MTGKEY] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_567_FK] ON [dbo].[RASKDETD]
(
	[IDSTDHARGA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_86_FK] ON [dbo].[RASKDETD]
(
	[MTGKEY] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_569_FK] ON [dbo].[RASKDETRTL]
(
	[IDSTDHARGA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_88_FK] ON [dbo].[RASKDETRTL]
(
	[MTGKEY] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_315_FK] ON [dbo].[RASKR]
(
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_316_FK] ON [dbo].[RASKR]
(
	[KDTAHAP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_369_FK] ON [dbo].[RASKR]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_371_FK] ON [dbo].[RASKR]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_330_FK] ON [dbo].[RASKRTL]
(
	[KDTAHAP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_370_FK] ON [dbo].[RASKRTL]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_442_FK] ON [dbo].[RASKRTL]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_269_FK] ON [dbo].[RBMDETB]
(
	[UNITKEY] ASC,
	[NOBM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_270_FK] ON [dbo].[RBMDETB]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_437_FK] ON [dbo].[RBMDETB]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_266_FK] ON [dbo].[RBMDETD]
(
	[UNITKEY] ASC,
	[NOBM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_268_FK] ON [dbo].[RBMDETD]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_436_FK] ON [dbo].[RBMDETD]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_264_FK] ON [dbo].[RBMDETN]
(
	[UNITKEY] ASC,
	[NOBM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_265_FK] ON [dbo].[RBMDETN]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_267_FK] ON [dbo].[RBMDETN]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_274_FK] ON [dbo].[RBMDETR]
(
	[UNITKEY] ASC,
	[NOBM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_275_FK] ON [dbo].[RBMDETR]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_439_FK] ON [dbo].[RBMDETR]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_440_FK] ON [dbo].[RBMDETR]
(
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_271_FK] ON [dbo].[RBMDETRTL]
(
	[UNITKEY] ASC,
	[NOBM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_272_FK] ON [dbo].[RBMDETRTL]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_438_FK] ON [dbo].[RBMDETRTL]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_REFRESHTOKEN_UserId] ON [dbo].[REFRESHTOKEN]
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_292_FK] ON [dbo].[REKAKAS]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_293_FK] ON [dbo].[REKAKAS]
(
	[KDAKAS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_442_FK] ON [dbo].[REKONSET]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_219_FK] ON [dbo].[RKMDETB]
(
	[KDDANA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_416_FK] ON [dbo].[RKMDETB]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_551_FK] ON [dbo].[RKMDETB]
(
	[UNITKEY] ASC,
	[NOSTS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_552_FK] ON [dbo].[RKMDETB]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_417_FK] ON [dbo].[RKMDETD]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_553_FK] ON [dbo].[RKMDETD]
(
	[UNITKEY] ASC,
	[NOSTS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_554_FK] ON [dbo].[RKMDETD]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_221_FK] ON [dbo].[RKMDETR]
(
	[KDDANA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_413_FK] ON [dbo].[RKMDETR]
(
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_415_FK] ON [dbo].[RKMDETR]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_575_FK] ON [dbo].[RKMDETR]
(
	[UNITKEY] ASC,
	[NOSTS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_576_FK] ON [dbo].[RKMDETR]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_220_FK] ON [dbo].[RKMDETRTL]
(
	[KDDANA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_414_FK] ON [dbo].[RKMDETRTL]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_555_FK] ON [dbo].[RKMDETRTL]
(
	[UNITKEY] ASC,
	[NOSTS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_556_FK] ON [dbo].[RKMDETRTL]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_349_FK] ON [dbo].[RKMDETT]
(
	[NOBBANTU] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_473_FK] ON [dbo].[RKMDETT]
(
	[UNITKEY] ASC,
	[NOSTS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_486_FK] ON [dbo].[RKMDETT]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_332_FK] ON [dbo].[SALDODETB]
(
	[MTGKEY] ASC,
	[UNITKEY] ASC,
	[KD_BULAN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_590_FK] ON [dbo].[SALDODETB]
(
	[IDSTDHARGA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_331_FK] ON [dbo].[SALDODETD]
(
	[MTGKEY] ASC,
	[UNITKEY] ASC,
	[KD_BULAN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_589_FK] ON [dbo].[SALDODETD]
(
	[IDSTDHARGA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_348_FK] ON [dbo].[SALDODETR]
(
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[UNITKEY] ASC,
	[KD_BULAN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_563_FK] ON [dbo].[SALDODETR]
(
	[IDSTDHARGA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_347_FK] ON [dbo].[SALDODETRTL]
(
	[MTGKEY] ASC,
	[UNITKEY] ASC,
	[KD_BULAN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_591_FK] ON [dbo].[SALDODETRTL]
(
	[IDSTDHARGA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_91_FK] ON [dbo].[SBDANAB]
(
	[MTGKEY] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_99_FK] ON [dbo].[SBDANAB]
(
	[KDDANA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_340_FK] ON [dbo].[SBDANAKEG]
(
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_341_FK] ON [dbo].[SBDANAKEG]
(
	[KDDANA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_343_FK] ON [dbo].[SBDANAKEG]
(
	[KDTAHAP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_441_FK] ON [dbo].[SBDANAKEG]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_90_FK] ON [dbo].[SBDANAR]
(
	[KDDANA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_93_FK] ON [dbo].[SBDANAR]
(
	[KDKEGUNIT] ASC,
	[MTGKEY] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_101_FK] ON [dbo].[SBDANARTL]
(
	[KDDANA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_92_FK] ON [dbo].[SBDANARTL]
(
	[MTGKEY] ASC,
	[KDTAHAP] ASC,
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_328_FK] ON [dbo].[SETBLAK]
(
	[MTGKEYLAK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_322_FK] ON [dbo].[SETBLRA]
(
	[MTGKEYLRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_326_FK] ON [dbo].[SETDLAK]
(
	[MTGKEYLAK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_317_FK] ON [dbo].[SETDLRA]
(
	[MTGKEYLRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_519_FK] ON [dbo].[SETPFK]
(
	[PJKKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_327_FK] ON [dbo].[SETRLAK]
(
	[MTGKEYLAK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_320_FK] ON [dbo].[SETRLRA]
(
	[MTGKEYLRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_373_FK] ON [dbo].[SKDASK]
(
	[IDXTTD2] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_94_FK] ON [dbo].[SKDASK]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_95_FK] ON [dbo].[SKDASK]
(
	[KDTAHAP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_96_FK] ON [dbo].[SKDASK]
(
	[IDXTTD1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_97_FK] ON [dbo].[SKDASK]
(
	[IDXKODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_132_FK] ON [dbo].[SKO]
(
	[KDDSR] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_134_FK] ON [dbo].[SKO]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_135_FK] ON [dbo].[SKO]
(
	[IDXKODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_136_FK] ON [dbo].[SKO]
(
	[UNITKEY] ASC,
	[IDXDASK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_384_FK] ON [dbo].[SKO]
(
	[KD_BULAN2] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_385_FK] ON [dbo].[SKO]
(
	[KD_BULAN1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_386_FK] ON [dbo].[SKO]
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_139_FK] ON [dbo].[SKOBDET]
(
	[IDXSKO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_390_FK] ON [dbo].[SKOBDET]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_445_FK] ON [dbo].[SKOBDET]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_138_FK] ON [dbo].[SKODDET]
(
	[IDXSKO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_391_FK] ON [dbo].[SKODDET]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_444_FK] ON [dbo].[SKODDET]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_137_FK] ON [dbo].[SKORDET]
(
	[IDXSKO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_314_FK] ON [dbo].[SKORDET]
(
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_387_FK] ON [dbo].[SKORDET]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_389_FK] ON [dbo].[SKORDET]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_140_FK] ON [dbo].[SKORTLDET]
(
	[IDXSKO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_388_FK] ON [dbo].[SKORTLDET]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_448_FK] ON [dbo].[SKORTLDET]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_342_FK] ON [dbo].[SP2D]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_380_FK] ON [dbo].[SP2D]
(
	[IDXSKO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_381_FK] ON [dbo].[SP2D]
(
	[IDXKODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_382_FK] ON [dbo].[SP2D]
(
	[KDSTATUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_383_FK] ON [dbo].[SP2D]
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_403_FK] ON [dbo].[SP2D]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_484_FK] ON [dbo].[SP2D]
(
	[KDP3] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_192_FK] ON [dbo].[SP2DDETB]
(
	[UNITKEY] ASC,
	[NOSP2D] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_193_FK] ON [dbo].[SP2DDETB]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_196_FK] ON [dbo].[SP2DDETB]
(
	[KDDANA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_408_FK] ON [dbo].[SP2DDETB]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_190_FK] ON [dbo].[SP2DDETD]
(
	[UNITKEY] ASC,
	[NOSP2D] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_191_FK] ON [dbo].[SP2DDETD]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_409_FK] ON [dbo].[SP2DDETD]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_188_FK] ON [dbo].[SP2DDETR]
(
	[UNITKEY] ASC,
	[NOSP2D] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_189_FK] ON [dbo].[SP2DDETR]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_198_FK] ON [dbo].[SP2DDETR]
(
	[KDDANA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_405_FK] ON [dbo].[SP2DDETR]
(
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_406_FK] ON [dbo].[SP2DDETR]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_194_FK] ON [dbo].[SP2DDETRTL]
(
	[UNITKEY] ASC,
	[NOSP2D] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_195_FK] ON [dbo].[SP2DDETRTL]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_197_FK] ON [dbo].[SP2DDETRTL]
(
	[KDDANA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_407_FK] ON [dbo].[SP2DDETRTL]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_464_FK] ON [dbo].[SP2DPJK]
(
	[UNITKEY] ASC,
	[NOSP2D] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_614_FK] ON [dbo].[SP2DPJK]
(
	[PJKKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_235_FK] ON [dbo].[SPJDETB]
(
	[UNITKEY] ASC,
	[NOSPJ] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_236_FK] ON [dbo].[SPJDETB]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_237_FK] ON [dbo].[SPJDETB]
(
	[KDDANA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_422_FK] ON [dbo].[SPJDETB]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_233_FK] ON [dbo].[SPJDETD]
(
	[UNITKEY] ASC,
	[NOSPJ] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_234_FK] ON [dbo].[SPJDETD]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_423_FK] ON [dbo].[SPJDETD]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_410_FK] ON [dbo].[SPJDETP]
(
	[PJKKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_489_FK] ON [dbo].[SPJDETP]
(
	[UNITKEY] ASC,
	[NOSPJ] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_231_FK] ON [dbo].[SPJDETR]
(
	[UNITKEY] ASC,
	[NOSPJ] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_232_FK] ON [dbo].[SPJDETR]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_239_FK] ON [dbo].[SPJDETR]
(
	[KDDANA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_419_FK] ON [dbo].[SPJDETR]
(
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_421_FK] ON [dbo].[SPJDETR]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_238_FK] ON [dbo].[SPJDETRTL]
(
	[KDDANA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_240_FK] ON [dbo].[SPJDETRTL]
(
	[UNITKEY] ASC,
	[NOSPJ] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_241_FK] ON [dbo].[SPJDETRTL]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_420_FK] ON [dbo].[SPJDETRTL]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_546_FK] ON [dbo].[SPJSPP]
(
	[UNITKEY] ASC,
	[NOSPP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_168_FK] ON [dbo].[SPMDETB]
(
	[UNITKEY] ASC,
	[NOSPM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_169_FK] ON [dbo].[SPMDETB]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_398_FK] ON [dbo].[SPMDETB]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_165_FK] ON [dbo].[SPMDETD]
(
	[UNITKEY] ASC,
	[NOSPM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_167_FK] ON [dbo].[SPMDETD]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_401_FK] ON [dbo].[SPMDETD]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_164_FK] ON [dbo].[SPMDETR]
(
	[UNITKEY] ASC,
	[NOSPM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_166_FK] ON [dbo].[SPMDETR]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_400_FK] ON [dbo].[SPMDETR]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_402_FK] ON [dbo].[SPMDETR]
(
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_170_FK] ON [dbo].[SPMDETRTL]
(
	[UNITKEY] ASC,
	[NOSPM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_171_FK] ON [dbo].[SPMDETRTL]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_399_FK] ON [dbo].[SPMDETRTL]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_465_FK] ON [dbo].[SPMPJK]
(
	[UNITKEY] ASC,
	[NOSPM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_615_FK] ON [dbo].[SPMPJK]
(
	[PJKKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_463_FK] ON [dbo].[SPP]
(
	[KD_BULAN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_476_FK] ON [dbo].[SPP]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_602_FK] ON [dbo].[SPP]
(
	[IDXSKO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_603_FK] ON [dbo].[SPP]
(
	[IDXKODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_604_FK] ON [dbo].[SPP]
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_605_FK] ON [dbo].[SPP]
(
	[KDP3] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_606_FK] ON [dbo].[SPP]
(
	[KDSTATUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_607_FK] ON [dbo].[SPP]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_157_FK] ON [dbo].[SPPDETB]
(
	[UNITKEY] ASC,
	[NOSPP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_394_FK] ON [dbo].[SPPDETB]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_523_FK] ON [dbo].[SPPDETB]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_156_FK] ON [dbo].[SPPDETD]
(
	[UNITKEY] ASC,
	[NOSPP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_395_FK] ON [dbo].[SPPDETD]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_522_FK] ON [dbo].[SPPDETD]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_155_FK] ON [dbo].[SPPDETR]
(
	[UNITKEY] ASC,
	[NOSPP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_393_FK] ON [dbo].[SPPDETR]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_397_FK] ON [dbo].[SPPDETR]
(
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_459_FK] ON [dbo].[SPPDETR]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_159_FK] ON [dbo].[SPPDETRTL]
(
	[UNITKEY] ASC,
	[NOSPP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_392_FK] ON [dbo].[SPPDETRTL]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_542_FK] ON [dbo].[SPPDETRTL]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_561_FK] ON [dbo].[STDHARGA]
(
	[KDJNSSTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [STDHARGAD_FK] ON [dbo].[STDHARGAD]
(
	[IDSTDHARGA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [STDHARGAD2_FK] ON [dbo].[STDHARGAD]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [STDHARGAR_FK] ON [dbo].[STDHARGAR]
(
	[IDSTDHARGA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [STDHARGAR2_FK] ON [dbo].[STDHARGAR]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_466_FK] ON [dbo].[STS]
(
	[IDXKODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_467_FK] ON [dbo].[STS]
(
	[KEYBEND1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_468_FK] ON [dbo].[STS]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_469_FK] ON [dbo].[STS]
(
	[NOBBANTU] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_470_FK] ON [dbo].[STS]
(
	[IDXTTD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_471_FK] ON [dbo].[STS]
(
	[KEYBEND2] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_472_FK] ON [dbo].[STS]
(
	[KDSTATUS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_558_FK] ON [dbo].[TAHAPSAH]
(
	[KDTAHAP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_559_FK] ON [dbo].[TAHAPSAH]
(
	[KDDOKSAH] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_248_FK] ON [dbo].[TBPDETB]
(
	[UNITKEY] ASC,
	[NOTBP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_433_FK] ON [dbo].[TBPDETB]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_578_FK] ON [dbo].[TBPDETB]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_247_FK] ON [dbo].[TBPDETD]
(
	[UNITKEY] ASC,
	[NOTBP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_434_FK] ON [dbo].[TBPDETD]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_577_FK] ON [dbo].[TBPDETD]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_246_FK] ON [dbo].[TBPDETR]
(
	[UNITKEY] ASC,
	[NOTBP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_431_FK] ON [dbo].[TBPDETR]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_435_FK] ON [dbo].[TBPDETR]
(
	[KDKEGUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_493_FK] ON [dbo].[TBPDETR]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_249_FK] ON [dbo].[TBPDETRTL]
(
	[UNITKEY] ASC,
	[NOTBP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_432_FK] ON [dbo].[TBPDETRTL]
(
	[MTGKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_579_FK] ON [dbo].[TBPDETRTL]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_246_FK] ON [dbo].[TBPDETT]
(
	[UNITKEY] ASC,
	[NOTBP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_493_FK] ON [dbo].[TBPDETT]
(
	[NOJETRA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_517_FK] ON [dbo].[TBPDETT]
(
	[KEYBEND] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_548_FK] ON [dbo].[TBPSTS]
(
	[UNITKEY] ASC,
	[NOSTS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_650_FK] ON [dbo].[TRSKLP]
(
	[NODOKLKP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_651_FK] ON [dbo].[TRSKLP]
(
	[KDLIST] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_334_FK] ON [dbo].[TTAPD]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_458_FK] ON [dbo].[TTAPD]
(
	[NIP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_460_FK] ON [dbo].[TTAPD]
(
	[KDTAHAP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_305_FK] ON [dbo].[TUPB]
(
	[NOTUTUP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_306_FK] ON [dbo].[TUPB]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_301_FK] ON [dbo].[TUPD]
(
	[NOTUTUP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_302_FK] ON [dbo].[TUPD]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_303_FK] ON [dbo].[TUPR]
(
	[NOTUTUP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_304_FK] ON [dbo].[TUPR]
(
	[KDPERS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_652_FK] ON [dbo].[UJILKP]
(
	[NODOKLKP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_653_FK] ON [dbo].[UJILKP]
(
	[NIP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_49_FK] ON [dbo].[URUSANUNIT]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_50_FK] ON [dbo].[URUSANUNIT]
(
	[URUSKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_518_FK] ON [dbo].[WEBERROR]
(
	[ROLEID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_524_FK] ON [dbo].[WEBOTOR]
(
	[GROUPID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_525_FK] ON [dbo].[WEBOTOR]
(
	[ROLEID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_526_FK] ON [dbo].[WEBUSER]
(
	[GROUPID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_527_FK] ON [dbo].[WEBUSER]
(
	[NIP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_528_FK] ON [dbo].[WEBUSER]
(
	[KDTAHAP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [RELATIONSHIP_557_FK] ON [dbo].[WEBUSER]
(
	[UNITKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[ANTARBYR] ADD  CONSTRAINT [DF__ANTARBYR__PENOLA__1AA08A28]  DEFAULT ('0') FOR [PENOLAKAN]
GO
ALTER TABLE [dbo].[APPLOG] ADD  CONSTRAINT [DF_APPLOG_LOGDET]  DEFAULT ('') FOR [LOGDET]
GO
ALTER TABLE [dbo].[BEND] ADD  CONSTRAINT [DF__BEND__STAKTIF__7101B81C]  DEFAULT ((0)) FOR [STAKTIF]
GO
ALTER TABLE [dbo].[BERITAINV] ADD  DEFAULT ((0)) FOR [INTEGST]
GO
ALTER TABLE [dbo].[BERITAINVDETBRG] ADD  DEFAULT ((0)) FOR [INTEGST]
GO
ALTER TABLE [dbo].[BKPAJAK] ADD  DEFAULT ((0)) FOR [STKIRIM]
GO
ALTER TABLE [dbo].[BKPAJAK] ADD  DEFAULT ((0)) FOR [STCAIR]
GO
ALTER TABLE [dbo].[BKPAJAK] ADD  DEFAULT ((3)) FOR [KDTRANSFER]
GO
ALTER TABLE [dbo].[BKPAJAKDET] ADD  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[BKPAJAKDET] ADD  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[BKPAJAKS] ADD  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[BKPAJAKS] ADD  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[BPK] ADD  CONSTRAINT [DF__BPK__KDTRANSFER__77AEB5AB]  DEFAULT ((1)) FOR [KDTRANSFER]
GO
ALTER TABLE [dbo].[BPK] ADD  CONSTRAINT [DF__BPK__KDBAYAR__0508B0C9]  DEFAULT ((0)) FOR [KDBAYAR]
GO
ALTER TABLE [dbo].[BPK] ADD  CONSTRAINT [DF__BPK__STKIRIM__07E51D74]  DEFAULT ((0)) FOR [STKIRIM]
GO
ALTER TABLE [dbo].[BPK] ADD  CONSTRAINT [DF__BPK__STCAIR__08D941AD]  DEFAULT ((0)) FOR [STCAIR]
GO
ALTER TABLE [dbo].[BPK] ADD  CONSTRAINT [DF__BPK__DATECREATE__0BB5AE58]  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[BPK] ADD  CONSTRAINT [DF__BPK__DATEUPDATE__0CA9D291]  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[BPKDETRDANA] ADD  CONSTRAINT [DF__BPKDETRDA__NOJET__03206857]  DEFAULT ('21') FOR [NOJETRA]
GO
ALTER TABLE [dbo].[BPKDETRP] ADD  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[BPKDETRP] ADD  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[BPKDETRTLP] ADD  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[BPKDETRTLP] ADD  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[DAFTPHK3] ADD  CONSTRAINT [DF__DAFTPHK3__WARGAN__71F5DC55]  DEFAULT ('WNI') FOR [WARGANEGARA]
GO
ALTER TABLE [dbo].[DAFTPHK3] ADD  CONSTRAINT [DF__DAFTPHK3__KDJENI__72EA008E]  DEFAULT ((0)) FOR [KDJENIS]
GO
ALTER TABLE [dbo].[DAFTPHK3] ADD  CONSTRAINT [DF__DAFTPHK3__STVALI__73DE24C7]  DEFAULT ((0)) FOR [STVALID]
GO
ALTER TABLE [dbo].[DAFTPHK3] ADD  CONSTRAINT [DF__DAFTPHK3__ISLOCK__74D24900]  DEFAULT ((0)) FOR [ISLOCK]
GO
ALTER TABLE [dbo].[JBANK] ADD  CONSTRAINT [DF__JBANK__DATECREAT__60A75C0F]  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[JBAYAR] ADD  CONSTRAINT [DF__JBAYAR__DATECREA__27658869]  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[JBAYAR] ADD  CONSTRAINT [DF__JBAYAR__DATEUPDA__2859ACA2]  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[JDANA] ADD  CONSTRAINT [DF__JDANA__TYPE__022C441E]  DEFAULT ('D') FOR [TYPE]
GO
ALTER TABLE [dbo].[JKIRIM] ADD  CONSTRAINT [DF__JKIRIM__DATECREA__6B48DEC6]  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[JKIRIM] ADD  CONSTRAINT [DF__JKIRIM__DATEUPDA__6C3D02FF]  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[JPAJAK] ADD  CONSTRAINT [DF_JPAJAK_KDPER]  DEFAULT ((0)) FOR [KDPER]
GO
ALTER TABLE [dbo].[JTRANSAKSI] ADD  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[JTRANSAKSI] ADD  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[JTRANSFER] ADD  CONSTRAINT [DF__JTRANSFER__MINNO__3C8DEFDD]  DEFAULT ((0)) FOR [MINNOMINAL]
GO
ALTER TABLE [dbo].[jurnal] ADD  CONSTRAINT [DF_jurnal_nilaik]  DEFAULT ((1)) FOR [nilaik]
GO
ALTER TABLE [dbo].[jurnal] ADD  CONSTRAINT [DF_jurnal_jurnal]  DEFAULT ((1)) FOR [jurnal]
GO
ALTER TABLE [dbo].[JURNAL_ROLE] ADD  CONSTRAINT [DF_JURNAL_ROLE_SKPD]  DEFAULT ((1)) FOR [SKPD]
GO
ALTER TABLE [dbo].[MATANGB] ADD  CONSTRAINT [DF__MATANGB__KDKHUSU__342B5201]  DEFAULT ('1') FOR [KDKHUSUS]
GO
ALTER TABLE [dbo].[MATANGB] ADD  DEFAULT ((1)) FOR [JNSREK]
GO
ALTER TABLE [dbo].[MATANGB] ADD  DEFAULT ((1)) FOR [STAKTIF]
GO
ALTER TABLE [dbo].[MATANGD] ADD  CONSTRAINT [DF__MATANGD__KDKHUSU__3AD84F90]  DEFAULT ('1') FOR [KDKHUSUS]
GO
ALTER TABLE [dbo].[MATANGNRC] ADD  CONSTRAINT [DF__MATANGNRC__KDKHU__41854D1F]  DEFAULT ('1') FOR [KDKHUSUS]
GO
ALTER TABLE [dbo].[MATANGR] ADD  CONSTRAINT [DF__MATANGR__KDKHUSU__4461B9CA]  DEFAULT ('1') FOR [KDKHUSUS]
GO
ALTER TABLE [dbo].[MATANGR] ADD  CONSTRAINT [DF__MATANGR__JNSREK__7E5BB33A]  DEFAULT ((1)) FOR [JNSREK]
GO
ALTER TABLE [dbo].[MATANGR] ADD  CONSTRAINT [DF__MATANGR__STAKTIF__7F4FD773]  DEFAULT ((1)) FOR [STAKTIF]
GO
ALTER TABLE [dbo].[MKEGIATAN] ADD  CONSTRAINT [DF_MKEGIATAN_LEVELKEG]  DEFAULT ((1)) FOR [LEVELKEG]
GO
ALTER TABLE [dbo].[MKEGIATAN] ADD  CONSTRAINT [DF_MKEGIATAN_TYPE]  DEFAULT ('D') FOR [TYPE]
GO
ALTER TABLE [dbo].[MPARKEG] ADD  CONSTRAINT [DF_MPARKEG_LEVELKEG]  DEFAULT ((1)) FOR [LEVELKEG]
GO
ALTER TABLE [dbo].[MPARKEG] ADD  CONSTRAINT [DF_MPARKEG_TYPE]  DEFAULT ('D') FOR [TYPE]
GO
ALTER TABLE [dbo].[NPD] ADD  DEFAULT ((0)) FOR [IDTRANS]
GO
ALTER TABLE [dbo].[NPD] ADD  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[NPD] ADD  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[NPDBPK] ADD  DEFAULT ((1)) FOR [IDTRANS]
GO
ALTER TABLE [dbo].[NPDBPK] ADD  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[NPDBPK] ADD  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[NPDSTS] ADD  DEFAULT ((1)) FOR [IDTRANS]
GO
ALTER TABLE [dbo].[NPDSTS] ADD  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[NPDSTS] ADD  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[NPDTBPL] ADD  DEFAULT ((2)) FOR [IDTRANS]
GO
ALTER TABLE [dbo].[NPDTBPL] ADD  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[NPDTBPL] ADD  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[PAGUSKPD] ADD  CONSTRAINT [DF__PAGUSKPD__DATECR__5CC1BC92]  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[PAGUSKPD] ADD  CONSTRAINT [DF__PAGUSKPD__DATEUP__5DB5E0CB]  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[REALISASI_INV] ADD  DEFAULT ((0)) FOR [INTEGST]
GO
ALTER TABLE [dbo].[SETKEG_ENTRY] ADD  CONSTRAINT [DF_SETKEG_ENTRY_SET_REK]  DEFAULT ((1)) FOR [SET_REK]
GO
ALTER TABLE [dbo].[SETKEG_ENTRY] ADD  CONSTRAINT [DF_SETKEG_ENTRY_SET_JBR]  DEFAULT ((1)) FOR [SET_JBR]
GO
ALTER TABLE [dbo].[SETKEG_ENTRY] ADD  CONSTRAINT [DF_SETKEG_ENTRY_SET_BLN]  DEFAULT ((1)) FOR [SET_BLN]
GO
ALTER TABLE [dbo].[SETUNIT_ENTRY] ADD  CONSTRAINT [DF_SETUNIT_ENTRY_SETALL_KEG]  DEFAULT ((1)) FOR [SETALL_KEG]
GO
ALTER TABLE [dbo].[SETUNIT_ENTRY] ADD  CONSTRAINT [DF_SETUNIT_ENTRY_SETALL_REK]  DEFAULT ((1)) FOR [SETALL_REK]
GO
ALTER TABLE [dbo].[SETUNIT_ENTRY] ADD  CONSTRAINT [DF_SETUNIT_ENTRY_SETALL_JBR]  DEFAULT ((1)) FOR [SETALL_JBR]
GO
ALTER TABLE [dbo].[SETUNIT_ENTRY] ADD  CONSTRAINT [DF_SETUNIT_ENTRY_SETALL_BLN]  DEFAULT ((1)) FOR [SETALL_BLN]
GO
ALTER TABLE [dbo].[SP2D] ADD  CONSTRAINT [DF__SP2D__PENOLAKAN__5C043931]  DEFAULT ('0') FOR [PENOLAKAN]
GO
ALTER TABLE [dbo].[SPMPJK] ADD  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[SPMPJK] ADD  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[SPP] ADD  CONSTRAINT [DF__SPP__PENOLAKAN__7D652CFC]  DEFAULT ('0') FOR [PENOLAKAN]
GO
ALTER TABLE [dbo].[SPPBA] ADD  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[SPPBA] ADD  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[SPPBPK] ADD  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[SPPBPK] ADD  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[SPPDETRP] ADD  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[SPPDETRP] ADD  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[SPPDETRTLP] ADD  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[SPPDETRTLP] ADD  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[STS] ADD  CONSTRAINT [DF__STS__STKIRIM__75C66D39]  DEFAULT ((0)) FOR [STKIRIM]
GO
ALTER TABLE [dbo].[STS] ADD  CONSTRAINT [DF__STS__STCAIR__76BA9172]  DEFAULT ((0)) FOR [STCAIR]
GO
ALTER TABLE [dbo].[STS] ADD  CONSTRAINT [DF__STS__KDTRANSFER__78A2D9E4]  DEFAULT ((1)) FOR [KDTRANSFER]
GO
ALTER TABLE [dbo].[TBPL] ADD  CONSTRAINT [DF__TBPL__STKIRIM__13B39577]  DEFAULT ((0)) FOR [STKIRIM]
GO
ALTER TABLE [dbo].[TBPL] ADD  CONSTRAINT [DF__TBPL__STCAIR__14A7B9B0]  DEFAULT ((0)) FOR [STCAIR]
GO
ALTER TABLE [dbo].[TBPL] ADD  CONSTRAINT [DF__TBPL__DATECREATE__159BDDE9]  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[TBPL] ADD  CONSTRAINT [DF__TBPL__DATEUPDATE__16900222]  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[TBPL] ADD  DEFAULT ((1)) FOR [KDTRANSFER]
GO
ALTER TABLE [dbo].[TBPLDET] ADD  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[TBPLDET] ADD  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[TBPLDETKEG] ADD  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[TBPLDETKEG] ADD  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[TTAPDR] ADD  CONSTRAINT [DF_TTAPDR_IDXKODE]  DEFAULT ((0)) FOR [IDXKODE]
GO
ALTER TABLE [dbo].[TTAPDR] ADD  CONSTRAINT [DF_TTAPDR_NO]  DEFAULT ((0)) FOR [NO]
GO
ALTER TABLE [dbo].[USERDESK] ADD  CONSTRAINT [DF_USERDESK_ACTIVE]  DEFAULT ((0)) FOR [ACTIVE]
GO
ALTER TABLE [dbo].[USERDESK] ADD  CONSTRAINT [DF_USERDESK_BTL]  DEFAULT ((0)) FOR [BTL]
GO
ALTER TABLE [dbo].[USERDESK] ADD  CONSTRAINT [DF_USERDESK_PDP]  DEFAULT ((0)) FOR [PDP]
GO
ALTER TABLE [dbo].[USERDESK] ADD  CONSTRAINT [DF_USERDESK_PBY]  DEFAULT ((0)) FOR [PBY]
GO
ALTER TABLE [dbo].[WEBUSER] ADD  DEFAULT (getdate()) FOR [DATECREATE]
GO
ALTER TABLE [dbo].[WEBUSER] ADD  DEFAULT (getdate()) FOR [DATEUPDATE]
GO
ALTER TABLE [dbo].[ADENDUM]  WITH CHECK ADD  CONSTRAINT [FK_ADENDUM_KONTRAK] FOREIGN KEY([UNITKEY], [NOKON], [KDKEGUNIT])
REFERENCES [dbo].[KONTRAK] ([UNITKEY], [NOKON], [KDKEGUNIT])
GO
ALTER TABLE [dbo].[ADENDUM] CHECK CONSTRAINT [FK_ADENDUM_KONTRAK]
GO
ALTER TABLE [dbo].[BPK]  WITH CHECK ADD  CONSTRAINT [FK_BPK_DAFTPHK3] FOREIGN KEY([KDP3])
REFERENCES [dbo].[DAFTPHK3] ([KDP3])
GO
ALTER TABLE [dbo].[BPK] CHECK CONSTRAINT [FK_BPK_DAFTPHK3]
GO
ALTER TABLE [dbo].[BPK]  WITH CHECK ADD  CONSTRAINT [FK_BPK_DAFTUNIT] FOREIGN KEY([UNITKEY])
REFERENCES [dbo].[DAFTUNIT] ([UNITKEY])
GO
ALTER TABLE [dbo].[BPK] CHECK CONSTRAINT [FK_BPK_DAFTUNIT]
GO
ALTER TABLE [dbo].[BPK]  WITH CHECK ADD  CONSTRAINT [FK_BPK_JCAIR] FOREIGN KEY([STCAIR])
REFERENCES [dbo].[JCAIR] ([STCAIR])
GO
ALTER TABLE [dbo].[BPK] CHECK CONSTRAINT [FK_BPK_JCAIR]
GO
ALTER TABLE [dbo].[BPK]  WITH CHECK ADD  CONSTRAINT [FK_BPK_JKIRIM] FOREIGN KEY([STKIRIM])
REFERENCES [dbo].[JKIRIM] ([STKIRIM])
GO
ALTER TABLE [dbo].[BPK] CHECK CONSTRAINT [FK_BPK_JKIRIM]
GO
ALTER TABLE [dbo].[BPK]  WITH CHECK ADD  CONSTRAINT [FK_BPK_KDBAYAR_JBAYAR] FOREIGN KEY([KDBAYAR])
REFERENCES [dbo].[JBAYAR] ([KDBAYAR])
GO
ALTER TABLE [dbo].[BPK] CHECK CONSTRAINT [FK_BPK_KDBAYAR_JBAYAR]
GO
ALTER TABLE [dbo].[MONEVWEBOTOR]  WITH CHECK ADD  CONSTRAINT [FK_MONEVWEBOTOR_MONEVWEBROLE] FOREIGN KEY([ROLEID])
REFERENCES [dbo].[MONEVWEBROLE] ([ROLEID])
GO
ALTER TABLE [dbo].[MONEVWEBOTOR] CHECK CONSTRAINT [FK_MONEVWEBOTOR_MONEVWEBROLE]
GO
ALTER TABLE [dbo].[MONEVWEBROLE]  WITH CHECK ADD  CONSTRAINT [FK_MONEVWEBROLE_MONEVWEBROLE] FOREIGN KEY([ROLEID])
REFERENCES [dbo].[MONEVWEBROLE] ([ROLEID])
GO
ALTER TABLE [dbo].[MONEVWEBROLE] CHECK CONSTRAINT [FK_MONEVWEBROLE_MONEVWEBROLE]
GO
ALTER TABLE [dbo].[PAGUSKPD]  WITH CHECK ADD  CONSTRAINT [FK_PAGUSKPD_DAFTUNIT] FOREIGN KEY([UNITKEY])
REFERENCES [dbo].[DAFTUNIT] ([UNITKEY])
GO
ALTER TABLE [dbo].[PAGUSKPD] CHECK CONSTRAINT [FK_PAGUSKPD_DAFTUNIT]
GO
ALTER TABLE [dbo].[PAJAK]  WITH CHECK ADD  CONSTRAINT [FK_PAJAK_JPAJAK] FOREIGN KEY([PJKKEY])
REFERENCES [dbo].[JPAJAK] ([PJKKEY])
GO
ALTER TABLE [dbo].[PAJAK] CHECK CONSTRAINT [FK_PAJAK_JPAJAK]
GO
ALTER TABLE [dbo].[TBPLDETKEG]  WITH CHECK ADD  CONSTRAINT [FK_TBPLDETKEG_TBPLDET] FOREIGN KEY([UNITKEY], [NOTBPL], [KEYBEND])
REFERENCES [dbo].[TBPLDET] ([UNITKEY], [NOTBPL], [KEYBEND])
GO
ALTER TABLE [dbo].[TBPLDETKEG] CHECK CONSTRAINT [FK_TBPLDETKEG_TBPLDET]
GO
ALTER TABLE [dbo].[TRSKLP]  WITH CHECK ADD  CONSTRAINT [FK_TRSKLP_RELATIONS_DOKLKP] FOREIGN KEY([NODOKLKP])
REFERENCES [dbo].[DOKLKP] ([NODOKLKP])
GO
ALTER TABLE [dbo].[TRSKLP] CHECK CONSTRAINT [FK_TRSKLP_RELATIONS_DOKLKP]
GO
ALTER TABLE [dbo].[TRSKLP]  WITH CHECK ADD  CONSTRAINT [FK_TRSKLP_RELATIONS_MLKPSP2D] FOREIGN KEY([KDLIST])
REFERENCES [dbo].[MLKPSP2D] ([KDLIST])
GO
ALTER TABLE [dbo].[TRSKLP] CHECK CONSTRAINT [FK_TRSKLP_RELATIONS_MLKPSP2D]
GO
ALTER TABLE [dbo].[UJILKP]  WITH CHECK ADD  CONSTRAINT [FK_UJILKP_RELATIONS_DOKLKP] FOREIGN KEY([NODOKLKP])
REFERENCES [dbo].[DOKLKP] ([NODOKLKP])
GO
ALTER TABLE [dbo].[UJILKP] CHECK CONSTRAINT [FK_UJILKP_RELATIONS_DOKLKP]
GO
ALTER TABLE [dbo].[UJILKP]  WITH CHECK ADD  CONSTRAINT [FK_UJILKP_RELATIONS_PEGAWAI] FOREIGN KEY([NIP])
REFERENCES [dbo].[PEGAWAI] ([NIP])
GO
ALTER TABLE [dbo].[UJILKP] CHECK CONSTRAINT [FK_UJILKP_RELATIONS_PEGAWAI]
GO
ALTER TABLE [dbo].[USER]  WITH CHECK ADD  CONSTRAINT [FK_USER_USER] FOREIGN KEY([Id])
REFERENCES [dbo].[USER] ([Id])
GO
ALTER TABLE [dbo].[USER] CHECK CONSTRAINT [FK_USER_USER]
GO
ALTER TABLE [dbo].[WEBOTOR]  WITH CHECK ADD  CONSTRAINT [FK_WEBOTOR_WEBROLE] FOREIGN KEY([ROLEID])
REFERENCES [dbo].[WEBROLE] ([ROLEID])
GO
ALTER TABLE [dbo].[WEBOTOR] CHECK CONSTRAINT [FK_WEBOTOR_WEBROLE]
GO
ALTER TABLE [dbo].[WEBROLE]  WITH CHECK ADD  CONSTRAINT [FK_WEBROLE_WEBROLE] FOREIGN KEY([ROLEID])
REFERENCES [dbo].[WEBROLE] ([ROLEID])
GO
ALTER TABLE [dbo].[WEBROLE] CHECK CONSTRAINT [FK_WEBROLE_WEBROLE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-------------------- TRIGGERS ---------------

CREATE trigger [dbo].[TD_ANTARBYR] on [dbo].[ANTARBYR] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "ANTARBYR" if children still exist in "SPMDETB"  */
    if exists (select 1
               from   SPMDETB t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPM = t1.NOSPM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPMDETB". Cannot delete parent "ANTARBYR".'
          goto error
       end

    /*  Cannot delete parent "ANTARBYR" if children still exist in "SPMDETRTL"  */
    if exists (select 1
               from   SPMDETRTL t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPM = t1.NOSPM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPMDETRTL". Cannot delete parent "ANTARBYR".'
          goto error
       end

    /*  Cannot delete parent "ANTARBYR" if children still exist in "SPMDETR"  */
    if exists (select 1
               from   SPMDETR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPM = t1.NOSPM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPMDETR". Cannot delete parent "ANTARBYR".'
          goto error
       end

    /*  Cannot delete parent "ANTARBYR" if children still exist in "SPMDETD"  */
    if exists (select 1
               from   SPMDETD t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPM = t1.NOSPM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPMDETD". Cannot delete parent "ANTARBYR".'
          goto error
       end

    /*  Cannot delete parent "ANTARBYR" if children still exist in "SP2D"  */
    if exists (select 1
               from   SP2D t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPM = t1.NOSPM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2D". Cannot delete parent "ANTARBYR".'
          goto error
       end

    /*  Cannot delete parent "ANTARBYR" if children still exist in "SPMPJK"  */
    if exists (select 1
               from   SPMPJK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPM = t1.NOSPM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPMPJK". Cannot delete parent "ANTARBYR".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[ANTARBYR] ENABLE TRIGGER [TD_ANTARBYR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_ANTARBYR] on [dbo].[ANTARBYR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "ANTARBYR"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "ANTARBYR".'
             goto error
          end
    end
    /*  Parent "SKO" must exist when inserting a child in "ANTARBYR" di Matikan karena sudah tidah ada lookup SPD */
--    if update(IDXSKO)
--    begin
--       if (select count(*)
--           from   SKO t1, inserted t2
--           where  t1.IDXSKO = t2.IDXSKO) != @numrows
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "SKO". Cannot create child in "ANTARBYR".'
--             goto error
--          end
--    end
    /*  Parent "ZKODE" must exist when inserting a child in "ANTARBYR"  */
    if update(IDXKODE)
    begin
       if (select count(*)
           from   ZKODE t1, inserted t2
           where  t1.IDXKODE = t2.IDXKODE) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "ZKODE". Cannot create child in "ANTARBYR".'
             goto error
          end
    end
    /*  Parent "STATTRS" must exist when inserting a child in "ANTARBYR"  */
    if update(KDSTATUS)
    begin
       if (select count(*)
           from   STATTRS t1, inserted t2
           where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STATTRS". Cannot create child in "ANTARBYR".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "ANTARBYR"  */
    if update(KEYBEND)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "ANTARBYR".'
             goto error
          end
    end
    /*  Parent "DAFTPHK3" must exist when inserting a child in "ANTARBYR"  */
    if update(KDP3)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KDP3 is null)
       if @numnull != @numrows
          if (select count(*)
              from   DAFTPHK3 t1, inserted t2
              where  t1.KDP3 = t2.KDP3) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTPHK3". Cannot create child in "ANTARBYR".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "ANTARBYR"  */
--    if update(IDXTTD)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "ANTARBYR".'
--             goto error
--          end
--    end
    /*  Parent "SPP" must exist when inserting a child in "ANTARBYR"  */
--    if update(UNITKEY) or
--       update(NOSPP)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  UNITKEY is null
--                           and   NOSPP is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   SPP t1, inserted t2
--              where  t1.UNITKEY = t2.UNITKEY
--               and   t1.NOSPP = t2.NOSPP) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "SPP". Cannot create child in "ANTARBYR".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[ANTARBYR] ENABLE TRIGGER [TI_ANTARBYR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_ANTARBYR] on [dbo].[ANTARBYR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "ANTARBYR"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "ANTARBYR".'
               goto error
            end
      end
      /*  Parent "SKO" must exist when updating a child in "ANTARBYR"  di Matikan karena sudah tidah ada lookup SPD*/ 
--      if update(IDXSKO) 
--      begin
--         if (select count(*)
--             from   SKO t1, inserted t2
--             where  t1.IDXSKO = t2.IDXSKO) != @numrows
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'SKO" does not exist. Cannot modify child in "ANTARBYR".'
--               goto error
--            end
--      end
      /*  Parent "ZKODE" must exist when updating a child in "ANTARBYR"  */
      if update(IDXKODE)
      begin
         if (select count(*)
             from   ZKODE t1, inserted t2
             where  t1.IDXKODE = t2.IDXKODE) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ZKODE" does not exist. Cannot modify child in "ANTARBYR".'
               goto error
            end
      end
      /*  Parent "STATTRS" must exist when updating a child in "ANTARBYR"  */
      if update(KDSTATUS)
      begin
         if (select count(*)
             from   STATTRS t1, inserted t2
             where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STATTRS" does not exist. Cannot modify child in "ANTARBYR".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "ANTARBYR"  */
      if update(KEYBEND)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "ANTARBYR".'
               goto error
            end
      end
      /*  Parent "DAFTPHK3" must exist when updating a child in "ANTARBYR"  */
      if update(KDP3)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KDP3 is null)
         if @numnull != @numrows
            if (select count(*)
                from   DAFTPHK3 t1, inserted t2
                where  t1.KDP3 = t2.KDP3) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTPHK3" does not exist. Cannot modify child in "ANTARBYR".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "ANTARBYR"  */
--      if update(IDXTTD)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDXTTD is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   JABTTD t1, inserted t2
--                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--   @errmsg = 'JABTTD" does not exist. Cannot modify child in "ANTARBYR".'
--               goto error
--            end
--      end
--      /*  Parent "SPP" must exist when updating a child in "ANTARBYR"  */
--      if update(UNITKEY) or
--         update(NOSPP)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  UNITKEY is null
--                             and   NOSPP is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   SPP t1, inserted t2
--                where  t1.UNITKEY = t2.UNITKEY
--                 and   t1.NOSPP = t2.NOSPP) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'SPP" does not exist. Cannot modify child in "ANTARBYR".'
--               goto error
--            end
--      end
      /*  Cannot modify parent code in "ANTARBYR" if children still exist in "SPMDETB"  */
      if update(UNITKEY) or
         update(NOSPM)
      begin
         if exists (select 1
                    from   SPMDETB t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPM = d1.NOSPM
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPM != d1.NOSPM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPMDETB". Cannot modify parent code in "ANTARBYR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "ANTARBYR" if children still exist in "SPMDETRTL"  */
      if update(UNITKEY) or
         update(NOSPM)
      begin
         if exists (select 1
                    from   SPMDETRTL t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPM = d1.NOSPM
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPM != d1.NOSPM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPMDETRTL". Cannot modify parent code in "ANTARBYR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "ANTARBYR" if children still exist in "SPMDETR"  */
      if update(UNITKEY) or
         update(NOSPM)
      begin
         if exists (select 1
                    from   SPMDETR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPM = d1.NOSPM
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPM != d1.NOSPM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPMDETR". Cannot modify parent code in "ANTARBYR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "ANTARBYR" if children still exist in "SPMDETD"  */
      if update(UNITKEY) or
         update(NOSPM)
      begin
         if exists (select 1
                    from   SPMDETD t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPM = d1.NOSPM
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPM != d1.NOSPM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPMDETD". Cannot modify parent code in "ANTARBYR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "ANTARBYR" if children still exist in "SP2D"  */
      if update(UNITKEY) or
         update(NOSPM)
      begin
         if exists (select 1
                    from   SP2D t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPM = d1.NOSPM
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPM != d1.NOSPM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2D". Cannot modify parent code in "ANTARBYR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "ANTARBYR" if children still exist in "SPMPJK"  */
      if update(UNITKEY) or
         update(NOSPM)
      begin
         if exists (select 1
                    from   SPMPJK t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPM = d1.NOSPM
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPM != d1.NOSPM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPMPJK". Cannot modify parent code in "ANTARBYR".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[ANTARBYR] ENABLE TRIGGER [TU_ANTARBYR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_ATASBEND] on [dbo].[ATASBEND] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "PEGAWAI" must exist when inserting a child in "ATASBEND"  */
    if update(NIP)
    begin
       if (select count(*)
           from   PEGAWAI t1, inserted t2
           where  t1.NIP = t2.NIP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PEGAWAI". Cannot create child in "ATASBEND".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "ATASBEND"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "ATASBEND".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
 raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[ATASBEND] ENABLE TRIGGER [TI_ATASBEND]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_ATASBEND] on [dbo].[ATASBEND] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "PEGAWAI" must exist when updating a child in "ATASBEND"  */
      if update(NIP)
      begin
         if (select count(*)
             from   PEGAWAI t1, inserted t2
             where  t1.NIP = t2.NIP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PEGAWAI" does not exist. Cannot modify child in "ATASBEND".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "ATASBEND"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "ATASBEND".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[ATASBEND] ENABLE TRIGGER [TU_ATASBEND]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_BEND] on [dbo].[BEND] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       RETURN
       
       
---update
    /*  Cannot delete parent "BEND" if children still exist in "BENDKPA"  */
    if exists (select 1
               from   BENDKPA t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BENDKPA". Cannot delete parent "BEND".'
          goto error
       end
---end update
       

    /*  Cannot delete parent "BEND" if children still exist in "SKO"  */
    if exists (select 1
               from   SKO t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKO". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "SPP"  */
    if exists (select 1
               from   SPP t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPP". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "PSPJ"  */
    if exists (select 1
               from   PSPJ t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PSPJ". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "ANTARBYR"  */
    if exists (select 1
               from   ANTARBYR t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "ANTARBYR". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "SP2D"  */
    if exists (select 1
               from   SP2D t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2D". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "STS"  */
    if exists (select 1
               from   STS t2, deleted t1
               where  t2.KEYBEND1 = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "STS". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "STS"  */
    if exists (select 1
               from   STS t2, deleted t1
               where  t2.KEYBEND2 = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "STS". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "TBP"  */
    if exists (select 1
               from   TBP t2, deleted t1
               where  t2.KEYBEND2 = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBP". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "TBP"  */
    if exists (select 1
               from   TBP t2, deleted t1
               where  t2.KEYBEND1 = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBP". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "BPK"  */
    if exists (select 1
               from   BPK t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPK". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "TBPDETT"  */
    if exists (select 1
               from   TBPDETT t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPDETT". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "BKUSP2D"  */
    if exists (select 1
               from   BKUSP2D t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUSP2D". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "BKUSTS"  */
    if exists (select 1
               from   BKUSTS t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUSTS". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "PANJAR"  */
    if exists (select 1
               from   PANJAR t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PANJAR". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "BKBANK"  */
    if exists (select 1
               from   BKBANK t2, deleted t1
               where  t2.KEYBEND1 = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKBANK". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "BKBANK"  */
    if exists (select 1
               from   BKBANK t2, deleted t1
               where  t2.KEYBEND2 = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKBANK". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "BKPAJAK"  */
    if exists (select 1
               from   BKPAJAK t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKPAJAK". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "BKUTBP"  */
    if exists (select 1
               from   BKUTBP t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUTBP". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "BKUPANJAR"  */
    if exists (select 1
               from   BKUPANJAR t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUPANJAR". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "BKUBPK"  */
    if exists (select 1
               from   BKUBPK t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUBPK". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "BKUPAJAK"  */
    if exists (select 1
               from   BKUPAJAK t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUPAJAK". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "BKUBANK"  */
    if exists (select 1
               from   BKUBANK t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUBANK". Cannot delete parent "BEND".'
          goto error
       end

    /*  Cannot delete parent "BEND" if children still exist in "NRCBEND"  */
    if exists (select 1
               from   NRCBEND t2, deleted t1
               where  t2.KEYBEND = t1.KEYBEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "NRCBEND". Cannot delete parent "BEND".'
          goto error
       end


    return

/*  Errors handling  */
error:
raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BEND] ENABLE TRIGGER [TD_BEND]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TI_BEND] on [dbo].[BEND] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "JBEND" must exist when inserting a child in "BEND"  */
    if update(JNS_BEND)
    begin
       if (select count(*)
           from   JBEND t1, inserted t2
           where  t1.JNS_BEND = t2.JNS_BEND) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JBEND". Cannot create child in "BEND".'
             goto error
          end
    end
    /*  Parent "PEGAWAI" must exist when inserting a child in "BEND"  */
    if update(NIP)
    begin
       if (select count(*)
           from   PEGAWAI t1, inserted t2
           where  t1.NIP = t2.NIP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PEGAWAI". Cannot create child in "BEND".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "BEND"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "BEND".'
             goto error
          end
    end
    /*  Parent "DAFTBANK" must exist when inserting a child in "BEND"  */
    if update(KDBANK)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KDBANK is null)
       if @numnull != @numrows
          if (select count(*)
              from   DAFTBANK t1, inserted t2
              where  t1.KDBANK = t2.KDBANK) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTBANK". Cannot create child in "BEND".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BEND] ENABLE TRIGGER [TI_BEND]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_BEND] on [dbo].[BEND] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "JBEND" must exist when updating a child in "BEND"  */
      if update(JNS_BEND)
      begin
         if (select count(*)
             from   JBEND t1, inserted t2
             where  t1.JNS_BEND = t2.JNS_BEND) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JBEND" does not exist. Cannot modify child in "BEND".'
               goto error
            end
      end
      /*  Parent "PEGAWAI" must exist when updating a child in "BEND"  */
      if update(NIP)
      begin
         if (select count(*)
             from   PEGAWAI t1, inserted t2
             where  t1.NIP = t2.NIP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PEGAWAI" does not exist. Cannot modify child in "BEND".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "BEND"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "BEND".'
               goto error
            end
      end
      /*  Parent "DAFTBANK" must exist when updating a child in "BEND"  */
      if update(KDBANK)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KDBANK is null)
         if @numnull != @numrows
            if (select count(*)
                from   DAFTBANK t1, inserted t2
                where  t1.KDBANK = t2.KDBANK) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTBANK" does not exist. Cannot modify child in "BEND".'
               goto error
            end
      end
      /*  Cannot modify parent code in "BEND" if children still exist in "SKO"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   SKO t2, inserted i1, deleted d1
                    where  t2.KEYBEND = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKO". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "SPP"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   SPP t2, inserted i1, deleted d1
                    where  t2.KEYBEND = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPP". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "PSPJ"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   PSPJ t2, inserted i1, deleted d1
                    where  t2.KEYBEND = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PSPJ". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "ANTARBYR"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   ANTARBYR t2, inserted i1, deleted d1
                    where  t2.KEYBEND = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "ANTARBYR". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "SP2D"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   SP2D t2, inserted i1, deleted d1
                    where  t2.KEYBEND = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2D". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "STS"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   STS t2, inserted i1, deleted d1
                    where  t2.KEYBEND1 = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "STS". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "STS"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   STS t2, inserted i1, deleted d1
                    where  t2.KEYBEND2 = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "STS". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "TBP"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   TBP t2, inserted i1, deleted d1
                    where  t2.KEYBEND2 = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBP". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "TBP"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   TBP t2, inserted i1, deleted d1
                    where  t2.KEYBEND1 = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBP". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "BPK"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   BPK t2, inserted i1, deleted d1
                    where  t2.KEYBEND = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPK". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "TBPDETT"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   TBPDETT t2, inserted i1, deleted d1
                    where  t2.KEYBEND = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
           select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPDETT". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "BKUSP2D"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   BKUSP2D t2, inserted i1, deleted d1
                    where  t2.KEYBEND = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUSP2D". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "BKUSTS"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   BKUSTS t2, inserted i1, deleted d1
                    where  t2.KEYBEND = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUSTS". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "PANJAR"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   PANJAR t2, inserted i1, deleted d1
                    where  t2.KEYBEND = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PANJAR". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "BKBANK"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   BKBANK t2, inserted i1, deleted d1
                    where  t2.KEYBEND1 = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKBANK". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "BKBANK"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   BKBANK t2, inserted i1, deleted d1
                    where  t2.KEYBEND2 = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKBANK". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "BKPAJAK"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   BKPAJAK t2, inserted i1, deleted d1
                    where  t2.KEYBEND = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKPAJAK". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "BKUTBP"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   BKUTBP t2, inserted i1, deleted d1
                    where  t2.KEYBEND = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUTBP". Cannot modify parent code in "BEND".'
  goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "BKUPANJAR"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   BKUPANJAR t2, inserted i1, deleted d1
                    where  t2.KEYBEND = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUPANJAR". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "BKUBPK"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   BKUBPK t2, inserted i1, deleted d1
                    where  t2.KEYBEND = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUBPK". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "BKUPAJAK"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   BKUPAJAK t2, inserted i1, deleted d1
                    where  t2.KEYBEND = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUPAJAK". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "BKUBANK"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   BKUBANK t2, inserted i1, deleted d1
                    where  t2.KEYBEND = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUBANK". Cannot modify parent code in "BEND".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BEND" if children still exist in "NRCBEND"  */
      if update(KEYBEND)
      begin
         if exists (select 1
                    from   NRCBEND t2, inserted i1, deleted d1
                    where  t2.KEYBEND = d1.KEYBEND
                     and  (i1.KEYBEND != d1.KEYBEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "NRCBEND". Cannot modify parent code in "BEND".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BEND] DISABLE TRIGGER [TU_BEND]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_BENDKPA] on [dbo].[BENDKPA] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "KPA" must exist when inserting a child in "BENDKPA"  */
    if update(UNITKEY) or
       update(NIP)
    begin
       if (select count(*)
           from   KPA t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NIP = t2.NIP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "KPA". Cannot create child in "BENDKPA".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "BENDKPA"  */
    if update(KEYBEND)
    begin
       if (select count(*)
           from   BEND t1, inserted t2
           where  t1.KEYBEND = t2.KEYBEND) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "BENDKPA".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
END


GO
ALTER TABLE [dbo].[BENDKPA] ENABLE TRIGGER [TI_BENDKPA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_BENDKPA] on [dbo].[BENDKPA] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "KPA" must exist when updating a child in "BENDKPA"  */
      if update(UNITKEY) or
         update(NIP)
      begin
         if (select count(*)
             from   KPA t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NIP = t2.NIP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'KPA" does not exist. Cannot modify child in "BENDKPA".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "BENDKPA"  */
      if update(KEYBEND)
      begin
         if (select count(*)
             from   BEND t1, inserted t2
             where  t1.KEYBEND = t2.KEYBEND) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "BENDKPA".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BENDKPA] ENABLE TRIGGER [TU_BENDKPA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_BERITA] on [dbo].[BERITA] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

   select  @numrows = @@rowcount
      if @numrows = 0
         RETURN

    if exists (select 1
               from   BERITADETR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBA = t1.NOBA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BERITADETR". Cannot delete parent "BERITA".'
          goto error
       end    
       
       if exists (select 1
               from   BPK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBA = t1.NOBA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPK". Cannot delete parent "BERITA".'
          goto error
       end    
       
		if exists (select 1
		from   SPPBA t2, deleted t1
		where  t2.UNITKEY = t1.UNITKEY
		and   t2.NOBA = t1.NOBA)
		begin
				select @errno  = 50006,
				 @errmsg = 'Children still exist in "SPPBA". Cannot delete parent "BERITA".'
				goto error
		end 
       
       if exists (select 1
               from   BERITAPOT t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBA = t1.NOBA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BERITAPOT". Cannot delete parent "BERITA".'
          goto error
       end    
    
    DECLARE @NOBKU VARCHAR(100), @UNITKEY VARCHAR(50), @KDSTATUS VARCHAR(10)
    BEGIN 
		declare cjurnal cursor for
			SELECT I.NOBA, I.UNITKEY,I.KDSTATUS FROM DELETED I
		open cjurnal
		fetch next from cjurnal into @NOBKU, @UNITKEY,@KDSTATUS
		while @@FETCH_STATUS = 0
		begin	
			
			DELETE FROM jurnal WHERE unitkey = @UNITKEY AND NOBUKTI = @NOBKU AND kdstatus  =@KDSTATUS
			fetch next from cjurnal into @NOBKU, @UNITKEY,@KDSTATUS
		end
		close cjurnal
		deallocate cjurnal
	END


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BERITA] ENABLE TRIGGER [TD_BERITA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_BERITA] on [dbo].[BERITA] for update as
BEGIN
	
/*
* PIC RE 31 OKTOBER 2015
PIC RE 28 MEI 2014

*/

   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         RETURN
         


      /*  Parent "DAFTUNIT" must exist when updating a child in "BERITA"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "BERITA".'
               goto error
            end
      end         
         
            if update(UNITKEY) or
         update(NOBA)
      begin
         if exists (select 1
                    from   SPPBA t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBA = d1.NOBA
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBA != d1.NOBA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPPBA". Cannot modify parent code in "BERITA".'
               goto error
            end
      end     
		 if update(UNITKEY) or
		update(NOBA)
		begin
					if exists (select 1
					from   BPK t2, inserted i1, deleted d1
					where  t2.UNITKEY = d1.UNITKEY
					 and   t2.NOBA = d1.NOBA
					 and  (i1.UNITKEY != d1.UNITKEY
					  or   i1.NOBA != d1.NOBA))
		begin
						select @errno  = 50005,
						  @errmsg = 'Children still exist in "BPK". Cannot modify parent code in "BERITA".'
						goto error
		end
		end  
         
         
 
      /*  Cannot modify parent code in "BERITA" if children still exist in "BERITADETR"  */
      if update(UNITKEY) or
         update(NOBA)
      begin
         if exists (select 1
                    from   BERITADETR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBA = d1.NOBA
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBA != d1.NOBA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BERITADETR". Cannot modify parent code in "BERITA".'
               goto error
            end
      end     
      
      
      if update(UNITKEY) or
         update(NOBA)
      begin
         if exists (select 1
                    from   BERITAPOT t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBA = d1.NOBA
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBA != d1.NOBA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BERITAPOT". Cannot modify parent code in "BERITA".'
               goto error
            end
      end       

      /*  Parent "MKEGIATAN" must exist when updating a child in "BERITADETR"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "BERITADETR".'
               goto error
            end
      end      

       

      DECLARE @NOBKU VARCHAR(100), @TABLENAME VARCHAR(20), @UNITKEY VARCHAR(10), @KDSTATUS VARCHAR(2), @IDXKODE INT, @TGLVALID DATETIME,@NOBA VARCHAR(100)
      if update(TGLVALID)    
		BEGIN 
			declare cjurnal cursor for
				SELECT I.NOBA, 'BERITA' TABLENAME, I.UNITKEY, I.KDSTATUS, 2 IDXKODE, I.TGLVALID,I.NOBA from INSERTED I 
			open cjurnal
			fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE, @TGLVALID,@NOBA
			while @@FETCH_STATUS=0
			begin	
				IF @TGLVALID IS NOT NULL 
				BEGIN
					
						if exists 
							(
								select 1
									from   
									(
										SELECT UNITKEY, KD_BULAN,NOBA FROM
										(
												SELECT UNITKEY, KD_BULAN, @NOBA NOBA FROM LAPORSAH  WHERE UNITKEY=@UNITKEY  
												
										) A	
									) t2,   inserted i1, deleted d1
									where  t2.UNITKEY = d1.UNITKEY
									and   t2.NOBA = d1.NOBA AND MONTH(D1.TGLVALID) <=  KD_BULAN
							)
							BEGIN
									
									select @errno  = 50005,
									@errmsg =  'JURNAL SUDAH DIKUNCI DI PENGESAHAN LAPORAN PEMBUKUAN'
									goto error

									
							END
							ELSE
							BEGIN
									IF @KDSTATUS='74' 
									BEGIN
										
										DELETE FROM jurnal WHERE unitkey = @UNITKEY AND NOBUKTI = @NOBKU AND kdstatus  IN ('74')
										exec WSP_JURNAL_BAKF @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
										UPDATE jurnal SET tgl_valid = @TGLVALID  WHERE UNITKEY = @UNITKEY AND NOBUKTI = @NOBA AND kdstatus IN ('74')
									END ELSE
									BEGIN
										DELETE FROM jurnal WHERE unitkey = @UNITKEY AND NOBUKTI = @NOBKU AND kdstatus  IN ('71','75','79')
										exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
										UPDATE jurnal SET tgl_valid = @TGLVALID  WHERE UNITKEY = @UNITKEY AND NOBUKTI = @NOBA AND kdstatus IN ('71','75','79')
									
									END					

							END	
				
					
					
					
					--------IF @KDSTATUS='74' 
					--------BEGIN
						
					--------	DELETE FROM jurnal WHERE unitkey = @UNITKEY AND nobkuskpd = @NOBKU AND kdstatus  IN ('74')
					--------	exec WSP_JURNAL_BAKF @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
					--------	UPDATE jurnal SET tgl_valid = @TGLVALID  WHERE unitkey = @UNITKEY AND nobkuskpd = @NOBKU AND kdstatus IN ('74')
					--------END ELSE
					--------BEGIN
					--------	DELETE FROM jurnal WHERE unitkey = @UNITKEY AND nobkuskpd = @NOBKU AND kdstatus  IN ('71','75')
					--------	exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
					--------	UPDATE jurnal SET tgl_valid = @TGLVALID  WHERE unitkey = @UNITKEY AND nobkuskpd = @NOBKU AND kdstatus IN ('71','75')
					
					--------END	
					
					
					
					
				END
				ELSE
				BEGIN
					
					
						if exists 
							(
									select 1
									from   
									(
										SELECT * FROM BERITA WHERE UNITKEY=@UNITKEY AND NOBA=@NOBA
									) t2,   DELETED d1
									where  t2.UNITKEY = d1.UNITKEY
									and   t2.NOBA = d1.NOBA 
									AND MONTH(D1.TGLVALID)<=(SELECT KD_BULAN FROM LAPORSAH WHERE UNITKEY=@UNITKEY)
							)
						BEGIN
									select @errno  = 50005,
									@errmsg =  'JURNAL TIDAK DAPAT DIHAPUS SUDAH DIKUNCI DI PENGESAHAN LAPORAN PEMBUKUAN'
									goto error
									
						END	ELSE
						BEGIN
								DELETE FROM jurnal WHERE unitkey = @UNITKEY AND NOBUKTI = @NOBA AND kdstatus IN ('71','74','75','79')
						END	
				
					
					--DEL
					--------DELETE FROM jurnal WHERE unitkey = @UNITKEY AND NOBUKTI = @NOBA AND kdstatus IN ('71','74','75','79')
				END				
				fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE, @TGLVALID,@NOBA
			end
			close cjurnal
			deallocate cjurnal
		END 
      
      return

/*  Errors handling  */
error:
       raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BERITA] ENABLE TRIGGER [TU_BERITA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TD_BKBANK] on [dbo].[BKBANK] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "BKBANK" if children still exist in "BKBANKDET"  */
    if exists (select 1
               from   BKBANKDET t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBUKU = t1.NOBUKU)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKBANKDET". Cannot delete parent "BKBANK".'
          goto error
       end

    /*  Cannot delete parent "BKBANK" if children still exist in "BKUBANK"  */
    if exists (select 1
               from   BKUBANK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBUKU = t1.NOBUKU)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUBANK". Cannot delete parent "BKBANK".'
          goto error
       end


    return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKBANK] ENABLE TRIGGER [TD_BKBANK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TI_BKBANK] on [dbo].[BKBANK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "STATTRS" must exist when inserting a child in "BKBANK"  */
    if update(KDSTATUS)
    begin
       if (select count(*)
           from   STATTRS t1, inserted t2
           where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STATTRS". Cannot create child in "BKBANK".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "BKBANK"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "BKBANK".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "BKBANK"  */
    if update(KEYBEND1)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND1 is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND1) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "BKBANK".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "BKBANK"  */
--    if update(KEYBEND2)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  KEYBEND2 is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   BEND t1, inserted t2
--              where  t1.KEYBEND = t2.KEYBEND2) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "BKBANK".'
--             goto error
--          end
--    end
    /*  Parent "JABTTD" must exist when inserting a child in "BKBANK"  */
--    if update(IDXTTD)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "BKBANK".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[BKBANK] ENABLE TRIGGER [TI_BKBANK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE trigger [dbo].[TU_BKBANK] on [dbo].[BKBANK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "STATTRS" must exist when updating a child in "BKBANK"  */
      if update(KDSTATUS)
      begin
         if (select count(*)
             from   STATTRS t1, inserted t2
             where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STATTRS" does not exist. Cannot modify child in "BKBANK".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "BKBANK"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "BKBANK".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "BKBANK"  */
      if update(KEYBEND1)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND1 is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND1) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "BKBANK".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "BKBANK"  */
--      if update(KEYBEND2)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  KEYBEND2 is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   BEND t1, inserted t2
--                where  t1.KEYBEND = t2.KEYBEND2) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'BEND" does not exist. Cannot modify child in "BKBANK".'
--               goto error
--            end
--      end
      /*  Parent "JABTTD" must exist when updating a child in "BKBANK"  */
--      if update(IDXTTD)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDXTTD is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   JABTTD t1, inserted t2
--                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "BKBANK".'
--               goto error
--            end
--      end
      /*  Cannot modify parent code in "BKBANK" if children still exist in "BKBANKDET"  */
      if update(UNITKEY) or
         update(NOBUKU)
      begin
         if exists (select 1
                    from   BKBANKDET t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBUKU = d1.NOBUKU
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBUKU != d1.NOBUKU))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKBANKDET". Cannot modify parent code in "BKBANK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BKBANK" if children still exist in "BKUBANK"  */
      if update(UNITKEY) or
         update(NOBUKU)
      begin
         if exists (select 1
                    from   BKUBANK t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBUKU = d1.NOBUKU
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBUKU != d1.NOBUKU))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUBANK". Cannot modify parent code in "BKBANK".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end


GO
ALTER TABLE [dbo].[BKBANK] ENABLE TRIGGER [TU_BKBANK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_BKBANKDET] on [dbo].[BKBANKDET] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "JTRNLKAS" must exist when inserting a child in "BKBANKDET"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "BKBANKDET".'
             goto error
          end
    end
    /*  Parent "BKBANK" must exist when inserting a child in "BKBANKDET"  */
    if update(UNITKEY) or
       update(NOBUKU)
    begin
       if (select count(*)
           from   BKBANK t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBUKU = t2.NOBUKU) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKBANK". Cannot create child in "BKBANKDET".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKBANKDET] ENABLE TRIGGER [TI_BKBANKDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_BKBANKDET] on [dbo].[BKBANKDET] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "JTRNLKAS" must exist when updating a child in "BKBANKDET"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "BKBANKDET".'
               goto error
            end
      end
      /*  Parent "BKBANK" must exist when updating a child in "BKBANKDET"  */
      if update(UNITKEY) or
         update(NOBUKU)
      begin
         if (select count(*)
             from   BKBANK t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOBUKU = t2.NOBUKU) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKBANK" does not exist. Cannot modify child in "BKBANKDET".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKBANKDET] ENABLE TRIGGER [TU_BKBANKDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TD_BKBKAS] on [dbo].[BKBKAS] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "BKBKAS" if children still exist in "BKUK"  */
    if exists (select 1
               from   BKUK t2, deleted t1
               where  t2.NOBBANTU = t1.NOBBANTU)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUK". Cannot delete parent "BKBKAS".'
          goto error
       end

    /*  Cannot delete parent "BKBKAS" if children still exist in "STS"  */
    if exists (select 1
               from   STS t2, deleted t1
               where  t2.NOBBANTU = t1.NOBBANTU)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "STS". Cannot delete parent "BKBKAS".'
          goto error
       end

    /*  Cannot delete parent "BKBKAS" if children still exist in "BKUD"  */
    if exists (select 1
               from   BKUD t2, deleted t1
               where  t2.NOBBANTU = t1.NOBBANTU)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUD". Cannot delete parent "BKBKAS".'
          goto error
       end

    /*  Cannot delete parent "BKBKAS" if children still exist in "RKMDETT"  */
    if exists (select 1
               from   RKMDETT t2, deleted t1
               where  t2.NOBBANTU = t1.NOBBANTU)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETT". Cannot delete parent "BKBKAS".'
          goto error
       end


    return

/*  Errors handling  */
error:
raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKBKAS] ENABLE TRIGGER [TD_BKBKAS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TI_BKBKAS] on [dbo].[BKBKAS] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTBANK" must exist when inserting a child in "BKBKAS"  */
    if update(KDBANK)
    begin
       if (select count(*)
           from   DAFTBANK t1, inserted t2
           where  t1.KDBANK = t2.KDBANK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTBANK". Cannot create child in "BKBKAS".'
             goto error
          end
    end
    /*  Parent "MATANGNRC" must exist when inserting a child in "BKBKAS"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGNRC t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGNRC". Cannot create child in "BKBKAS".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "BKBKAS"  */
    if update(UNITKEY)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  UNITKEY is null)
       if @numnull != @numrows
          if (select count(*)
              from   DAFTUNIT t1, inserted t2
              where  t1.UNITKEY = t2.UNITKEY) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "BKBKAS".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKBKAS] ENABLE TRIGGER [TI_BKBKAS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_BKBKAS] on [dbo].[BKBKAS] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTBANK" must exist when updating a child in "BKBKAS"  */
      if update(KDBANK)
      begin
         if (select count(*)
             from   DAFTBANK t1, inserted t2
             where  t1.KDBANK = t2.KDBANK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTBANK" does not exist. Cannot modify child in "BKBKAS".'
               goto error
            end
      end
      /*  Parent "MATANGNRC" must exist when updating a child in "BKBKAS"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGNRC t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGNRC" does not exist. Cannot modify child in "BKBKAS".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "BKBKAS"  */
      if update(UNITKEY)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  UNITKEY is null)
         if @numnull != @numrows
            if (select count(*)
                from   DAFTUNIT t1, inserted t2
                where  t1.UNITKEY = t2.UNITKEY) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "BKBKAS".'
               goto error
            end
      end
      /*  Cannot modify parent code in "BKBKAS" if children still exist in "BKUK"  */
      if update(NOBBANTU)
      begin
         if exists (select 1
                    from   BKUK t2, inserted i1, deleted d1
                    where  t2.NOBBANTU = d1.NOBBANTU
                     and  (i1.NOBBANTU != d1.NOBBANTU))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUK". Cannot modify parent code in "BKBKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BKBKAS" if children still exist in "STS"  */
      if update(NOBBANTU)
      begin
         if exists (select 1
                    from   STS t2, inserted i1, deleted d1
                    where  t2.NOBBANTU = d1.NOBBANTU
                     and  (i1.NOBBANTU != d1.NOBBANTU))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "STS". Cannot modify parent code in "BKBKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BKBKAS" if children still exist in "BKUD"  */
      if update(NOBBANTU)
      begin
         if exists (select 1
                    from   BKUD t2, inserted i1, deleted d1
                    where  t2.NOBBANTU = d1.NOBBANTU
                     and  (i1.NOBBANTU != d1.NOBBANTU))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUD". Cannot modify parent code in "BKBKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BKBKAS" if children still exist in "RKMDETT"  */
      if update(NOBBANTU)
      begin
         if exists (select 1
                    from   RKMDETT t2, inserted i1, deleted d1
                    where  t2.NOBBANTU = d1.NOBBANTU
                     and  (i1.NOBBANTU != d1.NOBBANTU))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETT". Cannot modify parent code in "BKBKAS".'
               goto error
         end
      end


      return

/*  Errors handling  */
error:
raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKBKAS] DISABLE TRIGGER [TU_BKBKAS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_BKBM] on [dbo].[BKBM] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "BKBM" if children still exist in "BKBMDET"  */
    if exists (select 1
               from   BKBMDET t2, deleted t1
               where  t2.NOBK = t1.NOBK
                and   t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKBMDET". Cannot delete parent "BKBM".'
          goto error
       end


    return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKBM] ENABLE TRIGGER [TD_BKBM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_BKBM] on [dbo].[BKBM] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "BKTMEM" must exist when inserting a child in "BKBM"  */
    if update(UNITKEY) or
       update(NOBM)
    begin
       if (select count(*)
           from   BKTMEM t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBM = t2.NOBM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKTMEM". Cannot create child in "BKBM".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "BKBM"  */
    if update(IDXTTD)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "BKBM".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKBM] ENABLE TRIGGER [TI_BKBM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TU_BKBM] on [dbo].[BKBM] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "BKTMEM" must exist when updating a child in "BKBM"  */
      if update(UNITKEY) or
         update(NOBM)
      begin
         if (select count(*)
             from   BKTMEM t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOBM = t2.NOBM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKTMEM" does not exist. Cannot modify child in "BKBM".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "BKBM"  */
--      if update(IDXTTD)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDXTTD is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   JABTTD t1, inserted t2
--                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "BKBM".'
--               goto error
--            end
--      end
      /*  Cannot modify parent code in "BKBM" if children still exist in "BKBMDET"  */
      if update(NOBK) or
         update(UNITKEY)
      begin
         if exists (select 1
                    from   BKBMDET t2, inserted i1, deleted d1
                    where  t2.NOBK = d1.NOBK
                     and   t2.UNITKEY = d1.UNITKEY
                     and  (i1.NOBK != d1.NOBK
                      or   i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKBMDET". Cannot modify parent code in "BKBM".'
               goto error
            end
      end
     
      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKBM] ENABLE TRIGGER [TU_BKBM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_BKBMDET] on [dbo].[BKBMDET] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "BKBM" must exist when inserting a child in "BKBMDET"  */
    if update(NOBK) or
       update(UNITKEY)
    begin
       if (select count(*)
           from   BKBM t1, inserted t2
           where  t1.NOBK = t2.NOBK
            and   t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKBM". Cannot create child in "BKBMDET".'
             goto error
          end
    end
    /*  Parent "MATANGNRC" must exist when inserting a child in "BKBMDET"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGNRC t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGNRC". Cannot create child in "BKBMDET".'
             goto error
          end
    end
    /*  Parent "PERSACC" must exist when inserting a child in "BKBMDET"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "BKBMDET".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKBMDET] ENABLE TRIGGER [TI_BKBMDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_BKBMDET] on [dbo].[BKBMDET] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "BKBM" must exist when updating a child in "BKBMDET"  */
      if update(NOBK) or
         update(UNITKEY)
      begin
         if (select count(*)
             from   BKBM t1, inserted t2
             where  t1.NOBK = t2.NOBK
              and   t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKBM" does not exist. Cannot modify child in "BKBMDET".'
               goto error
            end
      end
      /*  Parent "MATANGNRC" must exist when updating a child in "BKBMDET"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGNRC t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGNRC" does not exist. Cannot modify child in "BKBMDET".'
               goto error
            end
      end
      /*  Parent "PERSACC" must exist when updating a child in "BKBMDET"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "BKBMDET".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKBMDET] ENABLE TRIGGER [TU_BKBMDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TD_BKPAJAK] on [dbo].[BKPAJAK] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

--update
    /*  Cannot delete parent "BKPAJAK" if children still exist in "BPKPAJAK"  */
    if exists (select 1
               from   BPKPAJAK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBKPAJAK = t1.NOBKPAJAK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPKPAJAK". Cannot delete parent "BKPAJAK".'
          goto error
       end
----end update

    /*  Cannot delete parent "BKPAJAK" if children still exist in "BKPAJAKDET"  */
    if exists (select 1
               from   BKPAJAKDET t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBKPAJAK = t1.NOBKPAJAK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKPAJAKDET". Cannot delete parent "BKPAJAK".'
          goto error
       end

    /*  Cannot delete parent "BKPAJAK" if children still exist in "BKUPAJAK"  */
	
    --------if exists (select 1
    --------           from   BKUPAJAK t2, deleted t1
    --------           where  t2.UNITKEY = t1.UNITKEY
    --------            and   t2.NOBKPAJAK = t1.NOBKPAJAK)
    --------   begin
    --------      select @errno  = 50006,
    --------             @errmsg = 'Children still exist in "BKUPAJAK". Cannot delete parent "BKPAJAK".'
    --------      goto error
		
    --------   end
	DECLARE @NOTRANSBKUPJK VARCHAR(100), @UNITKEY VARCHAR(10)
    BEGIN 
		declare cjurnalBKPAJAK cursor for
			SELECT I.NOBKPAJAK, I.UNITKEY FROM DELETED I
		open cjurnalBKPAJAK
		fetch next from cjurnalBKPAJAK into @NOTRANSBKUPJK, @UNITKEY
		while @@FETCH_STATUS=0
		begin	
			DELETE FROM BKUPAJAK WHERE NOBKPAJAK = @NOTRANSBKUPJK AND unitkey = @UNITKEY
			fetch next from cjurnalBKPAJAK into @NOTRANSBKUPJK, @UNITKEY
		end
		close cjurnalBKPAJAK
		deallocate cjurnalBKPAJAK
	END



    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[BKPAJAK] ENABLE TRIGGER [TD_BKPAJAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_BKPAJAK] on [dbo].[BKPAJAK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "BKPAJAK"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "BKPAJAK".'
             goto error
          end
    end
    /*  Parent "STATTRS" must exist when inserting a child in "BKPAJAK"  */
    if update(KDSTATUS)
    begin
       if (select count(*)
           from   STATTRS t1, inserted t2
           where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STATTRS". Cannot create child in "BKPAJAK".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "BKPAJAK"  */
    if update(KEYBEND)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "BKPAJAK".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "BKPAJAK"  */
--    if update(IDXTTD)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "BKPAJAK".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[BKPAJAK] ENABLE TRIGGER [TI_BKPAJAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TU_BKPAJAK] on [dbo].[BKPAJAK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "BKPAJAK"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "BKPAJAK".'
               goto error
            end
      end
      /*  Parent "STATTRS" must exist when updating a child in "BKPAJAK"  */
      if update(KDSTATUS)
      begin
         if (select count(*)
             from   STATTRS t1, inserted t2
             where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STATTRS" does not exist. Cannot modify child in "BKPAJAK".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "BKPAJAK"  */
      if update(KEYBEND)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "BKPAJAK".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "BKPAJAK"  */
--      if update(IDXTTD)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDXTTD is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   JABTTD t1, inserted t2
--                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "BKPAJAK".'
--               goto error
--            end
--      end
      /*  Cannot modify parent code in "BKPAJAK" if children still exist in "BKPAJAKDET"  */
      if update(UNITKEY) or
         update(NOBKPAJAK)
      begin
         if exists (select 1
                    from   BKPAJAKDET t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBKPAJAK = d1.NOBKPAJAK
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBKPAJAK != d1.NOBKPAJAK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKPAJAKDET". Cannot modify parent code in "BKPAJAK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BKPAJAK" if children still exist in "BKUPAJAK"  */
      if update(UNITKEY) or
         update(NOBKPAJAK)
      begin
         if exists (select 1
                    from   BKUPAJAK t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBKPAJAK = d1.NOBKPAJAK
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBKPAJAK != d1.NOBKPAJAK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUPAJAK". Cannot modify parent code in "BKPAJAK".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[BKPAJAK] ENABLE TRIGGER [TU_BKPAJAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_BKRKK] on [dbo].[BKRKK] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "BKRKK" if children still exist in "BKRKKDET"  */
    if exists (select 1
               from   BKRKKDET t2, deleted t1
               where  t2.NOBK = t1.NOBK
                and   t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKRKKDET". Cannot delete parent "BKRKK".'
          goto error
       end


    return

/*  Errors handling  */
error:
 raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKRKK] ENABLE TRIGGER [TD_BKRKK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_BKRKK] on [dbo].[BKRKK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "BKUSP2D" must exist when inserting a child in "BKRKK"  */
    if update(UNITKEY) or
       update(NOBKUSKPD)
    begin
       if (select count(*)
           from   BKUSP2D t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBKUSKPD = t2.NOBKUSKPD) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKUSP2D". Cannot create child in "BKRKK".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "BKRKK"  */
--    if update(IDXTTD)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "BKRKK".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKRKK] ENABLE TRIGGER [TI_BKRKK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TU_BKRKK] on [dbo].[BKRKK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "BKUSP2D" must exist when updating a child in "BKRKK"  */
      if update(UNITKEY) or
         update(NOBKUSKPD)
      begin
         if (select count(*)
             from   BKUSP2D t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOBKUSKPD = t2.NOBKUSKPD) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKUSP2D" does not exist. Cannot modify child in "BKRKK".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "BKRKK"  */
      if update(IDXTTD)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  IDXTTD is null)
         if @numnull != @numrows
            if (select count(*)
                from   JABTTD t1, inserted t2
                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "BKRKK".'
               goto error
            end
      end
      /*  Cannot modify parent code in "BKRKK" if children still exist in "BKRKKDET"  */
      if update(NOBK) or
         update(UNITKEY)
      begin
         if exists (select 1
                    from   BKRKKDET t2, inserted i1, deleted d1
                    where  t2.NOBK = d1.NOBK
                     and   t2.UNITKEY = d1.UNITKEY
                     and  (i1.NOBK != d1.NOBK
                      or   i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKRKKDET". Cannot modify parent code in "BKRKK".'
               goto error
            end
      end
     return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKRKK] ENABLE TRIGGER [TU_BKRKK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_BKRKKDET] on [dbo].[BKRKKDET] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "BKRKK" must exist when inserting a child in "BKRKKDET"  */
    if update(NOBK) or
       update(UNITKEY)
    begin
       if (select count(*)
           from   BKRKK t1, inserted t2
           where  t1.NOBK = t2.NOBK
            and   t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKRKK". Cannot create child in "BKRKKDET".'
             goto error
          end
    end
    /*  Parent "MATANGNRC" must exist when inserting a child in "BKRKKDET"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGNRC t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGNRC". Cannot create child in "BKRKKDET".'
             goto error
          end
    end
    /*  Parent "PERSACC" must exist when inserting a child in "BKRKKDET"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "BKRKKDET".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKRKKDET] ENABLE TRIGGER [TI_BKRKKDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_BKRKKDET] on [dbo].[BKRKKDET] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "BKRKK" must exist when updating a child in "BKRKKDET"  */
      if update(NOBK) or
         update(UNITKEY)
      begin
         if (select count(*)
             from   BKRKK t1, inserted t2
             where  t1.NOBK = t2.NOBK
              and   t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKRKK" does not exist. Cannot modify child in "BKRKKDET".'
               goto error
            end
      end
      /*  Parent "MATANGNRC" must exist when updating a child in "BKRKKDET"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGNRC t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGNRC" does not exist. Cannot modify child in "BKRKKDET".'
               goto error
            end
      end
      /*  Parent "PERSACC" must exist when updating a child in "BKRKKDET"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "BKRKKDET".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKRKKDET] ENABLE TRIGGER [TU_BKRKKDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_BKRKM] on [dbo].[BKRKM] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "BKRKM" if children still exist in "BKRKMDET"  */
    if exists (select 1
               from   BKRKMDET t2, deleted t1
               where  t2.NOBK = t1.NOBK
                and   t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKRKMDET". Cannot delete parent "BKRKM".'
          goto error
       end


    return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKRKM] ENABLE TRIGGER [TD_BKRKM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_BKRKM] on [dbo].[BKRKM] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "BKUSTS" must exist when inserting a child in "BKRKM"  */
    if update(UNITKEY) or
       update(NOBKUSKPD)
    begin
       if (select count(*)
           from   BKUSTS t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBKUSKPD = t2.NOBKUSKPD) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKUSTS". Cannot create child in "BKRKM".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "BKRKM"  */
    if update(IDXTTD)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  IDXTTD is null)
       if @numnull != @numrows
          if (select count(*)
              from   JABTTD t1, inserted t2
              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "BKRKM".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKRKM] ENABLE TRIGGER [TI_BKRKM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TU_BKRKM] on [dbo].[BKRKM] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "BKUSTS" must exist when updating a child in "BKRKM"  */
      if update(UNITKEY) or
         update(NOBKUSKPD)
      begin
         if (select count(*)
             from   BKUSTS t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOBKUSKPD = t2.NOBKUSKPD) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKUSTS" does not exist. Cannot modify child in "BKRKM".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "BKRKM"  */
      if update(IDXTTD)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  IDXTTD is null)
         if @numnull != @numrows
            if (select count(*)
                from   JABTTD t1, inserted t2
                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "BKRKM".'
               goto error
            end
      end
      /*  Cannot modify parent code in "BKRKM" if children still exist in "BKRKMDET"  */
      if update(NOBK) or
         update(UNITKEY)
      begin
         if exists (select 1
                    from   BKRKMDET t2, inserted i1, deleted d1
                    where  t2.NOBK = d1.NOBK
                     and   t2.UNITKEY = d1.UNITKEY
                     and  (i1.NOBK != d1.NOBK
                      or   i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKRKMDET". Cannot modify parent code in "BKRKM".'
               goto error
            end
      end
      return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKRKM] ENABLE TRIGGER [TU_BKRKM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_BKRKMDET] on [dbo].[BKRKMDET] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "BKRKM" must exist when inserting a child in "BKRKMDET"  */
    if update(NOBK) or
       update(UNITKEY)
    begin
       if (select count(*)
           from   BKRKM t1, inserted t2
           where  t1.NOBK = t2.NOBK
            and   t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKRKM". Cannot create child in "BKRKMDET".'
             goto error
          end
    end
    /*  Parent "MATANGNRC" must exist when inserting a child in "BKRKMDET"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGNRC t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGNRC". Cannot create child in "BKRKMDET".'
             goto error
          end
    end
    /*  Parent "PERSACC" must exist when inserting a child in "BKRKMDET"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "BKRKMDET".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKRKMDET] ENABLE TRIGGER [TI_BKRKMDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_BKRKMDET] on [dbo].[BKRKMDET] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "BKRKM" must exist when updating a child in "BKRKMDET"  */
      if update(NOBK) or
         update(UNITKEY)
      begin
         if (select count(*)
             from   BKRKM t1, inserted t2
             where  t1.NOBK = t2.NOBK
              and   t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKRKM" does not exist. Cannot modify child in "BKRKMDET".'
               goto error
            end
      end
      /*  Parent "MATANGNRC" must exist when updating a child in "BKRKMDET"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGNRC t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGNRC" does not exist. Cannot modify child in "BKRKMDET".'
               goto error
            end
      end
      /*  Parent "PERSACC" must exist when updating a child in "BKRKMDET"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "BKRKMDET".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKRKMDET] ENABLE TRIGGER [TU_BKRKMDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_BKSPJ] on [dbo].[BKSPJ] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "BKSPJ" if children still exist in "BKSPJDET"  */
    if exists (select 1
               from   BKSPJDET t2, deleted t1
               where  t2.NOBK = t1.NOBK
                and   t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKSPJDET". Cannot delete parent "BKSPJ".'
          goto error
       end


    return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKSPJ] ENABLE TRIGGER [TD_BKSPJ]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_BKSPJ] on [dbo].[BKSPJ] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "PSPJ" must exist when inserting a child in "BKSPJ"  */
    if update(UNITKEY) or
       update(NOSPJ)
    begin
       if (select count(*)
           from   PSPJ t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPJ = t2.NOSPJ) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PSPJ". Cannot create child in "BKSPJ".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "BKSPJ"  */
--    if update(IDXTTD)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "BKSPJ".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKSPJ] ENABLE TRIGGER [TI_BKSPJ]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TU_BKSPJ] on [dbo].[BKSPJ] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "PSPJ" must exist when updating a child in "BKSPJ"  */
      if update(UNITKEY) or
         update(NOSPJ)
      begin
         if (select count(*)
             from   PSPJ t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPJ = t2.NOSPJ) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PSPJ" does not exist. Cannot modify child in "BKSPJ".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "BKSPJ"  */
--      if update(IDXTTD)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDXTTD is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   JABTTD t1, inserted t2
--                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "BKSPJ".'
--               goto error
--            end
--      end
      /*  Cannot modify parent code in "BKSPJ" if children still exist in "BKSPJDET"  */
      if update(NOBK) or
         update(UNITKEY)
      begin
         if exists (select 1
                    from   BKSPJDET t2, inserted i1, deleted d1
                    where  t2.NOBK = d1.NOBK
                     and   t2.UNITKEY = d1.UNITKEY
                     and  (i1.NOBK != d1.NOBK
                      or   i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKSPJDET". Cannot modify parent code in "BKSPJ".'
               goto error
            end
      end
      return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKSPJ] ENABLE TRIGGER [TU_BKSPJ]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_BKSPJDET] on [dbo].[BKSPJDET] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "BKSPJ" must exist when inserting a child in "BKSPJDET"  */
    if update(NOBK) or
       update(UNITKEY)
    begin
       if (select count(*)
           from   BKSPJ t1, inserted t2
           where  t1.NOBK = t2.NOBK
            and   t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKSPJ". Cannot create child in "BKSPJDET".'
             goto error
          end
    end
    /*  Parent "MATANGNRC" must exist when inserting a child in "BKSPJDET"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGNRC t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGNRC". Cannot create child in "BKSPJDET".'
             goto error
          end
    end
    /*  Parent "PERSACC" must exist when inserting a child in "BKSPJDET"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "BKSPJDET".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKSPJDET] ENABLE TRIGGER [TI_BKSPJDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_BKSPJDET] on [dbo].[BKSPJDET] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "BKSPJ" must exist when updating a child in "BKSPJDET"  */
      if update(NOBK) or
         update(UNITKEY)
      begin
         if (select count(*)
             from   BKSPJ t1, inserted t2
             where  t1.NOBK = t2.NOBK
              and   t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKSPJ" does not exist. Cannot modify child in "BKSPJDET".'
               goto error
            end
      end
      /*  Parent "MATANGNRC" must exist when updating a child in "BKSPJDET"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGNRC t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGNRC" does not exist. Cannot modify child in "BKSPJDET".'
               goto error
            end
      end
      /*  Parent "PERSACC" must exist when updating a child in "BKSPJDET"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "BKSPJDET".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKSPJDET] ENABLE TRIGGER [TU_BKSPJDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TD_BKTMEM] on [dbo].[BKTMEM] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "BKTMEM" if children still exist in "RBMDETD"  */
    if exists (select 1
               from   RBMDETD t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBM = t1.NOBM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RBMDETD". Cannot delete parent "BKTMEM".'
          goto error
       end

    /*  Cannot delete parent "BKTMEM" if children still exist in "RBMDETB"  */
    if exists (select 1
               from   RBMDETB t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBM = t1.NOBM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RBMDETB". Cannot delete parent "BKTMEM".'
          goto error
       end

    /*  Cannot delete parent "BKTMEM" if children still exist in "RBMDETRTL"  */
    if exists (select 1
               from   RBMDETRTL t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBM = t1.NOBM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RBMDETRTL". Cannot delete parent "BKTMEM".'
          goto error
       end

    /*  Cannot delete parent "BKTMEM" if children still exist in "RBMDETR"  */
    if exists (select 1
               from   RBMDETR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBM = t1.NOBM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RBMDETR". Cannot delete parent "BKTMEM".'
          goto error
       end

    /*  Cannot delete parent "BKTMEM" if children still exist in "RBMDETN"  */
    if exists (select 1
               from   RBMDETN t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBM = t1.NOBM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RBMDETN". Cannot delete parent "BKTMEM".'
          goto error
       end

    /*  Cannot delete parent "BKTMEM" if children still exist in "BKBM"  */
    if exists (select 1
               from   BKBM t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBM = t1.NOBM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKBM". Cannot delete parent "BKTMEM".'
          goto error
       end

	DECLARE @NOBKU VARCHAR(100), @UNITKEY VARCHAR(10)
    BEGIN 
		declare cjurnal cursor for
			SELECT I.NOBM, I.UNITKEY FROM DELETED I
		open cjurnal
		fetch next from cjurnal into @NOBKU, @UNITKEY
		while @@FETCH_STATUS=0
		begin	
			DELETE FROM jurnal WHERE nobkuskpd = @NOBKU AND unitkey = @UNITKEY  AND LTRIM(RTRIM(kdstatus)) IN (SELECT LTRIM(RTRIM(KDBM))  FROM JBM)--EDIT BY RE
			fetch next from cjurnal into @NOBKU, @UNITKEY
		end
		close cjurnal
		deallocate cjurnal
    END
    
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[BKTMEM] ENABLE TRIGGER [TD_BKTMEM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_BKTMEM] on [dbo].[BKTMEM] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "JBM" must exist when inserting a child in "BKTMEM"  */
    if update(KDBM)
    begin
       if (select count(*)
           from   JBM t1, inserted t2
           where  t1.KDBM = t2.KDBM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JBM". Cannot create child in "BKTMEM".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "BKTMEM"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "BKTMEM".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "BKTMEM"  */
    if update(IDXTTD)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  IDXTTD is null)
       if @numnull != @numrows
          if (select count(*)
              from   JABTTD t1, inserted t2
              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "BKTMEM".'
             goto error
          end
    end
	
	
    
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BKTMEM] ENABLE TRIGGER [TI_BKTMEM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TU_BKTMEM] on [dbo].[BKTMEM] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "JBM" must exist when updating a child in "BKTMEM"  */
      if update(KDBM)
      begin
         if (select count(*)
             from   JBM t1, inserted t2
             where  t1.KDBM = t2.KDBM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JBM" does not exist. Cannot modify child in "BKTMEM".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "BKTMEM"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "BKTMEM".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "BKTMEM"  */
      if update(IDXTTD)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  IDXTTD is null)
         if @numnull != @numrows
            if (select count(*)
                from   JABTTD t1, inserted t2
                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "BKTMEM".'
               goto error
            end
      end
      /*  Cannot modify parent code in "BKTMEM" if children still exist in "RBMDETD"  */
      if update(UNITKEY) or
         update(NOBM)
      begin
         if exists (select 1
                    from   RBMDETD t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBM = d1.NOBM
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBM != d1.NOBM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RBMDETD". Cannot modify parent code in "BKTMEM".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BKTMEM" if children still exist in "RBMDETB"  */
      if update(UNITKEY) or
         update(NOBM)
      begin
         if exists (select 1
                    from   RBMDETB t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBM = d1.NOBM
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBM != d1.NOBM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RBMDETB". Cannot modify parent code in "BKTMEM".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BKTMEM" if children still exist in "RBMDETRTL"  */
      if update(UNITKEY) or
         update(NOBM)
      begin
         if exists (select 1
                    from   RBMDETRTL t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBM = d1.NOBM
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBM != d1.NOBM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RBMDETRTL". Cannot modify parent code in "BKTMEM".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BKTMEM" if children still exist in "RBMDETR"  */
      if update(UNITKEY) or
         update(NOBM)
      begin
         if exists (select 1
                    from   RBMDETR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBM = d1.NOBM
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBM != d1.NOBM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RBMDETR". Cannot modify parent code in "BKTMEM".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BKTMEM" if children still exist in "RBMDETN"  */
      if update(UNITKEY) or
         update(NOBM)
      begin
         if exists (select 1
                    from   RBMDETN t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBM = d1.NOBM
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBM != d1.NOBM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RBMDETN". Cannot modify parent code in "BKTMEM".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BKTMEM" if children still exist in "BKBM"  */
      if update(UNITKEY) or
         update(NOBM)
      begin
         if exists (select 1
                    from   BKBM t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBM = d1.NOBM
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBM != d1.NOBM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKBM". Cannot modify parent code in "BKTMEM".'
               goto error
            END
            
            ----
      end
      DECLARE @NOBKU VARCHAR(100), @TABLENAME VARCHAR(20), @UNITKEY VARCHAR(10), @KDSTATUS VARCHAR(2), @IDXKODE INT, @TGLVALID DATETIME
      if update(VALIDBM)    
		BEGIN 
			declare cjurnal cursor for
				SELECT I.NOBM, 'BKTMEM' TABLENAME, I.UNITKEY, I.KDBM, 10 IDXKODE, I.VALIDBM from INSERTED I --INNER JOIN TBP T ON T.UNITKEY = I.UNITKEY AND T.NOTBP = I.NOTBP 
			open cjurnal
			fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE, @TGLVALID
			while @@FETCH_STATUS=0
			begin	
				IF @TGLVALID IS NOT NULL
				BEGIN
					exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
					UPDATE jurnal SET tgl_valid = @TGLVALID  WHERE unitkey = @UNITKEY AND  JBKU='5' AND NOBUKTI = @NOBKU 
				END
				ELSE
				BEGIN
					--DEL
					DELETE FROM jurnal WHERE unitkey = @UNITKEY AND  JBKU='5' AND NOBUKTI = @NOBKU  
				END				
				fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE,@TGLVALID
			end
			close cjurnal
			deallocate cjurnal
		END 
      
      /*
      
      declare @unitkey char(10), @nobkuskpd varchar(30),@tglvalid datetime
      begin
		declare cjurnal cursor for
			select unitkey,NOBM,VALIDBM from inserted
		open cjurnal
		fetch next from cjurnal into @unitkey,@nobkuskpd,@tglvalid
		while @@FETCH_STATUS=0
		BEGIN 	
			UPDATE jurnal SET tgl_valid = @tglvalid WHERE unitkey = @unitkey AND nobkuskpd = @nobkuskpd
			FETCH NEXT FROM cjurnal INTO @unitkey,@nobkuskpd,@tglvalid
		END 
		CLOSE  cjurnal
		DEALLOCATE cjurnal
      END
      
      
      
      
      
      */
      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[BKTMEM] ENABLE TRIGGER [TU_BKTMEM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE trigger [dbo].[TI_BKUBANK] on [dbo].[BKUBANK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "BKUBANK"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "BKUBANK".'
             goto error
          end
    end
    /*  Parent "BKBANK" must exist when inserting a child in "BKUBANK"  */
    if update(UNITKEY) or
       update(NOBUKU)
    begin
       if (select count(*)
           from   BKBANK t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBUKU = t2.NOBUKU) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKBANK". Cannot create child in "BKUBANK".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "BKUBANK"  */
    if update(KEYBEND)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "BKUBANK".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "BKUBANK"  */
--    if update(IDXTTD)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "BKUBANK".'
--             goto error
--          end
--    end

    

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end



GO
ALTER TABLE [dbo].[BKUBANK] ENABLE TRIGGER [TI_BKUBANK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TU_BKUBANK] on [dbo].[BKUBANK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "BKUBANK"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "BKUBANK".'
               goto error
            end
      end
      /*  Parent "BKBANK" must exist when updating a child in "BKUBANK"  */
      if update(UNITKEY) or
         update(NOBUKU)
      begin
         if (select count(*)
             from   BKBANK t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOBUKU = t2.NOBUKU) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKBANK" does not exist. Cannot modify child in "BKUBANK".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "BKUBANK"  */
      if update(KEYBEND)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "BKUBANK".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "BKUBANK"  */
--      if update(IDXTTD)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDXTTD is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   JABTTD t1, inserted t2
--                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "BKUBANK".'
--               goto error
--            end
--      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end


GO
ALTER TABLE [dbo].[BKUBANK] ENABLE TRIGGER [TU_BKUBANK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE trigger [dbo].[TI_BKUBPK] on [dbo].[BKUBPK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "BKUBPK"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "BKUBPK".'
             goto error
          end
    end
    /*  Parent "BPK" must exist when inserting a child in "BKUBPK"  */
    if update(UNITKEY) or
       update(NOBPK)
    begin
       if (select count(*)
           from   BPK t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBPK = t2.NOBPK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BPK". Cannot create child in "BKUBPK".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "BKUBPK"  */
    if update(KEYBEND)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "BKUBPK".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "BKUBPK"  */
--    if update(IDXTTD)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "BKUBPK".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end



GO
ALTER TABLE [dbo].[BKUBPK] ENABLE TRIGGER [TI_BKUBPK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE trigger [dbo].[TU_BKUBPK] on [dbo].[BKUBPK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "BKUBPK"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "BKUBPK".'
               goto error
            end
      end
      /*  Parent "BPK" must exist when updating a child in "BKUBPK"  */
      if update(UNITKEY) or
         update(NOBPK)
      begin
         if (select count(*)
             from   BPK t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOBPK = t2.NOBPK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BPK" does not exist. Cannot modify child in "BKUBPK".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "BKUBPK"  */
      if update(KEYBEND)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "BKUBPK".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "BKUBPK"  */
--      if update(IDXTTD)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDXTTD is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   JABTTD t1, inserted t2
--                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "BKUBPK".'
--               goto error
--            end
--      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end



GO
ALTER TABLE [dbo].[BKUBPK] ENABLE TRIGGER [TU_BKUBPK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TD_BKUD] on [dbo].[BKUD] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    DECLARE @NOBKU VARCHAR(100), @UNITKEY VARCHAR(10), @NOSTS VARCHAR(100), @KDSTATUS VARCHAR(100)
    SET @UNITKEY = (SELECT p.CONFIGVAL FROM PEMDA p WHERE p.CONFIGID = 'cur_skpkd')
    BEGIN 
		declare cjurnal cursor for
			SELECT I.NOBUKAS,I.NOSTS,B.KDSTATUS FROM DELETED I INNER JOIN STS B ON I.UNITKEY=B.UNITKEY AND I.NOSTS=B.NOSTS
		open cjurnal
		fetch next from cjurnal into @NOBKU,@NOSTS,@KDSTATUS
		while @@FETCH_STATUS=0
		begin	
			DELETE FROM jurnal WHERE NOBKUSKPD=@NOBKU AND unitkey IN (SELECT p.CONFIGVAL FROM PEMDA p WHERE p.CONFIGID = 'cur_skpkd') AND NOBUKTI=@NOSTS  AND kdstatus=@KDSTATUS
			fetch next from cjurnal into  @NOBKU, @NOSTS,@KDSTATUS
		end
		close cjurnal
		deallocate cjurnal
	END


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[BKUD] ENABLE TRIGGER [TD_BKUD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TI_BKUD] on [dbo].[BKUD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "STS" must exist when inserting a child in "BKUD"  */
    if update(UNITKEY) or
       update(NOSTS)
    begin
       if (select count(*)
           from   STS t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSTS = t2.NOSTS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STS". Cannot create child in "BKUD".'
             goto error
          end
    end
    /*  Parent "BKBKAS" must exist when inserting a child in "BKUD"  */
    if update(NOBBANTU)
    begin
       if (select count(*)
           from   BKBKAS t1, inserted t2
           where  t1.NOBBANTU = t2.NOBBANTU) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKBKAS". Cannot create child in "BKUD".'
             goto error
          end
    end
    /*  Parent "JBKAS" must exist when inserting a child in "BKUD"  */
    if update(KDBUKTI)
    begin
       if (select count(*)
           from   JBKAS t1, inserted t2
           where  t1.KDBUKTI = t2.KDBUKTI) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JBKAS". Cannot create child in "BKUD".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "BKUD"  */
    if update(IDXTTD)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  IDXTTD is null)
       if @numnull != @numrows
          if (select count(*)
              from   JABTTD t1, inserted t2
              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "BKUD".'
             goto error
          end
    end
	DECLARE @NOBKU VARCHAR(100), @TABLENAME VARCHAR(20), @UNITKEY VARCHAR(10), @KDSTATUS VARCHAR(2), @IDXKODE INT
	
    BEGIN 
		declare cjurnal cursor for
			SELECT I.NOBUKAS, 'BKUD' TABLENAME, I.UNITKEY, T.KDSTATUS, T.IDXKODE from INSERTED I INNER JOIN STS T ON T.UNITKEY = I.UNITKEY AND T.NOSTS = I.NOSTS 
		open cjurnal
		fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
		while @@FETCH_STATUS=0
		begin	
			----exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
			IF  @UNITKEY <> (SELECT p.CONFIGVAL FROM PEMDA p WHERE p.CONFIGID = 'cur_skpkd')
			BEGIN
				exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE	
			END			
			fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
		end
		close cjurnal
		deallocate cjurnal
	END
    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[BKUD] ENABLE TRIGGER [TI_BKUD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE trigger [dbo].[TU_BKUD] on [dbo].[BKUD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "STS" must exist when updating a child in "BKUD"  */
      if update(UNITKEY) or
         update(NOSTS)
      begin
         if (select count(*)
             from   STS t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSTS = t2.NOSTS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STS" does not exist. Cannot modify child in "BKUD".'
               goto error
            end
      end
      /*  Parent "BKBKAS" must exist when updating a child in "BKUD"  */
      if update(NOBBANTU)
      begin
         if (select count(*)
             from   BKBKAS t1, inserted t2
             where  t1.NOBBANTU = t2.NOBBANTU) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKBKAS" does not exist. Cannot modify child in "BKUD".'
               goto error
            end
      end
      /*  Parent "JBKAS" must exist when updating a child in "BKUD"  */
      if update(KDBUKTI)
      begin
         if (select count(*)
             from   JBKAS t1, inserted t2
             where  t1.KDBUKTI = t2.KDBUKTI) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JBKAS" does not exist. Cannot modify child in "BKUD".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "BKUD"  */
      if update(IDXTTD)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  IDXTTD is null)
         if @numnull != @numrows
            if (select count(*)
                from   JABTTD t1, inserted t2
                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "BKUD".'
               goto error
            end
      END
      
      if update(tglvalid)
      declare @unitkey char(10), @nobkuskpd varchar(30),@tglvalid DATETIME,@NOSTS_BKUD VARCHAR(100)
       SET @UNITKEY = (SELECT CONFIGVAL FROM PEMDA  WHERE CONFIGID = 'cur_skpkd')--UPDATE RE 13 JAN 2014
      begin
		declare cjurnal cursor for
			select unitkey,NOBUKAS,tglvalid,NOSTS from inserted
		open cjurnal
		fetch next from cjurnal into @unitkey,@nobkuskpd,@tglvalid,@NOSTS_BKUD
		while @@FETCH_STATUS=0
		begin	
			
			IF @TGLVALID IS NOT NULL
			BEGIN
				
				if exists 
					(
						select 1
							from   
							(
								SELECT UNITKEY, KD_BULAN,NOSTS FROM
								(
										SELECT UNITKEY, KD_BULAN, @NOSTS_BKUD NOSTS FROM LAPORSAH  WHERE UNITKEY=@unitkey  
										
								) A	
							) t2,   inserted i1, deleted d1
							where  t2.UNITKEY = d1.UNITKEY
							and   t2.NOSTS = d1.NOSTS AND MONTH(D1.TGLVALID) <=  KD_BULAN
					)
					BEGIN
							
							select @errno  = 50005,
							@errmsg =  'JURNAL SUDAH DIKUNCI DI PENGESAHAN LAPORAN PEMBUKUAN'
							goto error

							
					END
					ELSE
					BEGIN
							UPDATE jurnal SET tgl_valid = @tglvalid WHERE LTRIM(RTRIM(UNITKEY)) IN (SELECT LTRIM(RTRIM(CONFIGVAL)) FROM PEMDA  
							WHERE CONFIGID = 'cur_skpkd') AND NOBUKTI = @NOSTS_BKUD--UPDATE RE 13 JAN 2014
							

					END	
				
				
			END 
			ELSE
			IF @TGLVALID IS  NULL
			BEGIN
					
					if exists 
						(
							select 1
								from   
								(
									SELECT * FROM BKUSTS WHERE UNITKEY=@unitkey AND NOSTS=@NOSTS_BKUD
								) t2,   deleted d1
								where  t2.UNITKEY = d1.UNITKEY
								and   t2.NOSTS = d1.NOSTS 
								AND MONTH(D1.TGLVALID)<=(SELECT KD_BULAN
														   FROM LAPORSAH WHERE UNITKEY=@unitkey)
						)
					BEGIN
								select @errno  = 50005,
								@errmsg =  'JURNAL TIDAK DAPAT DIHAPUS SUDAH DIKUNCI DI PENGESAHAN LAPORAN PEMBUKUAN'
								goto error
								
					END	ELSE
					BEGIN
								UPDATE jurnal SET tgl_valid = @tglvalid WHERE LTRIM(RTRIM(UNITKEY)) IN (SELECT LTRIM(RTRIM(CONFIGVAL)) FROM PEMDA  
								WHERE CONFIGID = 'cur_skpkd') AND NOBUKTI = @NOSTS_BKUD--UPDATE RE 13 JAN 2014
							
					END	
					
			END	
			
			
			
			
			
			------UPDATE jurnal SET tgl_valid = @tglvalid WHERE LTRIM(RTRIM(UNITKEY)) IN (SELECT LTRIM(RTRIM(CONFIGVAL)) FROM PEMDA  WHERE CONFIGID = 'cur_skpkd') AND nobkuskpd = @nobkuskpd--UPDATE RE 13 JAN 2014
			fetch next from cjurnal into @unitkey,@nobkuskpd,@tglvalid,@NOSTS_BKUD
		end
		close cjurnal
		deallocate cjurnal
      END
      
      IF UPDATE (TGLKAS)
      BEGIN
      	DECLARE @NOBKU VARCHAR(100), @TABLENAME VARCHAR(20),@NOSTS VARCHAR(100), @UNITKEYBKUD VARCHAR(10), @KDSTATUS VARCHAR(2), @IDXKODE INT
      	declare cjurnal cursor for
			SELECT I.NOBUKAS, 'BKUD' TABLENAME,I.NOSTS, I.UNITKEY, T.KDSTATUS, T.IDXKODE from INSERTED I INNER JOIN STS T ON T.UNITKEY = I.UNITKEY AND T.NOSTS = I.NOSTS 
		open cjurnal
		fetch next from cjurnal into @NOBKU, @TABLENAME,@NOSTS, @UNITKEYBKUD, @KDSTATUS, @IDXKODE
		while @@FETCH_STATUS=0
		BEGIN
			
				
			--------DELETE FROM JURNAL WHERE  NOBUKTI=@NOSTS AND UNITKEY=(SELECT p.CONFIGVAL FROM PEMDA p WHERE p.CONFIGID = 'cur_skpkd') 
			--------exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEYBKUD, @KDSTATUS, @IDXKODE
			
			--IF @KDSTATUS <> '16' AND @UNITKEYBKUD <> (SELECT p.CONFIGVAL FROM PEMDA p WHERE p.CONFIGID = 'cur_skpkd')
			IF @IDXKODE<>'5'
			BEGIN
				DELETE FROM JURNAL WHERE  NOBUKTI=@NOSTS AND UNITKEY=(SELECT p.CONFIGVAL FROM PEMDA p WHERE p.CONFIGID = 'cur_skpkd') and nobkuskpd=@NOBKU
				exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEYBKUD, @KDSTATUS, @IDXKODE	
			END	
			
					
			fetch next from cjurnal into @NOBKU, @TABLENAME,@NOSTS, @UNITKEYBKUD, @KDSTATUS, @IDXKODE
		end
		close cjurnal
		deallocate cjurnal
      	
      END
      
      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end





GO
ALTER TABLE [dbo].[BKUD] ENABLE TRIGGER [TU_BKUD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[TD_BKUK] on [dbo].[BKUK] FOR DELETE AS 
BEGIN 
    DECLARE 
       @numrows  INT,
       @errno    INT,
       @errmsg   VARCHAR(255)


    
    /*  Cannot delete parent "SP2D" if children still exist in "BKUK"  */
    
    ----if exists (select 1
    ----           from   BKUSP2D t2, deleted t1
    ----           where  t2.UNITKEY = t1.UNITKEY
    ----            and   t2.NOSP2D = t1.NOSP2D)
    ----   begin
    ----      select @errno  = 50006,
    ----             @errmsg = 'Children still exist in "BKUSP2D". Cannot delete parent "BKUK".'
    ----      goto error
    ----   end


    SELECT @numrows = @@rowcount
    DECLARE @NOBKU VARCHAR(100), @UNITKEY VARCHAR(10)
    SET @UNITKEY = (SELECT p.CONFIGVAL FROM PEMDA p WHERE p.CONFIGID = 'cur_skpkd')----- BY RE 19 JAN 2014
    BEGIN 
		DECLARE cjurnal CURSOR FOR 
		SELECT I.NOBUKAS FROM DELETED I
		OPEN cjurnal
		FETCH NEXT FROM cjurnal INTO  @NOBKU
		WHILE @@FETCH_STATUS=0
		BEGIN 	
			DELETE FROM jurnal WHERE nobkuskpd = @NOBKU AND unitkey = @UNITKEY AND kdstatus IN ('21','22','23','24','25')----- BY RE 19 JAN 2014
			FETCH NEXT FROM cjurnal INTO @NOBKU
		END 
		CLOSE cjurnal
		DEALLOCATE cjurnal
    END


    RETURN 

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[BKUK] ENABLE TRIGGER [TD_BKUK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_BKUK] on [dbo].[BKUK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "SP2D" must exist when inserting a child in "BKUK"  */
    if update(UNITKEY) or
       update(NOSP2D)
    begin
       if (select count(*)
           from   SP2D t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSP2D = t2.NOSP2D) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SP2D". Cannot create child in "BKUK".'
             goto error
          end
    end
    /*  Parent "BKBKAS" must exist when inserting a child in "BKUK"  */
    if update(NOBBANTU)
    begin
       if (select count(*)
           from   BKBKAS t1, inserted t2
           where  t1.NOBBANTU = t2.NOBBANTU) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKBKAS". Cannot create child in "BKUK".'
             goto error
          end
    end
    /*  Parent "JBKAS" must exist when inserting a child in "BKUK"  */
    if update(KDBUKTI)
    begin
       if (select count(*)
           from   JBKAS t1, inserted t2
           where  t1.KDBUKTI = t2.KDBUKTI) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JBKAS". Cannot create child in "BKUK".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "BKUK"  */
    if update(IDXTTD)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  IDXTTD is null)
       if @numnull != @numrows
          if (select count(*)
              from   JABTTD t1, inserted t2
              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "BKUK".'
             goto error
          end
    end
	DECLARE @NOBKU VARCHAR(100), @TABLENAME VARCHAR(20), @UNITKEY VARCHAR(10), @KDSTATUS VARCHAR(2), @IDXKODE INT
    BEGIN 
		declare cjurnal cursor for
			SELECT I.NOBUKAS, 'BKUK' TABLENAME, I.UNITKEY, T.KDSTATUS, T.IDXKODE from INSERTED I INNER JOIN SP2D T ON T.UNITKEY = I.UNITKEY AND T.NOSP2D = I.NOSP2D 
		open cjurnal
		fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
		while @@FETCH_STATUS=0
		begin	
			exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
			exec WSP_JURNAL_R6 @NOBKU, 'BKUPOTSP2D', @UNITKEY, @KDSTATUS, @IDXKODE			
			fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
		end
		close cjurnal
		deallocate cjurnal
	END
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end


GO
ALTER TABLE [dbo].[BKUK] ENABLE TRIGGER [TI_BKUK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TU_BKUK] on [dbo].[BKUK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "SP2D" must exist when updating a child in "BKUK"  */
      if update(UNITKEY) or
         update(NOSP2D)
      begin
         if (select count(*)
             from   SP2D t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSP2D = t2.NOSP2D) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SP2D" does not exist. Cannot modify child in "BKUK".'
               goto error
            end
      end
      /*  Parent "BKBKAS" must exist when updating a child in "BKUK"  */
      if update(NOBBANTU)
      begin
         if (select count(*)
             from   BKBKAS t1, inserted t2
             where  t1.NOBBANTU = t2.NOBBANTU) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKBKAS" does not exist. Cannot modify child in "BKUK".'
               goto error
            end
      end
      /*  Parent "JBKAS" must exist when updating a child in "BKUK"  */
      if update(KDBUKTI)
      begin
         if (select count(*)
             from   JBKAS t1, inserted t2
             where  t1.KDBUKTI = t2.KDBUKTI) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JBKAS" does not exist. Cannot modify child in "BKUK".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "BKUK"  */
      if update(IDXTTD)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  IDXTTD is null)
         if @numnull != @numrows
            if (select count(*)
                from   JABTTD t1, inserted t2
                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "BKUK".'
               goto error
            end
      END
      
      if update(tglvalid)
      declare @unitkey char(10), @nobkuskpd varchar(100), @NOSP2D varchar(100),@tglvalid DATETIME
       SET @UNITKEY = (SELECT p.CONFIGVAL FROM PEMDA p WHERE p.CONFIGID = 'cur_skpkd')----- BY RE 19 JAN 2014
      begin
		declare cjurnal cursor for
			select unitkey,NOSP2D, tglvalid from inserted
		open cjurnal
		fetch next from cjurnal into @unitkey,@nobkuskpd,  @tglvalid
		while @@FETCH_STATUS=0
		begin	
			UPDATE jurnal SET tgl_valid = @tglvalid WHERE LTRIM(RTRIM(UNITKEY)) IN (SELECT LTRIM(RTRIM(CONFIGVAL)) FROM PEMDA  WHERE CONFIGID = 'cur_skpkd')    
			AND NOBUKTI = @nobkuskpd  AND kdstatus IN ('21','22','23','24')----- BY RE 19 JAN 2014
			fetch next from cjurnal into @unitkey,@nobkuskpd, @tglvalid
		end
		close cjurnal
		deallocate cjurnal
      END
      
      IF UPDATE(TGLKAS)
      BEGIN 
      DECLARE @NOBKU VARCHAR(100), @TABLENAME VARCHAR(20),@NOSP2DBKUK VARCHAR(100), @UNITKEYBKUK VARCHAR(10), @KDSTATUS VARCHAR(2), @IDXKODE INT
      
      declare cjurnal cursor for
			SELECT I.NOBUKAS, 'BKUK' TABLENAME,T.NOSP2D, I.UNITKEY, T.KDSTATUS, T.IDXKODE from INSERTED I INNER JOIN SP2D T ON T.UNITKEY = I.UNITKEY AND T.NOSP2D = I.NOSP2D 
		open cjurnal
		fetch next from cjurnal into @NOBKU, @TABLENAME,@NOSP2DBKUK, @UNITKEYBKUK, @KDSTATUS, @IDXKODE
		while @@FETCH_STATUS=0
		begin	
			DELETE FROM jurnal WHERE NOBUKTI = @NOSP2DBKUK AND UNITKEY = (SELECT p.CONFIGVAL FROM PEMDA p WHERE p.CONFIGID = 'cur_skpkd') AND kdstatus IN ('21','22','23','24')
			
			exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEYBKUK, @KDSTATUS, @IDXKODE
			exec WSP_JURNAL_R6 @NOBKU, 'BKUPOTSP2D', @UNITKEYBKUK, @KDSTATUS, @IDXKODE			
			fetch next from cjurnal into @NOBKU, @TABLENAME, @NOSP2DBKUK,@UNITKEYBKUK, @KDSTATUS, @IDXKODE
		end
		close cjurnal
		deallocate cjurnal
      END 	
      
      
      
      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end


GO
ALTER TABLE [dbo].[BKUK] ENABLE TRIGGER [TU_BKUK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TI_BKUPAJAK] on [dbo].[BKUPAJAK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "BKUPAJAK"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "BKUPAJAK".'
             goto error
          end
    end
    /*  Parent "BKPAJAK" must exist when inserting a child in "BKUPAJAK"  */
    if update(UNITKEY) or
       update(NOBKPAJAK)
    begin
       if (select count(*)
           from   BKPAJAK t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBKPAJAK = t2.NOBKPAJAK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKPAJAK". Cannot create child in "BKUPAJAK".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "BKUPAJAK"  */
    if update(KEYBEND)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "BKUPAJAK".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "BKUPAJAK"  */
--    if update(IDXTTD)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "BKUPAJAK".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[BKUPAJAK] ENABLE TRIGGER [TI_BKUPAJAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TU_BKUPAJAK] on [dbo].[BKUPAJAK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "BKUPAJAK"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "BKUPAJAK".'
               goto error
            end
      end
      /*  Parent "BKPAJAK" must exist when updating a child in "BKUPAJAK"  */
      if update(UNITKEY) or
         update(NOBKPAJAK)
      begin
         if (select count(*)
             from   BKPAJAK t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOBKPAJAK = t2.NOBKPAJAK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKPAJAK" does not exist. Cannot modify child in "BKUPAJAK".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "BKUPAJAK"  */
      if update(KEYBEND)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "BKUPAJAK".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "BKUPAJAK"  */
--      if update(IDXTTD)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDXTTD is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   JABTTD t1, inserted t2
--                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "BKUPAJAK".'
--               goto error
--            end
--      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[BKUPAJAK] ENABLE TRIGGER [TU_BKUPAJAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TI_BKUPANJAR] on [dbo].[BKUPANJAR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "BKUPANJAR"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "BKUPANJAR".'
             goto error
          end
    end
    /*  Parent "PANJAR" must exist when inserting a child in "BKUPANJAR"  */
    if update(UNITKEY) or
       update(NOPANJAR)
    begin
       if (select count(*)
           from   PANJAR t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOPANJAR = t2.NOPANJAR) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PANJAR". Cannot create child in "BKUPANJAR".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "BKUPANJAR"  */
    if update(KEYBEND)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "BKUPANJAR".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "BKUPANJAR"  */
--    if update(IDXTTD)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "BKUPANJAR".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end


GO
ALTER TABLE [dbo].[BKUPANJAR] ENABLE TRIGGER [TI_BKUPANJAR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TU_BKUPANJAR] on [dbo].[BKUPANJAR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "BKUPANJAR"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "BKUPANJAR".'
               goto error
            end
      end
      /*  Parent "PANJAR" must exist when updating a child in "BKUPANJAR"  */
      if update(UNITKEY) or
         update(NOPANJAR)
      begin
         if (select count(*)
             from   PANJAR t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOPANJAR = t2.NOPANJAR) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PANJAR" does not exist. Cannot modify child in "BKUPANJAR".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "BKUPANJAR"  */
      if update(KEYBEND)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "BKUPANJAR".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "BKUPANJAR"  */
--      if update(IDXTTD)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDXTTD is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   JABTTD t1, inserted t2
--                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "BKUPANJAR".'
--               goto error
--            end
--      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end


GO
ALTER TABLE [dbo].[BKUPANJAR] ENABLE TRIGGER [TU_BKUPANJAR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TD_BKUSP2D] on [dbo].[BKUSP2D] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "BKUSP2D" if children still exist in "BKRKK"  */
    if exists (select 1
               from   BKRKK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBKUSKPD = t1.NOBKUSKPD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKRKK". Cannot delete parent "BKUSP2D".'
          goto error
       end
      /*  Cannot delete parent "BKUSP2D" if children still exist in "BKUK"  */
    --if exists (select 1
    --           from   BKUK t2, deleted t1
    --           where  t2.UNITKEY = t1.UNITKEY
    --            and   t2.NOSP2D = t1.NOSP2D)
    --   begin
    --      select @errno  = 50006,
    --             @errmsg = 'Children still exist in "BKUK". Cannot delete parent "BKUSP2D".'
    --      goto error
    --   end

	DECLARE @NOBKU VARCHAR(100), @UNITKEY VARCHAR(10)
    BEGIN 
		declare cjurnal cursor for
			SELECT I.NOBKUSKPD, I.UNITKEY FROM DELETED I
		open cjurnal
		fetch next from cjurnal into @NOBKU, @UNITKEY
		while @@FETCH_STATUS=0
		begin	
			DELETE FROM jurnal WHERE nobkuskpd = @NOBKU AND unitkey = @UNITKEY
			fetch next from cjurnal into @NOBKU, @UNITKEY
		end
		close cjurnal
		deallocate cjurnal
    END
    
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end



GO
ALTER TABLE [dbo].[BKUSP2D] ENABLE TRIGGER [TD_BKUSP2D]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_BKUSP2D] on [dbo].[BKUSP2D] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "BKUSP2D"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "BKUSP2D".'
             goto error
          end
    end
    /*  Parent "SP2D" must exist when inserting a child in "BKUSP2D"  */
    if update(UNITKEY) or
       update(NOSP2D)
    begin
       if (select count(*)
           from   SP2D t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSP2D = t2.NOSP2D) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SP2D". Cannot create child in "BKUSP2D".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "BKUSP2D"  */
    if update(KEYBEND)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "BKUSP2D".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "BKUSP2D"  */
--    if update(IDXTTD)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "BKUSP2D".'
--             goto error
--          end
--    end
	DECLARE @NOBKU VARCHAR(100), @TABLENAME VARCHAR(20), @UNITKEY VARCHAR(10), @KDSTATUS VARCHAR(2), @IDXKODE INT
    BEGIN 
		declare cjurnal cursor for
			SELECT I.NOBKUSKPD, 'BKUSP2D' TABLENAME, I.UNITKEY, T.KDSTATUS, T.IDXKODE from INSERTED I INNER JOIN SP2D T ON T.UNITKEY = I.UNITKEY AND T.NOSP2D = I.NOSP2D 
		open cjurnal
		fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
		while @@FETCH_STATUS=0
		begin	
			exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
			fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
		end
		close cjurnal
		deallocate cjurnal
	END
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end


GO
ALTER TABLE [dbo].[BKUSP2D] ENABLE TRIGGER [TI_BKUSP2D]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TU_BKUSP2D] on [dbo].[BKUSP2D] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return
/*
PIC RE 28 MEI 2014
PIC RE 04 JUNI 2014   TAMBAH       IF UPDATE(TGLBKUSKPD)

*/

      /*  Parent "DAFTUNIT" must exist when updating a child in "BKUSP2D"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "BKUSP2D".'
               goto error
            end
      end
      /*  Parent "SP2D" must exist when updating a child in "BKUSP2D"  */
      if update(UNITKEY) or
         update(NOSP2D)
      begin
         if (select count(*)
             from   SP2D t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSP2D = t2.NOSP2D) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SP2D" does not exist. Cannot modify child in "BKUSP2D".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "BKUSP2D"  */
      if update(KEYBEND)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "BKUSP2D".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "BKUSP2D"  */
--      if update(IDXTTD)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDXTTD is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   JABTTD t1, inserted t2
--                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "BKUSP2D".'
--               goto error
--            end
--      end
      /*  Cannot modify parent code in "BKUSP2D" if children still exist in "BKRKK"  */
      if update(UNITKEY) or
         update(NOBKUSKPD)
      begin
         if exists (select 1
                    from   BKRKK t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBKUSKPD = d1.NOBKUSKPD
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBKUSKPD != d1.NOBKUSKPD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKRKK". Cannot modify parent code in "BKUSP2D".'
               goto error
            end
      end

     if update(tglvalid)
     
      BEGIN
       declare @unitkey char(10), @nobkuskpd varchar(30),@tglvalid datetime	
		declare cjurnal cursor for
			select unitkey,NOSP2D,tglvalid from inserted
		open cjurnal
		fetch next from cjurnal into @unitkey,@nobkuskpd,@tglvalid
		while @@FETCH_STATUS=0
		begin	
			UPDATE jurnal SET tgl_valid = @tglvalid WHERE unitkey = @unitkey AND NOBUKTI = @nobkuskpd AND kdstatus IN ('21','22','23','24')
			fetch next from cjurnal into @unitkey,@nobkuskpd,@tglvalid
		end
		close cjurnal
		deallocate cjurnal
      END
      
      IF UPDATE(TGLBKUSKPD)
      
	  BEGIN 
	  DECLARE @NOBKU VARCHAR(100), @TABLENAME VARCHAR(20), @UNITKEYBKUSP2D VARCHAR(10), @KDSTATUS VARCHAR(2), @IDXKODE INT	
		declare cjurnal cursor for
			SELECT I.NOBKUSKPD, 'BKUSP2D' TABLENAME, I.UNITKEY, T.KDSTATUS, T.IDXKODE from INSERTED I INNER JOIN SP2D T ON T.UNITKEY = I.UNITKEY AND T.NOSP2D = I.NOSP2D 
		open cjurnal
		fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEYBKUSP2D, @KDSTATUS, @IDXKODE
		while @@FETCH_STATUS=0
		begin	
			DELETE FROM jurnal WHERE nobkuskpd = @NOBKU AND unitkey = @UNITKEYBKUSP2D AND kdstatus IN ('21','22','23','24')
			
			exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEYBKUSP2D, @KDSTATUS, @IDXKODE
			----------UPDATE jurnal SET tgl_valid = @tglvalid WHERE unitkey = @unitkey AND nobkuskpd = @nobkuskpd AND kdstatus IN ('21','22','23','24')
			
			fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEYBKUSP2D, @KDSTATUS, @IDXKODE
		end
		close cjurnal
		deallocate cjurnal
	   END


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end




GO
ALTER TABLE [dbo].[BKUSP2D] ENABLE TRIGGER [TU_BKUSP2D]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TD_BKUSTS] on [dbo].[BKUSTS] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "BKUSTS" if children still exist in "BKRKM"  */
    if exists (select 1
               from   BKRKM t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBKUSKPD = t1.NOBKUSKPD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKRKM". Cannot delete parent "BKUSTS".'
          goto error
       END
       
	DECLARE @NOBKU VARCHAR(100), @UNITKEY VARCHAR(10)
    BEGIN 
		declare cjurnal cursor for
			SELECT I.NOBKUSKPD, I.UNITKEY FROM DELETED I
		open cjurnal
		fetch next from cjurnal into @NOBKU, @UNITKEY
		while @@FETCH_STATUS=0
		begin	
			DELETE FROM jurnal WHERE nobkuskpd = @NOBKU AND unitkey = @UNITKEY
			fetch next from cjurnal into @NOBKU, @UNITKEY
		end
		close cjurnal
		deallocate cjurnal
	END

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[BKUSTS] ENABLE TRIGGER [TD_BKUSTS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE trigger [dbo].[TI_BKUSTS] on [dbo].[BKUSTS] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "BKUSTS"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "BKUSTS".'
             goto error
          end
    end
    /*  Parent "STS" must exist when inserting a child in "BKUSTS"  */
    if update(UNITKEY) or
       update(NOSTS)
    begin
       if (select count(*)
           from   STS t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSTS = t2.NOSTS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STS". Cannot create child in "BKUSTS".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "BKUSTS"  */
    if update(KEYBEND)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "BKUSTS".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "BKUSTS"  */
--    if update(IDXTTD)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "BKUSTS".'
--             goto error
--          end
--    end
	DECLARE @NOBKU VARCHAR(100), @TABLENAME VARCHAR(20), @UNITKEY VARCHAR(10), @KDSTATUS VARCHAR(2), @IDXKODE INT
    BEGIN 
		declare cjurnal cursor for
			SELECT I.NOBKUSKPD, 'BKUSTS' TABLENAME, I.UNITKEY, T.KDSTATUS, T.IDXKODE from INSERTED I INNER JOIN STS T ON T.UNITKEY = I.UNITKEY AND T.NOSTS = I.NOSTS 
		open cjurnal
		fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
		while @@FETCH_STATUS=0
		begin	
			exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
			fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
		end
		close cjurnal
		deallocate cjurnal
	END
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end



GO
ALTER TABLE [dbo].[BKUSTS] ENABLE TRIGGER [TI_BKUSTS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*

PIC RE 04 JUNI 2014   

*/



CREATE trigger [dbo].[TU_BKUSTS] on [dbo].[BKUSTS] for update as
BEGIN
/*
PIC RE 28 MEI 2014
*/
	
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "BKUSTS"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "BKUSTS".'
               goto error
            end
      end
      /*  Parent "STS" must exist when updating a child in "BKUSTS"  */
      if update(UNITKEY) or
         update(NOSTS)
      begin
         if (select count(*)
             from   STS t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSTS = t2.NOSTS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STS" does not exist. Cannot modify child in "BKUSTS".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "BKUSTS"  */
      if update(KEYBEND)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "BKUSTS".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "BKUSTS"  */
--      if update(IDXTTD)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDXTTD is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   JABTTD t1, inserted t2
--                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "BKUSTS".'
--               goto error
--            end
--      end
      /*  Cannot modify parent code in "BKUSTS" if children still exist in "BKRKM"  */
      if update(UNITKEY) or
         update(NOBKUSKPD)
      begin
         if exists (select 1
                    from   BKRKM t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBKUSKPD = d1.NOBKUSKPD
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBKUSKPD != d1.NOBKUSKPD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKRKM". Cannot modify parent code in "BKUSTS".'
               goto error
            end
      END
      
      
      if update(tglvalid)
		
      BEGIN
      	declare @unitkey char(10), @nobkuskpd varchar(30),@tglvalid datetime, @KDSTATUSSTS VARCHAR(10)
			declare cjurnal cursor for
			select A.unitkey,nobkuskpd,A.tglvalid,B.KDSTATUS from INSERTED A INNER JOIN STS B ON A.UNITKEY=B.UNITKEY AND A.NOSTS=B.NOSTS
			open cjurnal
			fetch next from cjurnal into @unitkey,@nobkuskpd,@tglvalid,@KDSTATUSSTS
			while @@FETCH_STATUS=0
			begin	
				UPDATE jurnal SET tgl_valid = @tglvalid WHERE unitkey = @unitkey AND nobkuskpd = @nobkuskpd AND kdstatus=@KDSTATUSSTS
				fetch next from cjurnal into @unitkey,@nobkuskpd,@tglvalid,@KDSTATUSSTS
			end
			close cjurnal
			deallocate cjurnal
			
			
      END
      if UPDATE(TGLBKUSKPD)
	  
	  BEGIN 
	  DECLARE @NOBKU VARCHAR(100), @TABLENAME VARCHAR(20), @UNITKEYSTS VARCHAR(10), @KDSTATUS VARCHAR(10), @IDXKODE INT	
		declare cjurnal2 cursor for
			SELECT I.NOBKUSKPD, 'BKUSTS' TABLENAME, I.UNITKEY, T.KDSTATUS, T.IDXKODE from INSERTED I INNER JOIN STS T ON T.UNITKEY = I.UNITKEY AND T.NOSTS = I.NOSTS 
		open cjurnal2
		fetch next from cjurnal2 into @NOBKU, @TABLENAME, @UNITKEYSTS, @KDSTATUS, @IDXKODE
		while @@FETCH_STATUS=0
		begin	

			
			DELETE FROM jurnal WHERE nobkuskpd = @NOBKU AND unitkey = @UNITKEYSTS AND kdstatus=@KDSTATUS
			exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEYSTS, @KDSTATUS, @IDXKODE
			----------UPDATE jurnal SET tgl_valid = @tglvalid WHERE unitkey = @unitkey AND nobkuskpd = @nobkuskpd
			fetch next from cjurnal2 into @NOBKU, @TABLENAME, @UNITKEYSTS, @KDSTATUS, @IDXKODE
		end
		close cjurnal2
		deallocate cjurnal2
	END
      
      
      
      
      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end




GO
ALTER TABLE [dbo].[BKUSTS] ENABLE TRIGGER [TU_BKUSTS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TD_BKUTBP] on [dbo].[BKUTBP] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    DECLARE @NOBKU VARCHAR(100), @NOTBP VARCHAR(100), @UNITKEY VARCHAR(10), @KDSTATUS VARCHAR(10)
    BEGIN 
		declare cjurnal cursor for
			SELECT I.NOBKUSKPD,T.NOTBP, I.UNITKEY,T.KDSTATUS FROM DELETED  I INNER JOIN TBP T ON T.UNITKEY = I.UNITKEY AND T.NOTBP = I.NOTBP WHERE T.IDXKODE<>'6'
		open cjurnal
		fetch next from cjurnal into @NOBKU,@NOTBP, @UNITKEY,@KDSTATUS
		while @@FETCH_STATUS=0
		begin	
			DELETE FROM jurnal WHERE NOBUKTI = @NOTBP AND UNITKEY = @UNITKEY AND KDSTATUS=@KDSTATUS
			fetch next from cjurnal into @NOBKU,@NOTBP, @UNITKEY,@KDSTATUS
		end
		close cjurnal
		deallocate cjurnal
	END


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[BKUTBP] ENABLE TRIGGER [TD_BKUTBP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE trigger [dbo].[TI_BKUTBP] on [dbo].[BKUTBP] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "BKUTBP"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "BKUTBP".'
             goto error
          end
    end
    /*  Parent "TBP" must exist when inserting a child in "BKUTBP"  */
    if update(UNITKEY) or
       update(NOTBP)
    begin
       if (select count(*)
           from   TBP t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOTBP = t2.NOTBP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TBP". Cannot create child in "BKUTBP".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "BKUTBP"  */
    if update(KEYBEND)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "BKUTBP".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "BKUTBP"  */
--    if update(IDXTTD)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "BKUTBP".'
--             goto error
--          end
--    end
	DECLARE @NOBKU VARCHAR(100), @TABLENAME VARCHAR(20), @UNITKEY VARCHAR(10), @KDSTATUS VARCHAR(2), @IDXKODE INT
    BEGIN 
		declare cjurnal cursor for
			SELECT I.NOBKUSKPD, 'BKUTBP' TABLENAME, I.UNITKEY, T.KDSTATUS, T.IDXKODE from INSERTED I INNER JOIN TBP T ON T.UNITKEY = I.UNITKEY AND T.NOTBP = I.NOTBP WHERE T.IDXKODE<>'6'
		open cjurnal
		fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
		while @@FETCH_STATUS=0
		begin	

				exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
	
			fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
		end
		close cjurnal
		deallocate cjurnal
	END
	--EXEC WSP_JURNAL_R6 @NOBKUSKPD, '@TABLENAME', '@UNITKEY', '@KDSTATUS', '@IDXKODE'
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end




GO
ALTER TABLE [dbo].[BKUTBP] ENABLE TRIGGER [TI_BKUTBP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*

PIC RE 04 JUNI 2014   

*/


CREATE trigger [dbo].[TU_BKUTBP] on [dbo].[BKUTBP] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)
      

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "BKUTBP"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "BKUTBP".'
               goto error
            end
      end
      /*  Parent "TBP" must exist when updating a child in "BKUTBP"  */
      if update(UNITKEY) or
         update(NOTBP)
      begin
         if (select count(*)
             from   TBP t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOTBP = t2.NOTBP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TBP" does not exist. Cannot modify child in "BKUTBP".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "BKUTBP"  */
      if update(KEYBEND)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "BKUTBP".'
               goto error
            end
      end

      /*  Parent "JABTTD" must exist when updating a child in "BKUTBP"  */
--      if update(IDXTTD)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDXTTD is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   JABTTD t1, inserted t2
--                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "BKUTBP".'
--               goto error
--            end
--      end
	  if update(tglvalid)
      declare @unitkey char(10), @nobkuskpd varchar(100),@tglvalid datetime
      begin
		declare cjurnalTBP1 cursor for
			select I.unitkey,I.nobkuskpd,I.tglvalid from INSERTED I INNER JOIN TBP T ON T.UNITKEY = I.UNITKEY AND T.NOTBP = I.NOTBP WHERE T.IDXKODE<>'6'
		open cjurnalTBP1
		fetch next from cjurnalTBP1 into @unitkey,@nobkuskpd,@tglvalid
		while @@FETCH_STATUS=0
		begin	
			UPDATE jurnal SET tgl_valid = @tglvalid WHERE unitkey = @unitkey AND nobkuskpd = @nobkuskpd
			fetch next from cjurnalTBP1 into @unitkey,@nobkuskpd,@tglvalid
		end
		close cjurnalTBP1
		deallocate cjurnalTBP1
      END
      
      IF UPDATE (TGLBKUSKPD)
      BEGIN
      	DECLARE @NOBKU VARCHAR(100), @TABLENAME VARCHAR(20), @UNITKEYTBP VARCHAR(10), @KDSTATUS VARCHAR(2), @IDXKODE INT

		declare cjurnal cursor for
			SELECT I.NOBKUSKPD, 'BKUTBP' TABLENAME, I.UNITKEY, T.KDSTATUS, T.IDXKODE from INSERTED I INNER JOIN TBP T ON T.UNITKEY = I.UNITKEY AND T.NOTBP = I.NOTBP WHERE T.IDXKODE<>'6'
		open cjurnal
		fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEYTBP, @KDSTATUS, @IDXKODE
		while @@FETCH_STATUS=0
		begin	
			DELETE FROM jurnal WHERE nobkuskpd = @NOBKU AND unitkey = @UNITKEYTBP and kdstatus=@KDSTATUS
			exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEYTBP, @KDSTATUS, @IDXKODE
			fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEYTBP, @KDSTATUS, @IDXKODE
		end
		close cjurnal
		deallocate cjurnal
	
      END
      
      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end





GO
ALTER TABLE [dbo].[BKUTBP] ENABLE TRIGGER [TU_BKUTBP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_BPK] on [dbo].[BPK] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return


------update
    /*  Cannot delete parent "BPK" if children still exist in "BPKPAJAK"  */
    if exists (select 1
               from   BPKPAJAK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBPK = t1.NOBPK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPKPAJAK". Cannot delete parent "BPK".'
          goto error
       end
------end update



    /*  Cannot delete parent "BPK" if children still exist in "BPKSPJ"  */
    if exists (select 1
               from   BPKSPJ t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBPK = t1.NOBPK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPKSPJ". Cannot delete parent "BPK".'
          goto error
       end

    /*  Cannot delete parent "BPK" if children still exist in "BPKDETD"  */
    if exists (select 1
               from   BPKDETD t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBPK = t1.NOBPK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPKDETD". Cannot delete parent "BPK".'
          goto error
       end

    /*  Cannot delete parent "BPK" if children still exist in "BPKDETB"  */
    if exists (select 1
               from   BPKDETB t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBPK = t1.NOBPK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPKDETB". Cannot delete parent "BPK".'
          goto error
       end

    /*  Cannot delete parent "BPK" if children still exist in "BPKDETRTL"  */
    if exists (select 1
               from   BPKDETRTL t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBPK = t1.NOBPK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPKDETRTL". Cannot delete parent "BPK".'
          goto error
       end

    /*  Cannot delete parent "BPK" if children still exist in "BPKDETR"  */
    if exists (select 1
               from   BPKDETR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBPK = t1.NOBPK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPKDETR". Cannot delete parent "BPK".'
          goto error
       end

    /*  Cannot delete parent "BPK" if children still exist in "BKUBPK"  */
    if exists (select 1
               from   BKUBPK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOBPK = t1.NOBPK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUBPK". Cannot delete parent "BPK".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BPK] ENABLE TRIGGER [TD_BPK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_BPK] on [dbo].[BPK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "BPK"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "BPK".'
             goto error
          end
    end
    /*  Parent "ZKODE" must exist when inserting a child in "BPK"  */
    if update(IDXKODE)
    begin
       if (select count(*)
           from   ZKODE t1, inserted t2
           where  t1.IDXKODE = t2.IDXKODE) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "ZKODE". Cannot create child in "BPK".'
             goto error
          end
    end
    /*  Parent "STATTRS" must exist when inserting a child in "BPK"  */
    if update(KDSTATUS)
    begin
       if (select count(*)
           from   STATTRS t1, inserted t2
           where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STATTRS". Cannot create child in "BPK".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "BPK"  */
    if update(KEYBEND)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "BPK".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BPK] ENABLE TRIGGER [TI_BPK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_BPK] on [dbo].[BPK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "BPK"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "BPK".'
               goto error
            end
      end
      /*  Parent "ZKODE" must exist when updating a child in "BPK"  */
      if update(IDXKODE)
      begin
         if (select count(*)
             from   ZKODE t1, inserted t2
             where  t1.IDXKODE = t2.IDXKODE) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ZKODE" does not exist. Cannot modify child in "BPK".'
               goto error
            end
      end
      /*  Parent "STATTRS" must exist when updating a child in "BPK"  */
      if update(KDSTATUS)
      begin
         if (select count(*)
             from   STATTRS t1, inserted t2
             where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STATTRS" does not exist. Cannot modify child in "BPK".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "BPK"  */
      if update(KEYBEND)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "BPK".'
               goto error
            end
      end
      /*  Cannot modify parent code in "BPK" if children still exist in "BPKSPJ"  */
      if update(UNITKEY) or
         update(NOBPK)
      begin
         if exists (select 1
                    from   BPKSPJ t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBPK = d1.NOBPK
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBPK != d1.NOBPK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPKSPJ". Cannot modify parent code in "BPK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BPK" if children still exist in "BPKDETD"  */
      if update(UNITKEY) or
         update(NOBPK)
      begin
         if exists (select 1
                    from   BPKDETD t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBPK = d1.NOBPK
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBPK != d1.NOBPK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPKDETD". Cannot modify parent code in "BPK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BPK" if children still exist in "BPKDETB"  */
      if update(UNITKEY) or
         update(NOBPK)
      begin
         if exists (select 1
                    from   BPKDETB t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBPK = d1.NOBPK
                     and  (i1.UNITKEY != d1.UNITKEY
     or   i1.NOBPK != d1.NOBPK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPKDETB". Cannot modify parent code in "BPK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BPK" if children still exist in "BPKDETRTL"  */
      if update(UNITKEY) or
         update(NOBPK)
      begin
         if exists (select 1
                    from   BPKDETRTL t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBPK = d1.NOBPK
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBPK != d1.NOBPK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPKDETRTL". Cannot modify parent code in "BPK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BPK" if children still exist in "BPKDETR"  */
      if update(UNITKEY) or
         update(NOBPK)
      begin
         if exists (select 1
                    from   BPKDETR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBPK = d1.NOBPK
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBPK != d1.NOBPK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPKDETR". Cannot modify parent code in "BPK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BPK" if children still exist in "BKUBPK"  */
      if update(UNITKEY) or
         update(NOBPK)
      begin
         if exists (select 1
                    from   BKUBPK t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOBPK = d1.NOBPK
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOBPK != d1.NOBPK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUBPK". Cannot modify parent code in "BPK".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BPK] ENABLE TRIGGER [TU_BPK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_BPKDETB] on [dbo].[BPKDETB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGB" must exist when inserting a child in "BPKDETB"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGB". Cannot create child in "BPKDETB".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "BPKDETB"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "BPKDETB".'
             goto error
          end
    end
    /*  Parent "BPK" must exist when inserting a child in "BPKDETB"  */
    if update(UNITKEY) or
       update(NOBPK)
    begin
       if (select count(*)
           from   BPK t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBPK = t2.NOBPK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BPK". Cannot create child in "BPKDETB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BPKDETB] ENABLE TRIGGER [TI_BPKDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_BPKDETB] on [dbo].[BPKDETB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGB" must exist when updating a child in "BPKDETB"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGB" does not exist. Cannot modify child in "BPKDETB".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "BPKDETB"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "BPKDETB".'
               goto error
            end
      end
      /*  Parent "BPK" must exist when updating a child in "BPKDETB"  */
      if update(UNITKEY) or
         update(NOBPK)
      begin
         if (select count(*)
             from   BPK t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOBPK = t2.NOBPK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BPK" does not exist. Cannot modify child in "BPKDETB".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BPKDETB] ENABLE TRIGGER [TU_BPKDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TI_BPKDETD] on [dbo].[BPKDETD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGD" must exist when inserting a child in "BPKDETD"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGD". Cannot create child in "BPKDETD".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "BPKDETD"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "BPKDETD".'
             goto error
          end
    end
    /*  Parent "BPK" must exist when inserting a child in "BPKDETD"  */
    if update(UNITKEY) or
       update(NOBPK)
    begin
       if (select count(*)
           from   BPK t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBPK = t2.NOBPK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BPK". Cannot create child in "BPKDETD".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BPKDETD] ENABLE TRIGGER [TI_BPKDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_BPKDETD] on [dbo].[BPKDETD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGD" must exist when updating a child in "BPKDETD"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGD" does not exist. Cannot modify child in "BPKDETD".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "BPKDETD"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "BPKDETD".'
               goto error
            end
      end
      /*  Parent "BPK" must exist when updating a child in "BPKDETD"  */
      if update(UNITKEY) or
         update(NOBPK)
      begin
         if (select count(*)
             from   BPK t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOBPK = t2.NOBPK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BPK" does not exist. Cannot modify child in "BPKDETD".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BPKDETD] ENABLE TRIGGER [TU_BPKDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_BPKDETR] on [dbo].[BPKDETR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "BPKDETR"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "BPKDETR".'
             goto error
          end
    end
    /*  Parent "MKEGIATAN" must exist when inserting a child in "BPKDETR"  */
    if update(KDKEGUNIT)
    begin
       if (select count(*)
           from   MKEGIATAN t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "BPKDETR".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "BPKDETR"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "BPKDETR".'
             goto error
          end
    end
    /*  Parent "BPK" must exist when inserting a child in "BPKDETR"  */
    if update(UNITKEY) or
       update(NOBPK)
    begin
       if (select count(*)
           from   BPK t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBPK = t2.NOBPK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BPK". Cannot create child in "BPKDETR".'
             goto error
          end
    end
		DECLARE   @UNITKEYS CHAR(30), @NOBPKS VARCHAR(100),@KDKEGUNITS CHAR(50),@MTGKEYS CHAR(30)
    BEGIN 
		declare cjurnalZ cursor for
			SELECT I.UNITKEY,I.NOBPK,I.KDKEGUNIT,I.MTGKEY   from INSERTED I INNER JOIN BPK T ON T.UNITKEY = I.UNITKEY AND T.NOBPK = I.NOBPK 
		open cjurnalZ
		fetch next from cjurnalZ INTO @UNITKEYS  , @NOBPKS  ,@KDKEGUNITS ,@MTGKEYS 
		while @@FETCH_STATUS=0
		begin	

		INSERT INTO BPKDETRDANA ( UNITKEY   ,  NOBPK   ,KDKEGUNIT  , MTGKEY ,KDDANA,   NILAI)
		SELECT A.UNITKEY,A.NOBPK,A.KDKEGUNIT,A.MTGKEY,  A.KDDANA, 0 NILAI  FROM
		(
			 SELECT @UNITKEYS UNITKEY  , @NOBPKS NOBPK ,@KDKEGUNITS KDKEGUNIT ,@MTGKEYS MTGKEY,(select top 1 KDDANA from sbdanar) KDDANA
			 --where unitkey=@UNITKEYS and KDKEGUNIT=@KDKEGUNITS and MTGKEY=@MTGKEYS order by KDTAHAP DESC) KDDANA
			 ) A INNER JOIN BPKDETR B ON A.UNITKEY=B.UNITKEY AND A.KDKEGUNIT=B.KDKEGUNIT AND A.NOBPK=B.NOBPK AND A.MTGKEY=B.MTGKEY
		LEFT OUTER JOIN BPKDETRDANA C ON C.UNITKEY=A.UNITKEY   AND C.NOBPK=A.NOBPK AND C.KDKEGUNIT=A.KDKEGUNIT AND C.MTGKEY=A.MTGKEY AND C.KDDANA=A.KDDANA
		WHERE C.KDDANA IS NULL AND B.UNITKEY=@UNITKEYS   AND B.NOBPK=@NOBPKS AND B.KDKEGUNIT=@KDKEGUNITS AND B.MTGKEY=@MTGKEYS 
		and B.UNITKEY not in (select UNITKEY from DAFTUNIT where KDLEVEL='4')

		
		
			 	
			fetch next from cjurnalZ into @UNITKEYS  , @NOBPKS  ,@KDKEGUNITS ,@MTGKEYS 
		end
		close cjurnalZ
		deallocate cjurnalZ
	END

	declare @nobpk varchar(50), @unitkey varchar(10)
		set @nobpk = (select nobpk from inserted where UNITKEY not in (select UNITKEY from DAFTUNIT where KDLEVEL='4'))
		set @unitkey = (select unitkey from inserted where UNITKEY not in (select UNITKEY from DAFTUNIT where KDLEVEL='4'))
	   if dbo.GetValidBPKTU(@nobpk,@unitkey) > 0
	   begin
			select @errno  = 50003,
                      @errmsg = 'BPK" TU Total Nilai nya melebih "SP2D" TU. Cannot modify child in "BPKDETR".'
            goto error
	end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BPKDETR] ENABLE TRIGGER [TI_BPKDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_BPKDETR] on [dbo].[BPKDETR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "BPKDETR"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "BPKDETR".'
               goto error
            end
      end
      /*  Parent "MKEGIATAN" must exist when updating a child in "BPKDETR"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "BPKDETR".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "BPKDETR"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "BPKDETR".'
               goto error
            end
      end
      /*  Parent "BPK" must exist when updating a child in "BPKDETR"  */
      if update(UNITKEY) or
         update(NOBPK)
      begin
         if (select count(*)
             from   BPK t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOBPK = t2.NOBPK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BPK" does not exist. Cannot modify child in "BPKDETR".'
               goto error
            end
      end

		declare @nobpk varchar(50), @unitkey varchar(10)
		set @nobpk = (select nobpk from inserted)
		set @unitkey = (select unitkey from inserted)
	   if dbo.GetValidBPKTU(@nobpk,@unitkey) > 0
	   begin
			select @errno  = 50003,
                      @errmsg = 'BPK" TU Total Nilai nya melebih "SP2D" TU. Cannot modify child in "BPKDETR".'
            goto error
	   end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BPKDETR] ENABLE TRIGGER [TU_BPKDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_BPKDETRDANA] on [dbo].[BPKDETRDANA] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return


		DECLARE   @UNITKEYS CHAR(30), @NOBPKS VARCHAR(100),@KDKEGUNITS CHAR(50),@MTGKEYS CHAR(30),@KDDANA CHAR(20)
    BEGIN 
	  DECLARE @HIT INT
		declare cjurnalZA cursor for
			SELECT I.UNITKEY,I.NOBPK,I.KDKEGUNIT,I.MTGKEY ,I.KDDANA  from DELETED I
		open cjurnalZA
		fetch next from cjurnalZA INTO @UNITKEYS  , @NOBPKS  ,@KDKEGUNITS ,@MTGKEYS ,@KDDANA
		while @@FETCH_STATUS=0
		begin	

		  IF (SELECT COUNT(*) FROM BPKDETRDANA WHERE  UNITKEY=@UNITKEYS   AND  NOBPK=@NOBPKS AND  KDKEGUNIT=@KDKEGUNITS )=0
		  BEGIN
		 
			DELETE   FROM BPKDETR
			WHERE  UNITKEY=@UNITKEYS   AND  NOBPK=@NOBPKS AND  KDKEGUNIT=@KDKEGUNITS AND MTGKEY=@MTGKEYS
		  END 
		

			fetch next from cjurnalZA into @UNITKEYS  , @NOBPKS  ,@KDKEGUNITS ,@MTGKEYS ,@KDDANA
		end
		close cjurnalZA
		deallocate cjurnalZA
	END


    return

/*  Errors handling  */
error:
    raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BPKDETRDANA] ENABLE TRIGGER [TD_BPKDETRDANA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TI_BPKDETRTL] on [dbo].[BPKDETRTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "BPKDETRTL"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "BPKDETRTL".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "BPKDETRTL"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "BPKDETRTL".'
             goto error
          end
    end
    /*  Parent "BPK" must exist when inserting a child in "BPKDETRTL"  */
    if update(UNITKEY) or
       update(NOBPK)
    begin
       if (select count(*)
           from   BPK t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBPK = t2.NOBPK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BPK". Cannot create child in "BPKDETRTL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BPKDETRTL] ENABLE TRIGGER [TI_BPKDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_BPKDETRTL] on [dbo].[BPKDETRTL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "BPKDETRTL"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "BPKDETRTL".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "BPKDETRTL"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "BPKDETRTL".'
               goto error
            end
      end
      /*  Parent "BPK" must exist when updating a child in "BPKDETRTL"  */
      if update(UNITKEY) or
         update(NOBPK)
      begin
         if (select count(*)
             from   BPK t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOBPK = t2.NOBPK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BPK" does not exist. Cannot modify child in "BPKDETRTL".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BPKDETRTL] ENABLE TRIGGER [TU_BPKDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
*   update
*/
CREATE trigger [dbo].[TD_BPKPAJAK] on [dbo].[BPKPAJAK] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

/*
*     NO PAJAK YG SUDAH DITEMPEL DI BPKPAJAK TIDAK DPT DIHAPUS JIKA BPK TERSEBUT SUDAH DI SPJ SAH - KAN
*     
*/

--SELECT * FROM BPKPAJAK A INNER JOIN BPKSPJ b ON b.UNITKEY = A.UNITKEY AND b.NOBPK = A.NOBPK
--INNER JOIN PSPJ C ON C.UNITKEY = b.UNITKEY AND C.NOSPJ = b.NOSPJ
--INNER JOIN SPJSPP D ON D.UNITKEY = C.UNITKEY AND D.NOSPJ = C.NOSPJ
--INNER JOIN SPP E ON E.UNITKEY = D.UNITKEY AND E.NOSPP = D.NOSPP
--INNER JOIN DELETED T1 ON A.UNITKEY = T1.UNITKEY AND A.NOBKPAJAK = T1.NOBKPAJAK

    if exists (select 1
               FROM BPKPAJAK A INNER JOIN BPKSPJ b ON b.UNITKEY = A.UNITKEY AND b.NOBPK = A.NOBPK
				INNER JOIN PSPJ C ON C.UNITKEY = b.UNITKEY AND C.NOSPJ = b.NOSPJ
				INNER JOIN DELETED T1 ON A.UNITKEY = T1.UNITKEY AND A.NOBKPAJAK = T1.NOBKPAJAK 
                 WHERE C.TGLSAH IS NOT NULL)

       begin
          select @errno  = 50006,
                 @errmsg = 'DATA SUDAH DI SPJ SAH KAN . TIDAK DAPAT HAPUS DATA BPKPAJAK "BPKPAJAK".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BPKPAJAK] ENABLE TRIGGER [TD_BPKPAJAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
update
*/
CREATE trigger [dbo].[TI_BPKPAJAK] on [dbo].[BPKPAJAK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return


    /*  Parent "BPK" must exist when inserting a child in "BPKPAJAK"  */
    
    if update(UNITKEY) or
       update(NOBPK)
    begin
       if (select count(*)
           from   BPK t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBPK = t2.NOBPK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BPK". Cannot create child in "BPKPAJAK".'
             goto error
          end
    end

      
      if update(UNITKEY)
      begin
         if (select count(*)
             from   BPKPAJAK t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY  AND t1.NOBKPAJAK = t2.NOBKPAJAK AND t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg ='BPKPAJAK" DATA PAJAK  SUDAH DI LEKATKAN DI BPKPAJAK  "BPKPAJAK".'
               goto error
            end
      end 



    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BPKPAJAK] ENABLE TRIGGER [TI_BPKPAJAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TD_BPKSPJ] on [dbo].[BPKSPJ] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

DECLARE @NOTRANSBKUBPK VARCHAR(100), @UNITKEY VARCHAR(10)
    BEGIN 
		declare cjurnal cursor for
			SELECT I.NOBPK, I.UNITKEY FROM DELETED I
		open cjurnal
		fetch next from cjurnal into @NOTRANSBKUBPK, @UNITKEY
		while @@FETCH_STATUS=0
		begin	
			DELETE FROM BKUBPK WHERE NOBPK = @NOTRANSBKUBPK AND unitkey = @UNITKEY
			fetch next from cjurnal into @NOTRANSBKUBPK, @UNITKEY
		end
		close cjurnal
		deallocate cjurnal
	END


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[BPKSPJ] ENABLE TRIGGER [TD_BPKSPJ]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_BPKSPJ] on [dbo].[BPKSPJ] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "PSPJ" must exist when inserting a child in "BPKSPJ"  */
    if update(UNITKEY) or
       update(NOSPJ)
    begin
       if (select count(*)
           from   PSPJ t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPJ = t2.NOSPJ) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PSPJ". Cannot create child in "BPKSPJ".'
             goto error
          end
    end
    /*  Parent "BPK" must exist when inserting a child in "BPKSPJ"  */
    if update(UNITKEY) or
       update(NOBPK)
    begin
       if (select count(*)
           from   BPK t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBPK = t2.NOBPK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BPK". Cannot create child in "BPKSPJ".'
             goto error
          end
    END
    
    begin
	    declare @UNITKEY VARCHAR(50),@NOTRANS VARCHAR(100),@NMTABEL char (20),@TGLVALID DATETIME, @KEYBEND CHAR(20)
		declare CJURNAL1 cursor for
			select DISTINCT B.unitkey,B.NOBPK ,'BKUBPK' TABLENAME,B.tglvalid,B.KEYBEND  from INSERTED A INNER JOIN BPK B ON B.UNITKEY=A.UNITKEY AND B.NOBPK=A.NOBPK
		open CJURNAL1
		fetch next from CJURNAL1 into @unitkey,@NOTRANS,@NMTABEL,@tglvalid, @KEYBEND
		while @@FETCH_STATUS=0
		begin	

				exec wspsr_bku @unitkey,@NOTRANS,'BKUBPK',@tglvalid, @KEYBEND

			
					
			
			fetch next from CJURNAL1 into @unitkey,@NOTRANS,@NMTABEL,@tglvalid, @KEYBEND
		end
		close CJURNAL1
		deallocate CJURNAL1
      END

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BPKSPJ] ENABLE TRIGGER [TI_BPKSPJ]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_BPKSPJ] on [dbo].[BPKSPJ] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "PSPJ" must exist when updating a child in "BPKSPJ"  */
      if update(UNITKEY) or
         update(NOSPJ)
      begin
         if (select count(*)
             from   PSPJ t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPJ = t2.NOSPJ) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PSPJ" does not exist. Cannot modify child in "BPKSPJ".'
               goto error
            end
      end
      /*  Parent "BPK" must exist when updating a child in "BPKSPJ"  */
      if update(UNITKEY) or
         update(NOBPK)
      begin
         if (select count(*)
             from   BPK t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOBPK = t2.NOBPK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BPK" does not exist. Cannot modify child in "BPKSPJ".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BPKSPJ] ENABLE TRIGGER [TU_BPKSPJ]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TD_BULAN] on [dbo].[BULAN] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "BULAN" if children still exist in "RASKBLND"  */
    if exists (select 1
               from   RASKBLND t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKBLND". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "RASKBLNB"  */
    if exists (select 1
               from   RASKBLNB t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKBLNB". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "RASKBLNRTL"  */
    if exists (select 1
               from   RASKBLNRTL t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKBLNRTL". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "RASKBLNR"  */
    if exists (select 1
               from   RASKBLNR t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKBLNR". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "DASKBLND"  */
    if exists (select 1
               from   DASKBLND t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKBLND". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "DASKBLNB"  */
    if exists (select 1
               from   DASKBLNB t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKBLNB". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "DASKBLNRTL"  */
    if exists (select 1
               from   DASKBLNRTL t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKBLNRTL". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "DASKBLNR"  */
    if exists (select 1
               from   DASKBLNR t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKBLNR". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "SKO"  */
    if exists (select 1
               from   SKO t2, deleted t1
               where  t2.KD_BULAN2 = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKO". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "SKO"  */
    if exists (select 1
               from   SKO t2, deleted t1
               where  t2.KD_BULAN1 = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKO". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "SPP"  */
    if exists (select 1
               from   SPP t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPP". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "SALDOLRAR"  */
    if exists (select 1
               from   SALDOLRAR t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLRAR". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "SALDOLRARTL"  */
    if exists (select 1
               from   SALDOLRARTL t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLRARTL". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "SALDOLRAB"  */
    if exists (select 1
               from   SALDOLRAB t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLRAB". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "SALDOLRAD"  */
    if exists (select 1
               from   SALDOLRAD t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLRAD". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "KASKEG"  */
    if exists (select 1
               from   KASKEG t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KASKEG". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "SALDOLAKD"  */
    if exists (select 1
               from   SALDOLAKD t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLAKD". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "SALDOLAKB"  */
    if exists (select 1
               from   SALDOLAKB t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLAKB". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "SALDOLAKRTL"  */
    if exists (select 1
               from   SALDOLAKRTL t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLAKRTL". Cannot delete parent "BULAN".'
          goto error
       end

    /*  Cannot delete parent "BULAN" if children still exist in "SALDOLAKR"  */
    if exists (select 1
               from   SALDOLAKR t2, deleted t1
               where  t2.KD_BULAN = t1.KD_BULAN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLAKR". Cannot delete parent "BULAN".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BULAN] ENABLE TRIGGER [TD_BULAN]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TI_BULAN] on [dbo].[BULAN] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "PERIODE" must exist when inserting a child in "BULAN"  */
    if update(KDPERIODE)
    begin
       if (select count(*)
           from   PERIODE t1, inserted t2
           where  t1.KDPERIODE = t2.KDPERIODE) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERIODE". Cannot create child in "BULAN".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BULAN] ENABLE TRIGGER [TI_BULAN]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_BULAN] on [dbo].[BULAN] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "PERIODE" must exist when updating a child in "BULAN"  */
      if update(KDPERIODE)
      begin
         if (select count(*)
             from   PERIODE t1, inserted t2
             where  t1.KDPERIODE = t2.KDPERIODE) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERIODE" does not exist. Cannot modify child in "BULAN".'
               goto error
            end
      end
      /*  Cannot modify parent code in "BULAN" if children still exist in "RASKBLND"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   RASKBLND t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKBLND". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "RASKBLNB"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   RASKBLNB t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKBLNB". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "RASKBLNRTL"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   RASKBLNRTL t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKBLNRTL". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "RASKBLNR"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   RASKBLNR t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKBLNR". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "DASKBLND"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   DASKBLND t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKBLND". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "DASKBLNB"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   DASKBLNB t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKBLNB". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "DASKBLNRTL"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   DASKBLNRTL t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKBLNRTL". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "DASKBLNR"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   DASKBLNR t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKBLNR". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "SKO"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   SKO t2, inserted i1, deleted d1
                    where  t2.KD_BULAN2 = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKO". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "SKO"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   SKO t2, inserted i1, deleted d1
                    where  t2.KD_BULAN1 = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKO". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "SPP"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   SPP t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPP". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "SALDOLRAR"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   SALDOLRAR t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLRAR". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "SALDOLRARTL"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   SALDOLRARTL t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLRARTL". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "SALDOLRAB"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   SALDOLRAB t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLRAB". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "SALDOLRAD"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   SALDOLRAD t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLRAD". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "KASKEG"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   KASKEG t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "KASKEG". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "SALDOLAKD"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   SALDOLAKD t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLAKD". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "SALDOLAKB"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   SALDOLAKB t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLAKB". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "SALDOLAKRTL"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   SALDOLAKRTL t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLAKRTL". Cannot modify parent code in "BULAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "BULAN" if children still exist in "SALDOLAKR"  */
      if update(KD_BULAN)
      begin
         if exists (select 1
                    from   SALDOLAKR t2, inserted i1, deleted d1
                    where  t2.KD_BULAN = d1.KD_BULAN
                     and  (i1.KD_BULAN != d1.KD_BULAN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLAKR". Cannot modify parent code in "BULAN".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[BULAN] ENABLE TRIGGER [TU_BULAN]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TD_DAFTBANK] on [dbo].[DAFTBANK] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "DAFTBANK" if children still exist in "BEND"  */
    if exists (select 1
               from   BEND t2, deleted t1
               where  t2.KDBANK = t1.KDBANK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BEND". Cannot delete parent "DAFTBANK".'
          goto error
       end

    /*  Cannot delete parent "DAFTBANK" if children still exist in "BKBKAS"  */
    if exists (select 1
               from   BKBKAS t2, deleted t1
               where  t2.KDBANK = t1.KDBANK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKBKAS". Cannot delete parent "DAFTBANK".'
          goto error
       end


    return

/*  Errors handling  */
error:
   raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DAFTBANK] ENABLE TRIGGER [TD_DAFTBANK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_DAFTBANK] on [dbo].[DAFTBANK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "DAFTBANK" if children still exist in "BEND"  */
      if update(KDBANK)
      begin
         if exists (select 1
                    from   BEND t2, inserted i1, deleted d1
                    where  t2.KDBANK = d1.KDBANK
                     and  (i1.KDBANK != d1.KDBANK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BEND". Cannot modify parent code in "DAFTBANK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTBANK" if children still exist in "BKBKAS"  */
      if update(KDBANK)
      begin
         if exists (select 1
                    from   BKBKAS t2, inserted i1, deleted d1
                    where  t2.KDBANK = d1.KDBANK
                     and  (i1.KDBANK != d1.KDBANK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKBKAS". Cannot modify parent code in "DAFTBANK".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DAFTBANK] ENABLE TRIGGER [TU_DAFTBANK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TD_DAFTDOK] on [dbo].[DAFTDOK] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "DAFTDOK" if children still exist in "JABTTD"  */
    if exists (select 1
               from   JABTTD t2, deleted t1
               where  t2.KDDOK = t1.KDDOK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "JABTTD". Cannot delete parent "DAFTDOK".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DAFTDOK] ENABLE TRIGGER [TD_DAFTDOK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_DAFTDOK] on [dbo].[DAFTDOK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "DAFTDOK" if children still exist in "JABTTD"  */
      if update(KDDOK)
      begin
         if exists (select 1
                    from   JABTTD t2, inserted i1, deleted d1
                    where  t2.KDDOK = d1.KDDOK
                     and  (i1.KDDOK != d1.KDDOK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "JABTTD". Cannot modify parent code in "DAFTDOK".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DAFTDOK] ENABLE TRIGGER [TU_DAFTDOK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_DAFTPHK3] on [dbo].[DAFTPHK3] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return


--update

    /*  Cannot delete parent "DAFTPHK3" if children still exist in "KONTRAK"  */
    if exists (select 1
               from   KONTRAK t2, deleted t1
               where  t2.KDP3 = t1.KDP3)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KONTRAK". Cannot delete parent "DAFTPHK3".'
          goto error
       end

--------end update



    /*  Cannot delete parent "DAFTPHK3" if children still exist in "SPP"  */
    if exists (select 1
               from   SPP t2, deleted t1
               where  t2.KDP3 = t1.KDP3)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPP". Cannot delete parent "DAFTPHK3".'
          goto error
       end

    /*  Cannot delete parent "DAFTPHK3" if children still exist in "ANTARBYR"  */
    if exists (select 1
               from   ANTARBYR t2, deleted t1
               where  t2.KDP3 = t1.KDP3)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "ANTARBYR". Cannot delete parent "DAFTPHK3".'
          goto error
       end

    /*  Cannot delete parent "DAFTPHK3" if children still exist in "SP2D"  */
    if exists (select 1
               from   SP2D t2, deleted t1
               where  t2.KDP3 = t1.KDP3)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2D". Cannot delete parent "DAFTPHK3".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DAFTPHK3] ENABLE TRIGGER [TD_DAFTPHK3]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_DAFTPHK3] on [dbo].[DAFTPHK3] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "DAFTPHK3" if children still exist in "SPP"  */
      if update(KDP3)
      begin
         if exists (select 1
                    from   SPP t2, inserted i1, deleted d1
                    where  t2.KDP3 = d1.KDP3
                     and  (i1.KDP3 != d1.KDP3))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPP". Cannot modify parent code in "DAFTPHK3".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTPHK3" if children still exist in "ANTARBYR"  */
      if update(KDP3)
      begin
         if exists (select 1
                    from   ANTARBYR t2, inserted i1, deleted d1
                    where  t2.KDP3 = d1.KDP3
                     and  (i1.KDP3 != d1.KDP3))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "ANTARBYR". Cannot modify parent code in "DAFTPHK3".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTPHK3" if children still exist in "SP2D"  */
      if update(KDP3)
      begin
         if exists (select 1
                    from   SP2D t2, inserted i1, deleted d1
                    where  t2.KDP3 = d1.KDP3
                     and  (i1.KDP3 != d1.KDP3))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2D". Cannot modify parent code in "DAFTPHK3".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DAFTPHK3] ENABLE TRIGGER [TU_DAFTPHK3]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_DAFTUNIT] on [dbo].[DAFTUNIT] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "MTGDUNIT"  */
    if exists (select 1
               from   MTGDUNIT t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MTGDUNIT". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "PEGAWAI"  */
    if exists (select 1
               from   PEGAWAI t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PEGAWAI". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "TTAPD"  */
    if exists (select 1
               from   TTAPD t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TTAPD". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "DASKUM"  */
    if exists (select 1
               from   DASKUM t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKUM". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "BEND"  */
    if exists (select 1
               from   BEND t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BEND". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "ATASBEND"  */
    if exists (select 1
               from   ATASBEND t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "ATASBEND". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "JABTTD"  */
    if exists (select 1
               from   JABTTD t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "JABTTD". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "FUNGSINIT"  */
    if exists (select 1
               from   FUNGSINIT t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "FUNGSINIT". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "URUSANUNIT"  */
    if exists (select 1
               from   URUSANUNIT t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "URUSANUNIT". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "URUSANUNIT"  */
    if exists (select 1
               from   URUSANUNIT t2, deleted t1
               where  t2.URUSKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "URUSANUNIT". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "BKBKAS"  */
    if exists (select 1
               from   BKBKAS t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKBKAS". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "MPGRM"  */
    if exists (select 1
               from   MPGRM t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MPGRM". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "PGRMUNIT"  */
    if exists (select 1
               from   PGRMUNIT t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PGRMUNIT". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "PROFILUNIT"  */
    if exists (select 1
               from   PROFILUNIT t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PROFILUNIT". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "KINKEG"  */
    if exists (select 1
               from   KINKEG t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KINKEG". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "RASKR"  */
    if exists (select 1
               from   RASKR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKR". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "RASKD"  */
    if exists (select 1
               from   RASKD t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKD". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "RASKRTL"  */
    if exists (select 1
               from   RASKRTL t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKRTL". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "RASKB"  */
    if exists (select 1
               from   RASKB t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKB". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "SKDASK"  */
    if exists (select 1
               from   SKDASK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKDASK". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "SKORDET"  */
    if exists (select 1
               from   SKORDET t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKORDET". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "SKORTLDET"  */
    if exists (select 1
               from   SKORTLDET t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKORTLDET". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "SKOBDET"  */
    if exists (select 1
               from   SKOBDET t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKOBDET". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "SKODDET"  */
    if exists (select 1
               from   SKODDET t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKODDET". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "SPP"  */
    if exists (select 1
               from   SPP t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPP". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "PSPJ"  */
    if exists (select 1
               from   PSPJ t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PSPJ". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "ANTARBYR"  */
    if exists (select 1
               from   ANTARBYR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "ANTARBYR". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "SP2D"  */
    if exists (select 1
               from   SP2D t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2D". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "STS"  */
    if exists (select 1
               from   STS t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "STS". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "TBP"  */
    if exists (select 1
               from   TBP t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBP". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "BPK"  */
    if exists (select 1
               from   BPK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPK". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "BKTMEM"  */
    if exists (select 1
               from   BKTMEM t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKTMEM". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "SALDOAWAL"  */
    if exists (select 1
               from   SALDOAWAL t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOAWAL". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "SALDOAKHIR"  */
    if exists (select 1
               from   SALDOAKHIR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOAKHIR". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "SALDOLRAR"  */
    if exists (select 1
               from   SALDOLRAR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLRAR". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "SALDOLRARTL"  */
    if exists (select 1
               from   SALDOLRARTL t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLRARTL". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "SALDOLRAB"  */
    if exists (select 1
               from   SALDOLRAB t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLRAB". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "SALDOLRAD"  */
    if exists (select 1
               from   SALDOLRAD t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLRAD". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "PANJAR"  */
    if exists (select 1
               from   PANJAR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PANJAR". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "BKBANK"  */
    if exists (select 1
               from   BKBANK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKBANK". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "BKPAJAK"  */
    if exists (select 1
               from   BKPAJAK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKPAJAK". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "WEBUSER"  */
    if exists (select 1
               from   WEBUSER t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "WEBUSER". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "PPK"  */
    if exists (select 1
               from   PPK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PPK". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "KASKEG"  */
    if exists (select 1
               from   KASKEG t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KASKEG". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "SBDANAKEG"  */
    if exists (select 1
               from   SBDANAKEG t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SBDANAKEG". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "BKUBPK"  */
    if exists (select 1
               from   BKUBPK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUBPK". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "BKUPAJAK"  */
    if exists (select 1
               from   BKUPAJAK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUPAJAK". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "BKUPANJAR"  */
    if exists (select 1
               from   BKUPANJAR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUPANJAR". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "BKUBANK"  */
    if exists (select 1
               from   BKUBANK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUBANK". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "BKUSP2D"  */
    if exists (select 1
               from   BKUSP2D t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUSP2D". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "BKUSTS"  */
    if exists (select 1
               from   BKUSTS t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUSTS". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "BKUTBP"  */
    if exists (select 1
               from   BKUTBP t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUTBP". Cannot delete parent "DAFTUNIT".'
          goto error
       end

    /*  Cannot delete parent "DAFTUNIT" if children still exist in "KELOLAUNIT"  */
    if exists (select 1
               from   KELOLAUNIT t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KELOLAUNIT". Cannot delete parent "DAFTUNIT".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end






set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
ALTER TABLE [dbo].[DAFTUNIT] ENABLE TRIGGER [TD_DAFTUNIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_DAFTUNIT] on [dbo].[DAFTUNIT] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "STRUUNIT" must exist when inserting a child in "DAFTUNIT"  */
    if update(KDLEVEL)
    begin
       if (select count(*)
           from   STRUUNIT t1, inserted t2
           where  t1.KDLEVEL = t2.KDLEVEL) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STRUUNIT". Cannot create child in "DAFTUNIT".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DAFTUNIT] ENABLE TRIGGER [TI_DAFTUNIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_DAFTUNIT] on [dbo].[DAFTUNIT] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "STRUUNIT" must exist when updating a child in "DAFTUNIT"  */
      if update(KDLEVEL)
      begin
         if (select count(*)
             from   STRUUNIT t1, inserted t2
             where  t1.KDLEVEL = t2.KDLEVEL) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STRUUNIT" does not exist. Cannot modify child in "DAFTUNIT".'
               goto error
            end
      end
      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "MTGDUNIT"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   MTGDUNIT t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MTGDUNIT". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "PEGAWAI"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   PEGAWAI t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PEGAWAI". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "TTAPD"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   TTAPD t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TTAPD". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "DASKUM"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   DASKUM t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKUM". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "BEND"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   BEND t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BEND". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "ATASBEND"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   ATASBEND t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "ATASBEND". Cannot modify parent code in "DAFTUNIT".'
             goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "JABTTD"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   JABTTD t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "JABTTD". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "FUNGSINIT"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   FUNGSINIT t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "FUNGSINIT". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "URUSANUNIT"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   URUSANUNIT t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "URUSANUNIT". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "URUSANUNIT"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   URUSANUNIT t2, inserted i1, deleted d1
                    where  t2.URUSKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "URUSANUNIT". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "BKBKAS"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   BKBKAS t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKBKAS". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "MPGRM"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   MPGRM t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MPGRM". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "PGRMUNIT"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   PGRMUNIT t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PGRMUNIT". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

     /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "PROFILUNIT"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   PROFILUNIT t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PROFILUNIT". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "KINKEG"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   KINKEG t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "KINKEG". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "RASKR"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   RASKR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKR". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "RASKD"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   RASKD t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKD". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "RASKRTL"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   RASKRTL t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKRTL". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "RASKB"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   RASKB t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKB". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "SKDASK"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   SKDASK t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKDASK". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "SKORDET"  */
      if update(UNITKEY)
     begin
         if exists (select 1
                    from   SKORDET t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKORDET". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "SKORTLDET"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   SKORTLDET t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKORTLDET". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "SKOBDET"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   SKOBDET t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKOBDET". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "SKODDET"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   SKODDET t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKODDET". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "SPP"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   SPP t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPP". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "PSPJ"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   PSPJ t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PSPJ". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "ANTARBYR"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   ANTARBYR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "ANTARBYR". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "SP2D"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   SP2D t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2D". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "STS"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   STS t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "STS". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "TBP"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   TBP t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBP". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "BPK"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   BPK t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPK". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "BKTMEM"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   BKTMEM t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKTMEM". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "SALDOAWAL"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   SALDOAWAL t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOAWAL". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "SALDOAKHIR"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   SALDOAKHIR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOAKHIR". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "SALDOLRAR"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   SALDOLRAR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
          begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLRAR". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "SALDOLRARTL"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   SALDOLRARTL t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLRARTL". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "SALDOLRAB"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   SALDOLRAB t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLRAB". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "SALDOLRAD"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   SALDOLRAD t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLRAD". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "PANJAR"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   PANJAR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PANJAR". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "BKBANK"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   BKBANK t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKBANK". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "BKPAJAK"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   BKPAJAK t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKPAJAK". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "WEBUSER"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   WEBUSER t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
            @errmsg = 'Children still exist in "WEBUSER". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "PPK"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   PPK t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PPK". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "KASKEG"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   KASKEG t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "KASKEG". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "SBDANAKEG"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   SBDANAKEG t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SBDANAKEG". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "BKUBPK"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   BKUBPK t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUBPK". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "BKUPAJAK"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   BKUPAJAK t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUPAJAK". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "BKUPANJAR"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   BKUPANJAR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUPANJAR". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "BKUBANK"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   BKUBANK t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUBANK". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "BKUSP2D"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   BKUSP2D t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUSP2D". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "BKUSTS"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   BKUSTS t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUSTS". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "BKUTBP"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   BKUTBP t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUTBP". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DAFTUNIT" if children still exist in "KELOLAUNIT"  */
      if update(UNITKEY)
      begin
         if exists (select 1
                    from   KELOLAUNIT t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and  (i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "KELOLAUNIT". Cannot modify parent code in "DAFTUNIT".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
	    rollback  transaction
end
GO
ALTER TABLE [dbo].[DAFTUNIT] ENABLE TRIGGER [TU_DAFTUNIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_DASKB] on [dbo].[DASKB] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "DASKB" if children still exist in "DASKBLNB"  */
    if exists (select 1
               from   DASKBLNB t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.MTGKEY = t1.MTGKEY
                and   t2.IDXDASK = t1.IDXDASK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKBLNB". Cannot delete parent "DASKB".'
          goto error
       end

    /*  Cannot delete parent "DASKB" if children still exist in "DASKDETB"  */
    if exists (select 1
               from   DASKDETB t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.MTGKEY = t1.MTGKEY
                and   t2.IDXDASK = t1.IDXDASK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKDETB". Cannot delete parent "DASKB".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKB] ENABLE TRIGGER [TD_DASKB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_DASKB] on [dbo].[DASKB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGB" must exist when inserting a child in "DASKB"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGB". Cannot create child in "DASKB".'
             goto error
          end
    end
    /*  Parent "SKDASK" must exist when inserting a child in "DASKB"  */
    if update(UNITKEY) or
       update(IDXDASK)
    begin
       if (select count(*)
           from   SKDASK t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.IDXDASK = t2.IDXDASK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SKDASK". Cannot create child in "DASKB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKB] ENABLE TRIGGER [TI_DASKB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_DASKB] on [dbo].[DASKB] for update as
begin
   declare
      @ins_MTGKEY char(10),
      @ins_UNITKEY char(10),
      @ins_IDXDASK char(10),
      @del_MTGKEY char(10),
      @del_UNITKEY char(10),
      @del_IDXDASK char(10),
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGB" must exist when updating a child in "DASKB"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGB" does not exist. Cannot modify child in "DASKB".'
               goto error
            end
      end
      /*  Parent "SKDASK" must exist when updating a child in "DASKB"  */
      if update(UNITKEY) or
         update(IDXDASK)
      begin
         if (select count(*)
             from   SKDASK t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.IDXDASK = t2.IDXDASK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SKDASK" does not exist. Cannot modify child in "DASKB".'
               goto error
            end
      end
      declare cIns cursor local for select 
              MTGKEY,
              UNITKEY,
              IDXDASK
          from inserted
      declare cDel cursor local for select 
              MTGKEY,
              UNITKEY,
              IDXDASK
          from deleted

      /*  Modify parent code of "DASKB" for all children in "DASKBLNB"  */
      if update(MTGKEY) or
         update(UNITKEY) or
         update(IDXDASK)
      begin
         if @@rowcount = 1
            update DASKBLNB
               set   UNITKEY = i1.UNITKEY,
                     MTGKEY = i1.MTGKEY,
                     IDXDASK = i1.IDXDASK
            from   DASKBLNB t2, inserted i1, deleted d1
               where  t2.UNITKEY = d1.UNITKEY
                and   t2.MTGKEY = d1.MTGKEY
                and   t2.IDXDASK = d1.IDXDASK
                and  (i1.UNITKEY != d1.UNITKEY or
                      i1.MTGKEY != d1.MTGKEY or
                      i1.IDXDASK != d1.IDXDASK)
         else
         begin
            open cIns
            open cDel
            fetch cIns into @ins_MTGKEY,
                            @ins_UNITKEY,
                            @ins_IDXDASK
            fetch cDel into @del_MTGKEY,
                            @del_UNITKEY,
                            @del_IDXDASK

            while (@@fetch_status = 0)
            begin
               update DASKBLNB
                  set   UNITKEY = @ins_UNITKEY,
                        MTGKEY = @ins_MTGKEY,
                        IDXDASK = @ins_IDXDASK
               where  UNITKEY = @del_UNITKEY
                and   MTGKEY = @del_MTGKEY
                and   IDXDASK = @del_IDXDASK
               fetch cIns into @ins_MTGKEY,
                               @ins_UNITKEY,
                               @ins_IDXDASK
               fetch cDel into @del_MTGKEY,
                               @del_UNITKEY,
                               @del_IDXDASK
            end
            close cIns
            close cDel
         end
      end
      /*  Modify parent code of "DASKB" for all children in "DASKDETB"  */
      if update(MTGKEY) or
         update(UNITKEY) or
         update(IDXDASK)
      begin
         if @@rowcount = 1
            update DASKDETB
               set   UNITKEY = i1.UNITKEY,
                     MTGKEY = i1.MTGKEY,
                     IDXDASK = i1.IDXDASK
            from   DASKDETB t2, inserted i1, deleted d1
               where  t2.UNITKEY = d1.UNITKEY
                and   t2.MTGKEY = d1.MTGKEY
                and   t2.IDXDASK = d1.IDXDASK
                and  (i1.UNITKEY != d1.UNITKEY or
                      i1.MTGKEY != d1.MTGKEY or
                      i1.IDXDASK != d1.IDXDASK)
         else
         begin
            open cIns
            open cDel
            fetch cIns into @ins_MTGKEY,
                            @ins_UNITKEY,
                            @ins_IDXDASK
            fetch cDel into @del_MTGKEY,
                            @del_UNITKEY,
                            @del_IDXDASK

            while (@@fetch_status = 0)
            begin
               update DASKDETB
                  set   UNITKEY = @ins_UNITKEY,
                        MTGKEY = @ins_MTGKEY,
                        IDXDASK = @ins_IDXDASK
               where  UNITKEY = @del_UNITKEY
                and   MTGKEY = @del_MTGKEY
                and   IDXDASK = @del_IDXDASK
               fetch cIns into @ins_MTGKEY,
                               @ins_UNITKEY,
                               @ins_IDXDASK
               fetch cDel into @del_MTGKEY,
                               @del_UNITKEY,
                               @del_IDXDASK
            end
            close cIns
            close cDel
         end
      end

      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKB] ENABLE TRIGGER [TU_DASKB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_DASKBLNB] on [dbo].[DASKBLNB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DASKB" must exist when inserting a child in "DASKBLNB"  */
    if update(UNITKEY) or
       update(MTGKEY) or
       update(IDXDASK)
    begin
       if (select count(*)
           from   DASKB t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.MTGKEY = t2.MTGKEY
            and   t1.IDXDASK = t2.IDXDASK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DASKB". Cannot create child in "DASKBLNB".'
             goto error
          end
    end
    /*  Parent "BULAN" must exist when inserting a child in "DASKBLNB"  */
    if update(KD_BULAN)
    begin
       if (select count(*)
           from   BULAN t1, inserted t2
           where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BULAN". Cannot create child in "DASKBLNB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKBLNB] ENABLE TRIGGER [TI_DASKBLNB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_DASKBLNB] on [dbo].[DASKBLNB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DASKB" must exist when updating a child in "DASKBLNB"  */
      if update(UNITKEY) or
         update(MTGKEY) or
         update(IDXDASK)
      begin
         if (select count(*)
             from   DASKB t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.MTGKEY = t2.MTGKEY
              and   t1.IDXDASK = t2.IDXDASK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DASKB" does not exist. Cannot modify child in "DASKBLNB".'
               goto error
            end
      end
      /*  Parent "BULAN" must exist when updating a child in "DASKBLNB"  */
      if update(KD_BULAN)
      begin
         if (select count(*)
             from   BULAN t1, inserted t2
             where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BULAN" does not exist. Cannot modify child in "DASKBLNB".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKBLNB] ENABLE TRIGGER [TU_DASKBLNB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_DASKBLND] on [dbo].[DASKBLND] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DASKD" must exist when inserting a child in "DASKBLND"  */
    if update(UNITKEY) or
       update(MTGKEY) or
       update(IDXDASK)
    begin
       if (select count(*)
           from   DASKD t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.MTGKEY = t2.MTGKEY
            and   t1.IDXDASK = t2.IDXDASK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DASKD". Cannot create child in "DASKBLND".'
             goto error
          end
    end
    /*  Parent "BULAN" must exist when inserting a child in "DASKBLND"  */
    if update(KD_BULAN)
    begin
       if (select count(*)
           from   BULAN t1, inserted t2
           where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BULAN". Cannot create child in "DASKBLND".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKBLND] ENABLE TRIGGER [TI_DASKBLND]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_DASKBLND] on [dbo].[DASKBLND] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DASKD" must exist when updating a child in "DASKBLND"  */
      if update(UNITKEY) or
         update(MTGKEY) or
         update(IDXDASK)
      begin
         if (select count(*)
             from   DASKD t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.MTGKEY = t2.MTGKEY
              and   t1.IDXDASK = t2.IDXDASK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DASKD" does not exist. Cannot modify child in "DASKBLND".'
               goto error
            end
      end
      /*  Parent "BULAN" must exist when updating a child in "DASKBLND"  */
      if update(KD_BULAN)
      begin
         if (select count(*)
             from   BULAN t1, inserted t2
             where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BULAN" does not exist. Cannot modify child in "DASKBLND".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKBLND] ENABLE TRIGGER [TU_DASKBLND]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_DASKBLNR] on [dbo].[DASKBLNR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DASKR" must exist when inserting a child in "DASKBLNR"  */
    if update(UNITKEY) or
       update(KDKEGUNIT) or
       update(MTGKEY) or
       update(IDXDASK)
    begin
       if (select count(*)
           from   DASKR t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.KDKEGUNIT = t2.KDKEGUNIT
            and   t1.MTGKEY = t2.MTGKEY
            and   t1.IDXDASK = t2.IDXDASK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DASKR". Cannot create child in "DASKBLNR".'
             goto error
          end
    end
    /*  Parent "BULAN" must exist when inserting a child in "DASKBLNR"  */
    if update(KD_BULAN)
    begin
       if (select count(*)
           from   BULAN t1, inserted t2
           where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BULAN". Cannot create child in "DASKBLNR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKBLNR] ENABLE TRIGGER [TI_DASKBLNR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_DASKBLNR] on [dbo].[DASKBLNR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DASKR" must exist when updating a child in "DASKBLNR"  */
      if update(UNITKEY) or
         update(KDKEGUNIT) or
         update(MTGKEY) or
         update(IDXDASK)
      begin
         if (select count(*)
             from   DASKR t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.KDKEGUNIT = t2.KDKEGUNIT
              and   t1.MTGKEY = t2.MTGKEY
              and   t1.IDXDASK = t2.IDXDASK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DASKR" does not exist. Cannot modify child in "DASKBLNR".'
               goto error
            end
      end
      /*  Parent "BULAN" must exist when updating a child in "DASKBLNR"  */
      if update(KD_BULAN)
      begin
         if (select count(*)
             from   BULAN t1, inserted t2
             where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BULAN" does not exist. Cannot modify child in "DASKBLNR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKBLNR] ENABLE TRIGGER [TU_DASKBLNR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_DASKBLNRTL] on [dbo].[DASKBLNRTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DASKRTL" must exist when inserting a child in "DASKBLNRTL"  */
    if update(UNITKEY) or
       update(MTGKEY) or
       update(IDXDASK)
    begin
       if (select count(*)
           from   DASKRTL t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.MTGKEY = t2.MTGKEY
            and   t1.IDXDASK = t2.IDXDASK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DASKRTL". Cannot create child in "DASKBLNRTL".'
             goto error
          end
    end
    /*  Parent "BULAN" must exist when inserting a child in "DASKBLNRTL"  */
    if update(KD_BULAN)
    begin
       if (select count(*)
           from   BULAN t1, inserted t2
           where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BULAN". Cannot create child in "DASKBLNRTL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
 raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKBLNRTL] ENABLE TRIGGER [TI_DASKBLNRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_DASKBLNRTL] on [dbo].[DASKBLNRTL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DASKRTL" must exist when updating a child in "DASKBLNRTL"  */
      if update(UNITKEY) or
         update(MTGKEY) or
         update(IDXDASK)
      begin
         if (select count(*)
             from   DASKRTL t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.MTGKEY = t2.MTGKEY
              and   t1.IDXDASK = t2.IDXDASK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DASKRTL" does not exist. Cannot modify child in "DASKBLNRTL".'
               goto error
            end
      end
      /*  Parent "BULAN" must exist when updating a child in "DASKBLNRTL"  */
      if update(KD_BULAN)
      begin
         if (select count(*)
             from   BULAN t1, inserted t2
             where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BULAN" does not exist. Cannot modify child in "DASKBLNRTL".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
 raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKBLNRTL] ENABLE TRIGGER [TU_DASKBLNRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_DASKD] on [dbo].[DASKD] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "DASKD" if children still exist in "DASKBLND"  */
    if exists (select 1
               from   DASKBLND t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.MTGKEY = t1.MTGKEY
                and   t2.IDXDASK = t1.IDXDASK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKBLND". Cannot delete parent "DASKD".'
          goto error
       end

    /*  Cannot delete parent "DASKD" if children still exist in "DASKDETD"  */
    if exists (select 1
               from   DASKDETD t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.MTGKEY = t1.MTGKEY
                and   t2.IDXDASK = t1.IDXDASK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKDETD". Cannot delete parent "DASKD".'
          goto error
       end


    return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKD] ENABLE TRIGGER [TD_DASKD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_DASKD] on [dbo].[DASKD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGD" must exist when inserting a child in "DASKD"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGD". Cannot create child in "DASKD".'
             goto error
          end
    end
    /*  Parent "SKDASK" must exist when inserting a child in "DASKD"  */
    if update(UNITKEY) or
       update(IDXDASK)
    begin
       if (select count(*)
           from   SKDASK t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.IDXDASK = t2.IDXDASK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SKDASK". Cannot create child in "DASKD".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKD] ENABLE TRIGGER [TI_DASKD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_DASKD] on [dbo].[DASKD] for update as
begin
   declare
      @ins_MTGKEY char(10),
      @ins_UNITKEY char(10),
      @ins_IDXDASK char(10),
      @del_MTGKEY char(10),
      @del_UNITKEY char(10),
      @del_IDXDASK char(10),
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGD" must exist when updating a child in "DASKD"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGD" does not exist. Cannot modify child in "DASKD".'
               goto error
            end
      end
      /*  Parent "SKDASK" must exist when updating a child in "DASKD"  */
      if update(UNITKEY) or
         update(IDXDASK)
      begin
         if (select count(*)
             from   SKDASK t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.IDXDASK = t2.IDXDASK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SKDASK" does not exist. Cannot modify child in "DASKD".'
               goto error
            end
      end
      declare cIns cursor local for select 
              MTGKEY,
              UNITKEY,
              IDXDASK
          from inserted
      declare cDel cursor local for select 
              MTGKEY,
              UNITKEY,
              IDXDASK
          from deleted

      /*  Modify parent code of "DASKD" for all children in "DASKBLND"  */
      if update(MTGKEY) or
         update(UNITKEY) or
         update(IDXDASK)
      begin
         if @@rowcount = 1
            update DASKBLND
               set   UNITKEY = i1.UNITKEY,
                     MTGKEY = i1.MTGKEY,
                     IDXDASK = i1.IDXDASK
            from   DASKBLND t2, inserted i1, deleted d1
               where  t2.UNITKEY = d1.UNITKEY
                and   t2.MTGKEY = d1.MTGKEY
                and   t2.IDXDASK = d1.IDXDASK
                and  (i1.UNITKEY != d1.UNITKEY or
                      i1.MTGKEY != d1.MTGKEY or
                      i1.IDXDASK != d1.IDXDASK)
         else
         begin
            open cIns
            open cDel
            fetch cIns into @ins_MTGKEY,
                            @ins_UNITKEY,
                            @ins_IDXDASK
            fetch cDel into @del_MTGKEY,
                            @del_UNITKEY,
                            @del_IDXDASK

            while (@@fetch_status = 0)
            begin
               update DASKBLND
                  set   UNITKEY = @ins_UNITKEY,
                        MTGKEY = @ins_MTGKEY,
                        IDXDASK = @ins_IDXDASK
               where  UNITKEY = @del_UNITKEY
                and   MTGKEY = @del_MTGKEY
                and   IDXDASK = @del_IDXDASK
               fetch cIns into @ins_MTGKEY,
                               @ins_UNITKEY,
                               @ins_IDXDASK
               fetch cDel into @del_MTGKEY,
                               @del_UNITKEY,
                               @del_IDXDASK
            end
            close cIns
            close cDel
         end
      end
      /*  Modify parent code of "DASKD" for all children in "DASKDETD"  */
      if update(MTGKEY) or
         update(UNITKEY) or
         update(IDXDASK)
      begin
         if @@rowcount = 1
            update DASKDETD
               set   UNITKEY = i1.UNITKEY,
                     MTGKEY = i1.MTGKEY,
                     IDXDASK = i1.IDXDASK
            from   DASKDETD t2, inserted i1, deleted d1
               where  t2.UNITKEY = d1.UNITKEY
                and   t2.MTGKEY = d1.MTGKEY
                and   t2.IDXDASK = d1.IDXDASK
                and  (i1.UNITKEY != d1.UNITKEY or
                      i1.MTGKEY != d1.MTGKEY or
                      i1.IDXDASK != d1.IDXDASK)
         else
         begin
            open cIns
            open cDel
            fetch cIns into @ins_MTGKEY,
                            @ins_UNITKEY,
                            @ins_IDXDASK
            fetch cDel into @del_MTGKEY,
                            @del_UNITKEY,
                            @del_IDXDASK

            while (@@fetch_status = 0)
            begin
               update DASKDETD
                  set   UNITKEY = @ins_UNITKEY,
                        MTGKEY = @ins_MTGKEY,
                        IDXDASK = @ins_IDXDASK
               where  UNITKEY = @del_UNITKEY
                and   MTGKEY = @del_MTGKEY
                and   IDXDASK = @del_IDXDASK
               fetch cIns into @ins_MTGKEY,
                               @ins_UNITKEY,
                               @ins_IDXDASK
               fetch cDel into @del_MTGKEY,
                               @del_UNITKEY,
                               @del_IDXDASK
            end
            close cIns
            close cDel
         end
      end

      return

/*  Errors handling  */
error:
 raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKD] ENABLE TRIGGER [TU_DASKD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_DASKDETB] on [dbo].[DASKDETB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DASKB" must exist when inserting a child in "DASKDETB"  */
    if update(UNITKEY) or
       update(MTGKEY) or
       update(IDXDASK)
    begin
       if (select count(*)
           from   DASKB t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.MTGKEY = t2.MTGKEY
            and   t1.IDXDASK = t2.IDXDASK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DASKB". Cannot create child in "DASKDETB".'
             goto error
          end
    end
    /*  Parent "STDHARGA" must exist when inserting a child in "DASKDETB"  */
--    if update(IDSTDHARGA)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDSTDHARGA is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   STDHARGA t1, inserted t2
--              where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "STDHARGA". Cannot create child in "DASKDETB".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[DASKDETB] ENABLE TRIGGER [TI_DASKDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TU_DASKDETB] on [dbo].[DASKDETB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DASKB" must exist when updating a child in "DASKDETB"  */
      if update(UNITKEY) or
         update(MTGKEY) or
         update(IDXDASK)
      begin
         if (select count(*)
             from   DASKB t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.MTGKEY = t2.MTGKEY
              and   t1.IDXDASK = t2.IDXDASK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DASKB" does not exist. Cannot modify child in "DASKDETB".'
               goto error
            end
      end
      /*  Parent "STDHARGA" must exist when updating a child in "DASKDETB"  */
--      if update(IDSTDHARGA)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDSTDHARGA is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   STDHARGA t1, inserted t2
--                where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'STDHARGA" does not exist. Cannot modify child in "DASKDETB".'
--               goto error
--            end
--      end

      return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[DASKDETB] ENABLE TRIGGER [TU_DASKDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_DASKDETD] on [dbo].[DASKDETD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DASKD" must exist when inserting a child in "DASKDETD"  */
    if update(UNITKEY) or
       update(MTGKEY) or
       update(IDXDASK)
    begin
       if (select count(*)
           from   DASKD t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.MTGKEY = t2.MTGKEY
            and   t1.IDXDASK = t2.IDXDASK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DASKD". Cannot create child in "DASKDETD".'
             goto error
          end
    end
    /*  Parent "STDHARGA" must exist when inserting a child in "DASKDETD"  */
--    if update(IDSTDHARGA)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDSTDHARGA is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   STDHARGA t1, inserted t2
--              where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "STDHARGA". Cannot create child in "DASKDETD".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[DASKDETD] ENABLE TRIGGER [TI_DASKDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TU_DASKDETD] on [dbo].[DASKDETD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DASKD" must exist when updating a child in "DASKDETD"  */
      if update(UNITKEY) or
         update(MTGKEY) or
         update(IDXDASK)
      begin
         if (select count(*)
             from   DASKD t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.MTGKEY = t2.MTGKEY
              and   t1.IDXDASK = t2.IDXDASK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DASKD" does not exist. Cannot modify child in "DASKDETD".'
               goto error
            end
      end
      /*  Parent "STDHARGA" must exist when updating a child in "DASKDETD"  */
--      if update(IDSTDHARGA)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDSTDHARGA is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   STDHARGA t1, inserted t2
--                where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'STDHARGA" does not exist. Cannot modify child in "DASKDETD".'
--               goto error
--            end
--      end

      return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[DASKDETD] ENABLE TRIGGER [TU_DASKDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TI_DASKDETR] on [dbo].[DASKDETR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DASKR" must exist when inserting a child in "DASKDETR"  */
    if update(UNITKEY) or
       update(KDKEGUNIT) or
       update(MTGKEY) or
       update(IDXDASK)
    begin
       if (select count(*)
           from   DASKR t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.KDKEGUNIT = t2.KDKEGUNIT
            and   t1.MTGKEY = t2.MTGKEY
            and   t1.IDXDASK = t2.IDXDASK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DASKR". Cannot create child in "DASKDETR".'
             goto error
          end
    end
    /*  Parent "STDHARGA" must exist when inserting a child in "DASKDETR"  */
--    if update(IDSTDHARGA)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDSTDHARGA is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   STDHARGA t1, inserted t2
--              where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "STDHARGA". Cannot create child in "DASKDETR".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end



GO
ALTER TABLE [dbo].[DASKDETR] ENABLE TRIGGER [TI_DASKDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TU_DASKDETR] on [dbo].[DASKDETR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DASKR" must exist when updating a child in "DASKDETR"  */
      if update(UNITKEY) or
         update(KDKEGUNIT) or
         update(MTGKEY) or
         update(IDXDASK)
      begin
         if (select count(*)
             from   DASKR t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.KDKEGUNIT = t2.KDKEGUNIT
              and   t1.MTGKEY = t2.MTGKEY
              and   t1.IDXDASK = t2.IDXDASK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DASKR" does not exist. Cannot modify child in "DASKDETR".'
               goto error
            end
      end
      /*  Parent "STDHARGA" must exist when updating a child in "DASKDETR"  */
--      if update(IDSTDHARGA)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDSTDHARGA is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   STDHARGA t1, inserted t2
--                where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'STDHARGA" does not exist. Cannot modify child in "DASKDETR".'
--               goto error
--            end
--      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end


GO
ALTER TABLE [dbo].[DASKDETR] ENABLE TRIGGER [TU_DASKDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TI_DASKDETRL] on [dbo].[DASKDETRL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DASKRL" must exist when inserting a child in "DASKDETRL"  */
    if update(UNITKEY) or
       update(MTGKEY) or
       update(IDXDASK)
    begin
       if (select count(*)
           from   DASKRL t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.MTGKEY = t2.MTGKEY
            and   t1.IDXDASK = t2.IDXDASK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DASKRL". Cannot create child in "DASKDETRL".'
             goto error
          end
    END
    
    return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end


GO
ALTER TABLE [dbo].[DASKDETRL] ENABLE TRIGGER [TI_DASKDETRL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TU_DASKDETRL] on [dbo].[DASKDETRL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DASKRL" must exist when updating a child in "DASKDETRL"  */
      if update(UNITKEY) or
         update(MTGKEY) or
         update(IDXDASK)
      begin
         if (select count(*)
             from   DASKRL t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.MTGKEY = t2.MTGKEY
              and   t1.IDXDASK = t2.IDXDASK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DASKRL" does not exist. Cannot modify child in "DASKDETRL".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end









set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
ALTER TABLE [dbo].[DASKDETRL] ENABLE TRIGGER [TU_DASKDETRL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TI_DASKDETRTL] on [dbo].[DASKDETRTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DASKRTL" must exist when inserting a child in "DASKDETRTL"  */
    if update(UNITKEY) or
       update(MTGKEY) or
       update(IDXDASK)
    begin
       if (select count(*)
           from   DASKRTL t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.MTGKEY = t2.MTGKEY
            and   t1.IDXDASK = t2.IDXDASK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DASKRTL". Cannot create child in "DASKDETRTL".'
             goto error
          end
    end
    /*  Parent "STDHARGA" must exist when inserting a child in "DASKDETRTL"  */
--    if update(IDSTDHARGA)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDSTDHARGA is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   STDHARGA t1, inserted t2
--              where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "STDHARGA". Cannot create child in "DASKDETRTL".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end


GO
ALTER TABLE [dbo].[DASKDETRTL] ENABLE TRIGGER [TI_DASKDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TU_DASKDETRTL] on [dbo].[DASKDETRTL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DASKRTL" must exist when updating a child in "DASKDETRTL"  */
      if update(UNITKEY) or
         update(MTGKEY) or
         update(IDXDASK)
      begin
         if (select count(*)
             from   DASKRTL t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.MTGKEY = t2.MTGKEY
              and   t1.IDXDASK = t2.IDXDASK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DASKRTL" does not exist. Cannot modify child in "DASKDETRTL".'
               goto error
            end
      end
      /*  Parent "STDHARGA" must exist when updating a child in "DASKDETRTL"  */
--      if update(IDSTDHARGA)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDSTDHARGA is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   STDHARGA t1, inserted t2
--                where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'STDHARGA" does not exist. Cannot modify child in "DASKDETRTL".'
--               goto error
--            end
--      end

      return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end


GO
ALTER TABLE [dbo].[DASKDETRTL] ENABLE TRIGGER [TU_DASKDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TD_DASKL] on [dbo].[DASKL] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "DASKL" if children still exist in "DASKRL"  */
    if exists (select 1
               from   DASKRL t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.IDXDASK = t1.IDXDASK
                and   t2.KDTAHUN = t1.KDTAHUN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKRL". Cannot delete parent "DASKL".'
          goto error
       end


    return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKL] ENABLE TRIGGER [TD_DASKL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_DASKL] on [dbo].[DASKL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "SKDASK" must exist when inserting a child in "DASKL"  */
    if update(UNITKEY) or
       update(IDXDASK)
    begin
       if (select count(*)
           from   SKDASK t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.IDXDASK = t2.IDXDASK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SKDASK". Cannot create child in "DASKL".'
             goto error
          end
    end
    /*  Parent "TAHUN" must exist when inserting a child in "DASKL"  */
    if update(KDTAHUN)
    begin
       if (select count(*)
           from   TAHUN t1, inserted t2
           where  t1.KDTAHUN = t2.KDTAHUN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHUN". Cannot create child in "DASKL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
 raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKL] ENABLE TRIGGER [TI_DASKL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_DASKL] on [dbo].[DASKL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "SKDASK" must exist when updating a child in "DASKL"  */
      if update(UNITKEY) or
         update(IDXDASK)
      begin
         if (select count(*)
             from   SKDASK t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.IDXDASK = t2.IDXDASK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SKDASK" does not exist. Cannot modify child in "DASKL".'
               goto error
            end
      end
      /*  Parent "TAHUN" must exist when updating a child in "DASKL"  */
      if update(KDTAHUN)
      begin
         if (select count(*)
             from   TAHUN t1, inserted t2
             where  t1.KDTAHUN = t2.KDTAHUN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHUN" does not exist. Cannot modify child in "DASKL".'
               goto error
            end
      end
      /*  Cannot modify parent code in "DASKL" if children still exist in "DASKRL"  */
      if update(UNITKEY) or
         update(IDXDASK) or
         update(KDTAHUN)
      begin
         if exists (select 1
                    from   DASKRL t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.IDXDASK = d1.IDXDASK
                     and   t2.KDTAHUN = d1.KDTAHUN
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.IDXDASK != d1.IDXDASK
                      or   i1.KDTAHUN != d1.KDTAHUN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKRL". Cannot modify parent code in "DASKL".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKL] ENABLE TRIGGER [TU_DASKL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_DASKR] on [dbo].[DASKR] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "DASKR" if children still exist in "DASKBLNR"  */
    if exists (select 1
               from   DASKBLNR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.KDKEGUNIT = t1.KDKEGUNIT
                and   t2.MTGKEY = t1.MTGKEY
                and   t2.IDXDASK = t1.IDXDASK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKBLNR". Cannot delete parent "DASKR".'
          goto error
       end

    /*  Cannot delete parent "DASKR" if children still exist in "DASKDETR"  */
    if exists (select 1
               from   DASKDETR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.KDKEGUNIT = t1.KDKEGUNIT
                and   t2.MTGKEY = t1.MTGKEY
                and   t2.IDXDASK = t1.IDXDASK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKDETR". Cannot delete parent "DASKR".'
          goto error
       end


    return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKR] ENABLE TRIGGER [TD_DASKR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_DASKR] on [dbo].[DASKR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MKEGIATAN" must exist when inserting a child in "DASKR"  */
    if update(KDKEGUNIT)
    begin
       if (select count(*)
           from   MKEGIATAN t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "DASKR".'
             goto error
          end
    end
    /*  Parent "MATANGR" must exist when inserting a child in "DASKR"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "DASKR".'
             goto error
          end
    end
    /*  Parent "SKDASK" must exist when inserting a child in "DASKR"  */
    if update(UNITKEY) or
       update(IDXDASK)
    begin
       if (select count(*)
           from   SKDASK t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.IDXDASK = t2.IDXDASK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SKDASK". Cannot create child in "DASKR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKR] ENABLE TRIGGER [TI_DASKR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_DASKR] on [dbo].[DASKR] for update as
begin
   declare
      @ins_KDKEGUNIT char(10),
      @ins_MTGKEY char(10),
      @ins_UNITKEY char(10),
      @ins_IDXDASK char(10),
      @del_KDKEGUNIT char(10),
      @del_MTGKEY char(10),
      @del_UNITKEY char(10),
      @del_IDXDASK char(10),
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MKEGIATAN" must exist when updating a child in "DASKR"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "DASKR".'
               goto error
            end
      end
      /*  Parent "MATANGR" must exist when updating a child in "DASKR"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "DASKR".'
               goto error
            end
      end
      /*  Parent "SKDASK" must exist when updating a child in "DASKR"  */
      if update(UNITKEY) or
         update(IDXDASK)
      begin
         if (select count(*)
             from   SKDASK t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.IDXDASK = t2.IDXDASK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SKDASK" does not exist. Cannot modify child in "DASKR".'
               goto error
            end
      end
      declare cIns cursor local for select 
              KDKEGUNIT,
              MTGKEY,
              UNITKEY,
              IDXDASK
          from inserted
      declare cDel cursor local for select 
              KDKEGUNIT,
              MTGKEY,
              UNITKEY,
              IDXDASK
          from deleted

      /*  Modify parent code of "DASKR" for all children in "DASKBLNR"  */
      if update(KDKEGUNIT) or
         update(MTGKEY) or
         update(UNITKEY) or
         update(IDXDASK)
      begin
         if @@rowcount = 1
            update DASKBLNR
               set   UNITKEY = i1.UNITKEY,
                     KDKEGUNIT = i1.KDKEGUNIT,
                     MTGKEY = i1.MTGKEY,
                     IDXDASK = i1.IDXDASK
            from   DASKBLNR t2, inserted i1, deleted d1
               where  t2.UNITKEY = d1.UNITKEY
                and   t2.KDKEGUNIT = d1.KDKEGUNIT
                and   t2.MTGKEY = d1.MTGKEY
                and   t2.IDXDASK = d1.IDXDASK
                and  (i1.UNITKEY != d1.UNITKEY or
                      i1.KDKEGUNIT != d1.KDKEGUNIT or
                      i1.MTGKEY != d1.MTGKEY or
                      i1.IDXDASK != d1.IDXDASK)
         else
         begin
            open cIns
            open cDel
            fetch cIns into @ins_KDKEGUNIT,
                            @ins_MTGKEY,
                            @ins_UNITKEY,
                            @ins_IDXDASK
            fetch cDel into @del_KDKEGUNIT,
                            @del_MTGKEY,
                            @del_UNITKEY,
                            @del_IDXDASK

            while (@@fetch_status = 0)
            begin
               update DASKBLNR
                  set   UNITKEY = @ins_UNITKEY,
                        KDKEGUNIT = @ins_KDKEGUNIT,
                        MTGKEY = @ins_MTGKEY,
                        IDXDASK = @ins_IDXDASK
               where  UNITKEY = @del_UNITKEY
                and   KDKEGUNIT = @del_KDKEGUNIT
                and   MTGKEY = @del_MTGKEY
                and   IDXDASK = @del_IDXDASK
               fetch cIns into @ins_KDKEGUNIT,
                               @ins_MTGKEY,
                               @ins_UNITKEY,
                               @ins_IDXDASK
               fetch cDel into @del_KDKEGUNIT,
                               @del_MTGKEY,
                               @del_UNITKEY,
                               @del_IDXDASK
            end
            close cIns
            close cDel
         end
      end
      /*  Modify parent code of "DASKR" for all children in "DASKDETR"  */
      if update(KDKEGUNIT) or
         update(MTGKEY) or
         update(UNITKEY) or
         update(IDXDASK)
      begin
         if @@rowcount = 1
            update DASKDETR
               set   UNITKEY = i1.UNITKEY,
                     KDKEGUNIT = i1.KDKEGUNIT,
                     MTGKEY = i1.MTGKEY,
                     IDXDASK = i1.IDXDASK
            from   DASKDETR t2, inserted i1, deleted d1
               where  t2.UNITKEY = d1.UNITKEY
                and   t2.KDKEGUNIT = d1.KDKEGUNIT
                and   t2.MTGKEY = d1.MTGKEY
                and   t2.IDXDASK = d1.IDXDASK
                and  (i1.UNITKEY != d1.UNITKEY or
                      i1.KDKEGUNIT != d1.KDKEGUNIT or
                      i1.MTGKEY != d1.MTGKEY or
                      i1.IDXDASK != d1.IDXDASK)
         else
         begin
            open cIns
            open cDel
            fetch cIns into @ins_KDKEGUNIT,
                            @ins_MTGKEY,
                            @ins_UNITKEY,
                            @ins_IDXDASK
            fetch cDel into @del_KDKEGUNIT,
                            @del_MTGKEY,
                            @del_UNITKEY,
                            @del_IDXDASK

            while (@@fetch_status = 0)
            begin
               update DASKDETR
                  set   UNITKEY = @ins_UNITKEY,
                        KDKEGUNIT = @ins_KDKEGUNIT,
                        MTGKEY = @ins_MTGKEY,
                        IDXDASK = @ins_IDXDASK
               where  UNITKEY = @del_UNITKEY
                and   KDKEGUNIT = @del_KDKEGUNIT
                and   MTGKEY = @del_MTGKEY
                and   IDXDASK = @del_IDXDASK
               fetch cIns into @ins_KDKEGUNIT,
                               @ins_MTGKEY,
                               @ins_UNITKEY,
                               @ins_IDXDASK
               fetch cDel into @del_KDKEGUNIT,
                               @del_MTGKEY,
                               @del_UNITKEY,
                               @del_IDXDASK
            end
            close cIns
            close cDel
         end
      end

      return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKR] ENABLE TRIGGER [TU_DASKR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TI_DASKRL] on [dbo].[DASKRL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DASKL" must exist when inserting a child in "DASKRL"  */
    if update(UNITKEY) or
       update(IDXDASK) or
       update(KDTAHUN)
    begin
       if (select count(*)
           from   DASKL t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.IDXDASK = t2.IDXDASK
            and   t1.KDTAHUN = t2.KDTAHUN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DASKL". Cannot create child in "DASKRL".'
             goto error
          end
    end
    /*  Parent "MKEGIATAN" must exist when inserting a child in "DASKRL"  */
    if update(KDKEGUNIT)
    begin
       if (select count(*)
           from   MKEGIATAN t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "DASKRL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[DASKRL] ENABLE TRIGGER [TI_DASKRL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TU_DASKRL] on [dbo].[DASKRL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DASKL" must exist when updating a child in "DASKRL"  */
      if update(UNITKEY) or
         update(IDXDASK) or
         update(KDTAHUN)
      begin
         if (select count(*)
             from   DASKL t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.IDXDASK = t2.IDXDASK
              and   t1.KDTAHUN = t2.KDTAHUN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DASKL" does not exist. Cannot modify child in "DASKRL".'
               goto error
            end
      end
      /*  Parent "MKEGIATAN" must exist when updating a child in "DASKRL"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "DASKRL".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[DASKRL] ENABLE TRIGGER [TU_DASKRL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_DASKRTL] on [dbo].[DASKRTL] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "DASKRTL" if children still exist in "DASKBLNRTL"  */
    if exists (select 1
               from   DASKBLNRTL t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.MTGKEY = t1.MTGKEY
                and   t2.IDXDASK = t1.IDXDASK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKBLNRTL". Cannot delete parent "DASKRTL".'
          goto error
       end

    /*  Cannot delete parent "DASKRTL" if children still exist in "DASKDETRTL"  */
    if exists (select 1
               from   DASKDETRTL t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.MTGKEY = t1.MTGKEY
                and   t2.IDXDASK = t1.IDXDASK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKDETRTL". Cannot delete parent "DASKRTL".'
          goto error
       end


    return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKRTL] ENABLE TRIGGER [TD_DASKRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_DASKRTL] on [dbo].[DASKRTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "DASKRTL"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "DASKRTL".'
             goto error
          end
    end
    /*  Parent "SKDASK" must exist when inserting a child in "DASKRTL"  */
    if update(UNITKEY) or
       update(IDXDASK)
    begin
       if (select count(*)
           from   SKDASK t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.IDXDASK = t2.IDXDASK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SKDASK". Cannot create child in "DASKRTL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKRTL] ENABLE TRIGGER [TI_DASKRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_DASKRTL] on [dbo].[DASKRTL] for update as
begin
   declare
      @ins_MTGKEY char(10),
      @ins_UNITKEY char(10),
      @ins_IDXDASK char(10),
      @del_MTGKEY char(10),
      @del_UNITKEY char(10),
      @del_IDXDASK char(10),
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "DASKRTL"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "DASKRTL".'
               goto error
            end
      end
      /*  Parent "SKDASK" must exist when updating a child in "DASKRTL"  */
      if update(UNITKEY) or
         update(IDXDASK)
      begin
         if (select count(*)
             from   SKDASK t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.IDXDASK = t2.IDXDASK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SKDASK" does not exist. Cannot modify child in "DASKRTL".'
               goto error
            end
      end
      declare cIns cursor local for select 
              MTGKEY,
              UNITKEY,
              IDXDASK
          from inserted
      declare cDel cursor local for select 
              MTGKEY,
              UNITKEY,
              IDXDASK
          from deleted

      /*  Modify parent code of "DASKRTL" for all children in "DASKBLNRTL"  */
      if update(MTGKEY) or
         update(UNITKEY) or
         update(IDXDASK)
      begin
         if @@rowcount = 1
            update DASKBLNRTL
               set   UNITKEY = i1.UNITKEY,
                     MTGKEY = i1.MTGKEY,
                     IDXDASK = i1.IDXDASK
            from   DASKBLNRTL t2, inserted i1, deleted d1
               where  t2.UNITKEY = d1.UNITKEY
                and   t2.MTGKEY = d1.MTGKEY
                and   t2.IDXDASK = d1.IDXDASK
                and  (i1.UNITKEY != d1.UNITKEY or
                      i1.MTGKEY != d1.MTGKEY or
                      i1.IDXDASK != d1.IDXDASK)
         else
         begin
            open cIns
            open cDel
            fetch cIns into @ins_MTGKEY,
                            @ins_UNITKEY,
                            @ins_IDXDASK
            fetch cDel into @del_MTGKEY,
                            @del_UNITKEY,
                            @del_IDXDASK

            while (@@fetch_status = 0)
            begin
               update DASKBLNRTL
                  set   UNITKEY = @ins_UNITKEY,
                        MTGKEY = @ins_MTGKEY,
                        IDXDASK = @ins_IDXDASK
               where  UNITKEY = @del_UNITKEY
                and   MTGKEY = @del_MTGKEY
                and   IDXDASK = @del_IDXDASK
               fetch cIns into @ins_MTGKEY,
                               @ins_UNITKEY,
                               @ins_IDXDASK
               fetch cDel into @del_MTGKEY,
                               @del_UNITKEY,
                               @del_IDXDASK
            end
            close cIns
            close cDel
         end
      end
      /*  Modify parent code of "DASKRTL" for all children in "DASKDETRTL"  */
      if update(MTGKEY) or
         update(UNITKEY) or
         update(IDXDASK)
      begin
         if @@rowcount = 1
            update DASKDETRTL
               set   UNITKEY = i1.UNITKEY,
                     MTGKEY = i1.MTGKEY,
                     IDXDASK = i1.IDXDASK
            from   DASKDETRTL t2, inserted i1, deleted d1
               where  t2.UNITKEY = d1.UNITKEY
                and   t2.MTGKEY = d1.MTGKEY
                and   t2.IDXDASK = d1.IDXDASK
                and  (i1.UNITKEY != d1.UNITKEY or
                      i1.MTGKEY != d1.MTGKEY or
                      i1.IDXDASK != d1.IDXDASK)
         else
         begin
            open cIns
            open cDel
            fetch cIns into @ins_MTGKEY,
                            @ins_UNITKEY,
                            @ins_IDXDASK
            fetch cDel into @del_MTGKEY,
                            @del_UNITKEY,
                            @del_IDXDASK

            while (@@fetch_status = 0)
            begin
               update DASKDETRTL
                  set   UNITKEY = @ins_UNITKEY,
                        MTGKEY = @ins_MTGKEY,
                        IDXDASK = @ins_IDXDASK
               where  UNITKEY = @del_UNITKEY
                and   MTGKEY = @del_MTGKEY
                and   IDXDASK = @del_IDXDASK
               fetch cIns into @ins_MTGKEY,
                               @ins_UNITKEY,
                               @ins_IDXDASK
               fetch cDel into @del_MTGKEY,
                               @del_UNITKEY,
                               @del_IDXDASK
            end
            close cIns
            close cDel
         end
      end

      return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKRTL] ENABLE TRIGGER [TU_DASKRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_DASKUM] on [dbo].[DASKUM] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "DASKUM" if children still exist in "DASKUMD"  */
    if exists (select 1
               from   DASKUMD t2, deleted t1
               where  t2.KDDASKUM = t1.KDDASKUM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKUMD". Cannot delete parent "DASKUM".'
          goto error
       end

    /*  Cannot delete parent "DASKUM" if children still exist in "DASKUMR"  */
    if exists (select 1
               from   DASKUMR t2, deleted t1
               where  t2.KDDASKUM = t1.KDDASKUM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKUMR". Cannot delete parent "DASKUM".'
          goto error
       end

    /*  Cannot delete parent "DASKUM" if children still exist in "DASKUMB"  */
    if exists (select 1
               from   DASKUMB t2, deleted t1
               where  t2.KDDASKUM = t1.KDDASKUM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKUMB". Cannot delete parent "DASKUM".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKUM] ENABLE TRIGGER [TD_DASKUM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_DASKUM] on [dbo].[DASKUM] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "DASKUM"  */
    if update(UNITKEY)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  UNITKEY is null)
       if @numnull != @numrows
          if (select count(*)
              from   DAFTUNIT t1, inserted t2
              where  t1.UNITKEY = t2.UNITKEY) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "DASKUM".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKUM] ENABLE TRIGGER [TI_DASKUM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_DASKUM] on [dbo].[DASKUM] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "DASKUM"  */
      if update(UNITKEY)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  UNITKEY is null)
         if @numnull != @numrows
            if (select count(*)
                from   DAFTUNIT t1, inserted t2
                where  t1.UNITKEY = t2.UNITKEY) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "DASKUM".'
               goto error
            end
      end
      /*  Cannot modify parent code in "DASKUM" if children still exist in "DASKUMD"  */
      if update(KDDASKUM)
      begin
         if exists (select 1
                    from   DASKUMD t2, inserted i1, deleted d1
                    where  t2.KDDASKUM = d1.KDDASKUM
                     and  (i1.KDDASKUM != d1.KDDASKUM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKUMD". Cannot modify parent code in "DASKUM".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DASKUM" if children still exist in "DASKUMR"  */
      if update(KDDASKUM)
      begin
         if exists (select 1
                    from   DASKUMR t2, inserted i1, deleted d1
                    where  t2.KDDASKUM = d1.KDDASKUM
                     and  (i1.KDDASKUM != d1.KDDASKUM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKUMR". Cannot modify parent code in "DASKUM".'
               goto error
            end
      end

      /*  Cannot modify parent code in "DASKUM" if children still exist in "DASKUMB"  */
      if update(KDDASKUM)
      begin
         if exists (select 1
                    from   DASKUMB t2, inserted i1, deleted d1
                    where  t2.KDDASKUM = d1.KDDASKUM
                     and  (i1.KDDASKUM != d1.KDDASKUM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKUMB". Cannot modify parent code in "DASKUM".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKUM] ENABLE TRIGGER [TU_DASKUM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TI_DASKUMB] on [dbo].[DASKUMB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGB" must exist when inserting a child in "DASKUMB"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGB". Cannot create child in "DASKUMB".'
             goto error
          end
    end
    /*  Parent "DASKUM" must exist when inserting a child in "DASKUMB"  */
    if update(KDDASKUM)
    begin
       if (select count(*)
           from   DASKUM t1, inserted t2
           where  t1.KDDASKUM = t2.KDDASKUM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DASKUM". Cannot create child in "DASKUMB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKUMB] ENABLE TRIGGER [TI_DASKUMB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_DASKUMB] on [dbo].[DASKUMB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGB" must exist when updating a child in "DASKUMB"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGB" does not exist. Cannot modify child in "DASKUMB".'
               goto error
            end
      end
      /*  Parent "DASKUM" must exist when updating a child in "DASKUMB"  */
      if update(KDDASKUM)
      begin
         if (select count(*)
             from   DASKUM t1, inserted t2
             where  t1.KDDASKUM = t2.KDDASKUM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DASKUM" does not exist. Cannot modify child in "DASKUMB".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKUMB] ENABLE TRIGGER [TU_DASKUMB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TI_DASKUMD] on [dbo].[DASKUMD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGD" must exist when inserting a child in "DASKUMD"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGD". Cannot create child in "DASKUMD".'
             goto error
          end
    end
    /*  Parent "DASKUM" must exist when inserting a child in "DASKUMD"  */
    if update(KDDASKUM)
    begin
       if (select count(*)
           from   DASKUM t1, inserted t2
           where  t1.KDDASKUM = t2.KDDASKUM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DASKUM". Cannot create child in "DASKUMD".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKUMD] ENABLE TRIGGER [TI_DASKUMD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_DASKUMD] on [dbo].[DASKUMD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGD" must exist when updating a child in "DASKUMD"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGD" does not exist. Cannot modify child in "DASKUMD".'
               goto error
            end
      end
      /*  Parent "DASKUM" must exist when updating a child in "DASKUMD"  */
      if update(KDDASKUM)
      begin
         if (select count(*)
             from   DASKUM t1, inserted t2
             where  t1.KDDASKUM = t2.KDDASKUM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DASKUM" does not exist. Cannot modify child in "DASKUMD".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKUMD] ENABLE TRIGGER [TU_DASKUMD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_DASKUMR] on [dbo].[DASKUMR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "DASKUMR"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "DASKUMR".'
             goto error
          end
    end
    /*  Parent "DASKUM" must exist when inserting a child in "DASKUMR"  */
    if update(KDDASKUM)
    begin
       if (select count(*)
           from   DASKUM t1, inserted t2
           where  t1.KDDASKUM = t2.KDDASKUM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DASKUM". Cannot create child in "DASKUMR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKUMR] ENABLE TRIGGER [TI_DASKUMR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_DASKUMR] on [dbo].[DASKUMR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "DASKUMR"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "DASKUMR".'
               goto error
            end
      end
      /*  Parent "DASKUM" must exist when updating a child in "DASKUMR"  */
      if update(KDDASKUM)
      begin
         if (select count(*)
             from   DASKUM t1, inserted t2
             where  t1.KDDASKUM = t2.KDDASKUM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DASKUM" does not exist. Cannot modify child in "DASKUMR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DASKUMR] ENABLE TRIGGER [TU_DASKUMR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TD_DOKSAH] on [dbo].[DOKSAH] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "DOKSAH" if children still exist in "TAHAPSAH"  */
    if exists (select 1
               from   TAHAPSAH t2, deleted t1
               where  t2.KDDOKSAH = t1.KDDOKSAH)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TAHAPSAH". Cannot delete parent "DOKSAH".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DOKSAH] ENABLE TRIGGER [TD_DOKSAH]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_DOKSAH] on [dbo].[DOKSAH] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "DOKSAH" if children still exist in "TAHAPSAH"  */
      if update(KDDOKSAH)
      begin
         if exists (select 1
                    from   TAHAPSAH t2, inserted i1, deleted d1
                    where  t2.KDDOKSAH = d1.KDDOKSAH
                     and  (i1.KDDOKSAH != d1.KDDOKSAH))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TAHAPSAH". Cannot modify parent code in "DOKSAH".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DOKSAH] ENABLE TRIGGER [TU_DOKSAH]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_DP] on [dbo].[DP] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "DP" if children still exist in "DPDET"  */
    if exists (select 1
               from   DPDET t2, deleted t1
               where  t2.NODP = t1.NODP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DPDET". Cannot delete parent "DP".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DP] ENABLE TRIGGER [TD_DP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_DP] on [dbo].[DP] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "ZKODE" must exist when inserting a child in "DP"  */
    if update(IDXKODE)
    begin
       if (select count(*)
           from   ZKODE t1, inserted t2
           where  t1.IDXKODE = t2.IDXKODE) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "ZKODE". Cannot create child in "DP".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "DP"  */
    if update(IDXTTD)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  IDXTTD is null)
       if @numnull != @numrows
          if (select count(*)
              from   JABTTD t1, inserted t2
              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "DP".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DP] ENABLE TRIGGER [TI_DP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TU_DP] on [dbo].[DP] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "ZKODE" must exist when updating a child in "DP"  */
      if update(IDXKODE)
      begin
         if (select count(*)
             from   ZKODE t1, inserted t2
             where  t1.IDXKODE = t2.IDXKODE) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ZKODE" does not exist. Cannot modify child in "DP".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "DP"  */
      if update(IDXTTD)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  IDXTTD is null)
         if @numnull != @numrows
            if (select count(*)
                from   JABTTD t1, inserted t2
                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "DP".'
               goto error
            end
      end
      /*  Cannot modify parent code in "DP" if children still exist in "DPDET"  */
      if update(NODP)
      begin
         if exists (select 1
                    from   DPDET t2, inserted i1, deleted d1
                    where  t2.NODP = d1.NODP
                     and  (i1.NODP != d1.NODP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DPDET". Cannot modify parent code in "DP".'
               goto error
            end
      END
      
       
      
       if update(tglvalid)
		BEGIN
				DECLARE @NODP VARCHAR(100),  @TGLVALID  DATETIME, @TGLDP DATETIME,@nosp2d VARCHAR(100),@JNS int
				BEGIN 
						declare cjurnal cursor for
						SELECT  I.NODP, I.TGLDP,   I.TGLVALID  from INSERTED I INNER JOIN DP T ON    T.NODP= I.NODP 
						open cjurnal
						fetch next from cjurnal into @NODP, @TGLDP,  @TGLVALID
						while @@FETCH_STATUS=0
						begin	
								IF @TGLVALID IS NOT NULL
								BEGIN
									SET @JNS=1
									--EXEC WSP_INSERT_SP2DBYDP  @NODP  ,@TGLVALID  
									 
									EXEC WSP_INSERT_STAGING_BJB_MODEL2 @NODP  ,@TGLVALID  ,@NOSP2D  ,@JNS
								END 
								ELSE
								IF @TGLVALID IS NULL
								BEGIN
									SET @JNS=1
									--EXEC WSP_INSERT_SP2DBYDP  @NODP  ,NULL   
									EXEC WSP_INSERT_STAGING_BJB_MODEL2 @NODP  ,@TGLVALID  ,@NOSP2D  ,@JNS
								END	
						
						
						
						
								
						fetch next from cjurnal into @NODP, @TGLDP,  @TGLVALID
						end
						close cjurnal
						deallocate cjurnal
				END
	
		END
      	


      return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DP] ENABLE TRIGGER [TU_DP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create trigger [dbo].[TD_DPDET] on [dbo].[DPDET] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    
    if exists (select 1
               from   DP  t2, deleted t1
               where  t2.NODP = t1.NODP AND t2.TGLVALID IS NOT null)
       begin
          select @errno  = 50006,
                 @errmsg = 'DAFTAR PENGUJI SUDAH DISAHKAN in "DP". TIDAK DAPAT MENGHAPUS DETAILNYA "DPDET".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DPDET] ENABLE TRIGGER [TD_DPDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_DPDET] on [dbo].[DPDET] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DP" must exist when inserting a child in "DPDET"  */
    if update(NODP)
    begin
       if (select count(*)
           from   DP t1, inserted t2
           where  t1.NODP = t2.NODP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DP". Cannot create child in "DPDET".'
             goto error
          end
    end
    /*  Parent "SP2D" must exist when inserting a child in "DPDET"  */
    if update(UNITKEY) or
       update(NOSP2D)
    begin
       if (select count(*)
           from   SP2D t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSP2D = t2.NOSP2D) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SP2D". Cannot create child in "DPDET".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DPDET] ENABLE TRIGGER [TI_DPDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_DPDET] on [dbo].[DPDET] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DP" must exist when updating a child in "DPDET"  */
      if update(NODP)
      begin
         if (select count(*)
             from   DP t1, inserted t2
             where  t1.NODP = t2.NODP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DP" does not exist. Cannot modify child in "DPDET".'
               goto error
            end
      end
      /*  Parent "SP2D" must exist when updating a child in "DPDET"  */
      if update(UNITKEY) or
         update(NOSP2D)
      begin
         if (select count(*)
             from   SP2D t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSP2D = t2.NOSP2D) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SP2D" does not exist. Cannot modify child in "DPDET".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[DPDET] ENABLE TRIGGER [TU_DPDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_FUNGSI] on [dbo].[FUNGSI] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "FUNGSI" if children still exist in "FUNGSINIT"  */
    if exists (select 1
               from   FUNGSINIT t2, deleted t1
               where  t2.IDFUNG = t1.IDFUNG)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "FUNGSINIT". Cannot delete parent "FUNGSI".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[FUNGSI] ENABLE TRIGGER [TD_FUNGSI]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_FUNGSI] on [dbo].[FUNGSI] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "FUNGSI" if children still exist in "FUNGSINIT"  */
      if update(IDFUNG)
      begin
         if exists (select 1
                    from   FUNGSINIT t2, inserted i1, deleted d1
                    where  t2.IDFUNG = d1.IDFUNG
                     and  (i1.IDFUNG != d1.IDFUNG))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "FUNGSINIT". Cannot modify parent code in "FUNGSI".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[FUNGSI] ENABLE TRIGGER [TU_FUNGSI]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_FUNGSINIT] on [dbo].[FUNGSINIT] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "FUNGSI" must exist when inserting a child in "FUNGSINIT"  */
    if update(IDFUNG)
    begin
       if (select count(*)
           from   FUNGSI t1, inserted t2
           where  t1.IDFUNG = t2.IDFUNG) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "FUNGSI". Cannot create child in "FUNGSINIT".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "FUNGSINIT"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "FUNGSINIT".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[FUNGSINIT] ENABLE TRIGGER [TI_FUNGSINIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_FUNGSINIT] on [dbo].[FUNGSINIT] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "FUNGSI" must exist when updating a child in "FUNGSINIT"  */
      if update(IDFUNG)
      begin
         if (select count(*)
             from   FUNGSI t1, inserted t2
             where  t1.IDFUNG = t2.IDFUNG) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'FUNGSI" does not exist. Cannot modify child in "FUNGSINIT".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "FUNGSINIT"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "FUNGSINIT".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[FUNGSINIT] ENABLE TRIGGER [TU_FUNGSINIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TD_GOLONGAN] on [dbo].[GOLONGAN] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "GOLONGAN" if children still exist in "PEGAWAI"  */
    if exists (select 1
               from   PEGAWAI t2, deleted t1
               where  t2.KDGOL = t1.KDGOL)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PEGAWAI". Cannot delete parent "GOLONGAN".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[GOLONGAN] ENABLE TRIGGER [TD_GOLONGAN]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_GOLONGAN] on [dbo].[GOLONGAN] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "GOLONGAN" if children still exist in "PEGAWAI"  */
      if update(KDGOL)
      begin
         if exists (select 1
                    from   PEGAWAI t2, inserted i1, deleted d1
                    where  t2.KDGOL = d1.KDGOL
                     and  (i1.KDGOL != d1.KDGOL))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PEGAWAI". Cannot modify parent code in "GOLONGAN".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[GOLONGAN] ENABLE TRIGGER [TU_GOLONGAN]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_JABTTD] on [dbo].[JABTTD] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "JABTTD" if children still exist in "SKDASK"  */
    if exists (select 1
               from   SKDASK t2, deleted t1
               where  t2.IDXTTD1 = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKDASK". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "SKDASK"  */
    if exists (select 1
               from   SKDASK t2, deleted t1
               where  t2.IDXTTD2 = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKDASK". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "SKO"  */
    if exists (select 1
               from   SKO t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKO". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "SPP"  */
    if exists (select 1
               from   SPP t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPP". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "PSPJ"  */
    if exists (select 1
               from   PSPJ t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PSPJ". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "ANTARBYR"  */
    if exists (select 1
               from   ANTARBYR t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "ANTARBYR". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "SP2D"  */
    if exists (select 1
               from   SP2D t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2D". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "BKUK"  */
    if exists (select 1
               from   BKUK t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUK". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "STS"  */
    if exists (select 1
               from   STS t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "STS". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "BKUD"  */
    if exists (select 1
               from   BKUD t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUD". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "DP" */
    if exists (select 1
               from   DP t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DP". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "BKTMEM"  */
    if exists (select 1
               from   BKTMEM t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKTMEM". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "BKBM"  */
    if exists (select 1
               from   BKBM t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKBM". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "BKUSP2D"  */
    if exists (select 1
               from   BKUSP2D t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUSP2D". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "BKRKK"  */
    if exists (select 1
               from   BKRKK t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKRKK". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "BKUSTS"  */
    if exists (select 1
               from   BKUSTS t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUSTS". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "BKRKM"  */
    if exists (select 1
               from   BKRKM t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKRKM". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "BKSPJ"  */
    if exists (select 1
               from   BKSPJ t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKSPJ". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "BKBANK"  */
    if exists (select 1
               from   BKBANK t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKBANK". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "BKPAJAK"  */
    if exists (select 1
               from   BKPAJAK t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKPAJAK". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "BKUTBP"  */
    if exists (select 1
               from   BKUTBP t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUTBP". Cannot delete parent "JABTTD".'
       goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "BKUPANJAR"  */
    if exists (select 1
               from   BKUPANJAR t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUPANJAR". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "BKUBPK"  */
    if exists (select 1
               from   BKUBPK t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUBPK". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "BKUPAJAK"  */
    if exists (select 1
               from   BKUPAJAK t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUPAJAK". Cannot delete parent "JABTTD".'
          goto error
       end

    /*  Cannot delete parent "JABTTD" if children still exist in "BKUBANK"  */
    if exists (select 1
               from   BKUBANK t2, deleted t1
               where  t2.IDXTTD = t1.IDXTTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUBANK". Cannot delete parent "JABTTD".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JABTTD] ENABLE TRIGGER [TD_JABTTD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_JABTTD] on [dbo].[JABTTD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTDOK" must exist when inserting a child in "JABTTD"  */
    if update(KDDOK)
    begin
       if (select count(*)
           from   DAFTDOK t1, inserted t2
           where  t1.KDDOK = t2.KDDOK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTDOK". Cannot create child in "JABTTD".'
             goto error
          end
    end
    /*  Parent "PEGAWAI" must exist when inserting a child in "JABTTD"  */
    if update(NIP)
    begin
       if (select count(*)
           from   PEGAWAI t1, inserted t2
           where  t1.NIP = t2.NIP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PEGAWAI". Cannot create child in "JABTTD".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "JABTTD"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "JABTTD".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JABTTD] ENABLE TRIGGER [TI_JABTTD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_JABTTD] on [dbo].[JABTTD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTDOK" must exist when updating a child in "JABTTD"  */
      if update(KDDOK)
      begin
         if (select count(*)
             from   DAFTDOK t1, inserted t2
             where  t1.KDDOK = t2.KDDOK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTDOK" does not exist. Cannot modify child in "JABTTD".'
               goto error
            end
      end
      /*  Parent "PEGAWAI" must exist when updating a child in "JABTTD"  */
      if update(NIP)
      begin
         if (select count(*)
             from   PEGAWAI t1, inserted t2
             where  t1.NIP = t2.NIP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PEGAWAI" does not exist. Cannot modify child in "JABTTD".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "JABTTD"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "JABTTD".'
               goto error
            end
      end
      /*  Cannot modify parent code in "JABTTD" if children still exist in "SKDASK"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   SKDASK t2, inserted i1, deleted d1
                    where  t2.IDXTTD1 = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKDASK". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "SKDASK"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   SKDASK t2, inserted i1, deleted d1
                    where  t2.IDXTTD2 = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKDASK". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "SKO"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   SKO t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKO". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "SPP"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   SPP t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPP". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "PSPJ"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   PSPJ t2, inserted i1, deleted d1
       where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PSPJ". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "ANTARBYR"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   ANTARBYR t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "ANTARBYR". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "SP2D"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   SP2D t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2D". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "BKUK"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   BKUK t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUK". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "STS"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   STS t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "STS". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "BKUD"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   BKUD t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUD". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "DP"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   DP t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DP". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "BKTMEM"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   BKTMEM t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKTMEM". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "BKBM"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   BKBM t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKBM". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "BKUSP2D"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   BKUSP2D t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUSP2D". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "BKRKK"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   BKRKK t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKRKK". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "BKUSTS"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   BKUSTS t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUSTS". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "BKRKM"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   BKRKM t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKRKM". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "BKSPJ"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   BKSPJ t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKSPJ". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "BKBANK"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   BKBANK t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKBANK". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "BKPAJAK"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   BKPAJAK t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKPAJAK". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "BKUTBP"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   BKUTBP t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUTBP". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "BKUPANJAR"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   BKUPANJAR t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUPANJAR". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "BKUBPK"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   BKUBPK t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUBPK". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "BKUPAJAK"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   BKUPAJAK t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUPAJAK". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JABTTD" if children still exist in "BKUBANK"  */
      if update(IDXTTD)
      begin
         if exists (select 1
                    from   BKUBANK t2, inserted i1, deleted d1
                    where  t2.IDXTTD = d1.IDXTTD
                     and  (i1.IDXTTD != d1.IDXTTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUBANK". Cannot modify parent code in "JABTTD".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JABTTD] ENABLE TRIGGER [TU_JABTTD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TD_JAKAS] on [dbo].[JAKAS] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "JAKAS" if children still exist in "REKAKAS"  */
    if exists (select 1
               from   REKAKAS t2, deleted t1
               where  t2.KDAKAS = t1.KDAKAS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "REKAKAS". Cannot delete parent "JAKAS".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JAKAS] ENABLE TRIGGER [TD_JAKAS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_JAKAS] on [dbo].[JAKAS] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "JAKAS" if children still exist in "REKAKAS"  */
      if update(KDAKAS)
      begin
         if exists (select 1
                    from   REKAKAS t2, inserted i1, deleted d1
                    where  t2.KDAKAS = d1.KDAKAS
                     and  (i1.KDAKAS != d1.KDAKAS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "REKAKAS". Cannot modify parent code in "JAKAS".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JAKAS] ENABLE TRIGGER [TU_JAKAS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TD_JBEND] on [dbo].[JBEND] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "JBEND" if children still exist in "BEND"  */
    if exists (select 1
               from   BEND t2, deleted t1
               where  t2.JNS_BEND = t1.JNS_BEND)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BEND". Cannot delete parent "JBEND".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JBEND] ENABLE TRIGGER [TD_JBEND]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_JBEND] on [dbo].[JBEND] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "JBEND" if children still exist in "BEND"  */
      if update(JNS_BEND)
      begin
         if exists (select 1
                    from   BEND t2, inserted i1, deleted d1
                    where  t2.JNS_BEND = d1.JNS_BEND
                     and  (i1.JNS_BEND != d1.JNS_BEND))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BEND". Cannot modify parent code in "JBEND".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JBEND] ENABLE TRIGGER [TU_JBEND]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TD_JBKAS] on [dbo].[JBKAS] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "JBKAS" if children still exist in "BKUK"  */
    if exists (select 1
               from   BKUK t2, deleted t1
               where  t2.KDBUKTI = t1.KDBUKTI)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUK". Cannot delete parent "JBKAS".'
          goto error
       end

    /*  Cannot delete parent "JBKAS" if children still exist in "BKUD"  */
    if exists (select 1
               from   BKUD t2, deleted t1
               where  t2.KDBUKTI = t1.KDBUKTI)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUD". Cannot delete parent "JBKAS".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JBKAS] ENABLE TRIGGER [TD_JBKAS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_JBKAS] on [dbo].[JBKAS] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "JBKAS" if children still exist in "BKUK"  */
      if update(KDBUKTI)
      begin
         if exists (select 1
                    from   BKUK t2, inserted i1, deleted d1
                    where  t2.KDBUKTI = d1.KDBUKTI
                     and  (i1.KDBUKTI != d1.KDBUKTI))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUK". Cannot modify parent code in "JBKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JBKAS" if children still exist in "BKUD"  */
      if update(KDBUKTI)
      begin
         if exists (select 1
                    from   BKUD t2, inserted i1, deleted d1
                    where  t2.KDBUKTI = d1.KDBUKTI
                     and  (i1.KDBUKTI != d1.KDBUKTI))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUD". Cannot modify parent code in "JBKAS".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JBKAS] ENABLE TRIGGER [TU_JBKAS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TD_JBM] on [dbo].[JBM] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "JBM" if children still exist in "BKTMEM"  */
    if exists (select 1
               from   BKTMEM t2, deleted t1
               where  t2.KDBM = t1.KDBM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKTMEM". Cannot delete parent "JBM".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JBM] ENABLE TRIGGER [TD_JBM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_JBM] on [dbo].[JBM] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "JBM" if children still exist in "BKTMEM"  */
      if update(KDBM)
      begin
         if exists (select 1
                    from   BKTMEM t2, inserted i1, deleted d1
                    where  t2.KDBM = d1.KDBM
                     and  (i1.KDBM != d1.KDBM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKTMEM". Cannot modify parent code in "JBM".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JBM] ENABLE TRIGGER [TU_JBM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_JDANA] on [dbo].[JDANA] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "JDANA" if children still exist in "SBDANAB"  */
    if exists (select 1
               from   SBDANAB t2, deleted t1
               where  t2.KDDANA = t1.KDDANA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SBDANAB". Cannot delete parent "JDANA".'
          goto error
       end

    /*  Cannot delete parent "JDANA" if children still exist in "SBDANARTL"  */
    if exists (select 1
               from   SBDANARTL t2, deleted t1
               where  t2.KDDANA = t1.KDDANA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SBDANARTL". Cannot delete parent "JDANA".'
          goto error
       end

    /*  Cannot delete parent "JDANA" if children still exist in "SBDANAR"  */
    if exists (select 1
               from   SBDANAR t2, deleted t1
               where  t2.KDDANA = t1.KDDANA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SBDANAR". Cannot delete parent "JDANA".'
          goto error
       end

    /*  Cannot delete parent "JDANA" if children still exist in "SP2DDETR"  */
    if exists (select 1
               from   SP2DDETR t2, deleted t1
               where  t2.KDDANA = t1.KDDANA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DDETR". Cannot delete parent "JDANA".'
          goto error
       end

    /*  Cannot delete parent "JDANA" if children still exist in "SP2DDETRTL"  */
    if exists (select 1
               from   SP2DDETRTL t2, deleted t1
               where  t2.KDDANA = t1.KDDANA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DDETRTL". Cannot delete parent "JDANA".'
          goto error
       end

    /*  Cannot delete parent "JDANA" if children still exist in "SP2DDETB"  */
    if exists (select 1
               from   SP2DDETB t2, deleted t1
               where  t2.KDDANA = t1.KDDANA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DDETB". Cannot delete parent "JDANA".'
          goto error
       end

    /*  Cannot delete parent "JDANA" if children still exist in "RKMDETR"  */
    if exists (select 1
               from   RKMDETR t2, deleted t1
               where  t2.KDDANA = t1.KDDANA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETR". Cannot delete parent "JDANA".'
          goto error
       end

    /*  Cannot delete parent "JDANA" if children still exist in "RKMDETRTL"  */
    if exists (select 1
               from   RKMDETRTL t2, deleted t1
               where  t2.KDDANA = t1.KDDANA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETRTL". Cannot delete parent "JDANA".'
          goto error
       end

    /*  Cannot delete parent "JDANA" if children still exist in "RKMDETB"  */
    if exists (select 1
               from   RKMDETB t2, deleted t1
               where  t2.KDDANA = t1.KDDANA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETB". Cannot delete parent "JDANA".'
          goto error
       end

    /*  Cannot delete parent "JDANA" if children still exist in "SPJDETR"  */
    if exists (select 1
               from   SPJDETR t2, deleted t1
               where  t2.KDDANA = t1.KDDANA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETR". Cannot delete parent "JDANA".'
          goto error
end

    /*  Cannot delete parent "JDANA" if children still exist in "SPJDETRTL"  */
    if exists (select 1
               from   SPJDETRTL t2, deleted t1
               where  t2.KDDANA = t1.KDDANA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETRTL". Cannot delete parent "JDANA".'
          goto error
       end

    /*  Cannot delete parent "JDANA" if children still exist in "SPJDETB"  */
    if exists (select 1
               from   SPJDETB t2, deleted t1
               where  t2.KDDANA = t1.KDDANA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETB". Cannot delete parent "JDANA".'
          goto error
       end

    /*  Cannot delete parent "JDANA" if children still exist in "SBDANAKEG"  */
    if exists (select 1
               from   SBDANAKEG t2, deleted t1
               where  t2.KDDANA = t1.KDDANA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SBDANAKEG". Cannot delete parent "JDANA".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JDANA] ENABLE TRIGGER [TD_JDANA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_JDANA] on [dbo].[JDANA] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "JDANA" if children still exist in "SBDANAB"  */
      if update(KDDANA)
      begin
         if exists (select 1
                    from   SBDANAB t2, inserted i1, deleted d1
                    where  t2.KDDANA = d1.KDDANA
                     and  (i1.KDDANA != d1.KDDANA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SBDANAB". Cannot modify parent code in "JDANA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JDANA" if children still exist in "SBDANARTL"  */
      if update(KDDANA)
      begin
         if exists (select 1
                    from   SBDANARTL t2, inserted i1, deleted d1
                    where  t2.KDDANA = d1.KDDANA
                     and  (i1.KDDANA != d1.KDDANA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SBDANARTL". Cannot modify parent code in "JDANA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JDANA" if children still exist in "SBDANAR"  */
      if update(KDDANA)
      begin
         if exists (select 1
                    from   SBDANAR t2, inserted i1, deleted d1
                    where  t2.KDDANA = d1.KDDANA
                     and  (i1.KDDANA != d1.KDDANA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SBDANAR". Cannot modify parent code in "JDANA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JDANA" if children still exist in "SP2DDETR"  */
      if update(KDDANA)
      begin
         if exists (select 1
                    from   SP2DDETR t2, inserted i1, deleted d1
                    where  t2.KDDANA = d1.KDDANA
                     and  (i1.KDDANA != d1.KDDANA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DDETR". Cannot modify parent code in "JDANA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JDANA" if children still exist in "SP2DDETRTL"  */
      if update(KDDANA)
      begin
         if exists (select 1
                    from   SP2DDETRTL t2, inserted i1, deleted d1
                    where  t2.KDDANA = d1.KDDANA
                     and  (i1.KDDANA != d1.KDDANA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DDETRTL". Cannot modify parent code in "JDANA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JDANA" if children still exist in "SP2DDETB"  */
      if update(KDDANA)
      begin
         if exists (select 1
                    from   SP2DDETB t2, inserted i1, deleted d1
                    where  t2.KDDANA = d1.KDDANA
                     and  (i1.KDDANA != d1.KDDANA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DDETB". Cannot modify parent code in "JDANA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JDANA" if children still exist in "RKMDETR"  */
      if update(KDDANA)
      begin
         if exists (select 1
                    from   RKMDETR t2, inserted i1, deleted d1
                    where  t2.KDDANA = d1.KDDANA
                     and  (i1.KDDANA != d1.KDDANA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETR". Cannot modify parent code in "JDANA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JDANA" if children still exist in "RKMDETRTL"  */
      if update(KDDANA)
      begin
         if exists (select 1
                    from   RKMDETRTL t2, inserted i1, deleted d1
                    where  t2.KDDANA = d1.KDDANA
                     and  (i1.KDDANA != d1.KDDANA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETRTL". Cannot modify parent code in "JDANA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JDANA" if children still exist in "RKMDETB"  */
      if update(KDDANA)
      begin
         if exists (select 1
                    from   RKMDETB t2, inserted i1, deleted d1
                    where  t2.KDDANA = d1.KDDANA
                     and  (i1.KDDANA != d1.KDDANA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETB". Cannot modify parent code in "JDANA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JDANA" if children still exist in "SPJDETR"  */
      if update(KDDANA)
      begin
         if exists (select 1
                    from   SPJDETR t2, inserted i1, deleted d1
                    where  t2.KDDANA = d1.KDDANA
                     and  (i1.KDDANA != d1.KDDANA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETR". Cannot modify parent code in "JDANA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JDANA" if children still exist in "SPJDETRTL"  */
      if update(KDDANA)
      begin
         if exists (select 1
                    from   SPJDETRTL t2, inserted i1, deleted d1
                    where  t2.KDDANA = d1.KDDANA
                     and  (i1.KDDANA != d1.KDDANA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETRTL". Cannot modify parent code in "JDANA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JDANA" if children still exist in "SPJDETB"  */
      if update(KDDANA)
      begin
         if exists (select 1
                    from   SPJDETB t2, inserted i1, deleted d1
                    where  t2.KDDANA = d1.KDDANA
                     and  (i1.KDDANA != d1.KDDANA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETB". Cannot modify parent code in "JDANA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JDANA" if children still exist in "SBDANAKEG"  */
      if update(KDDANA)
      begin
         if exists (select 1
                    from   SBDANAKEG t2, inserted i1, deleted d1
                    where  t2.KDDANA = d1.KDDANA
                     and  (i1.KDDANA != d1.KDDANA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SBDANAKEG". Cannot modify parent code in "JDANA".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JDANA] ENABLE TRIGGER [TU_JDANA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TD_JDSRSKO] on [dbo].[JDSRSKO] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "JDSRSKO" if children still exist in "SKO"  */
    if exists (select 1
               from   SKO t2, deleted t1
               where  t2.KDDSR = t1.KDDSR)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKO". Cannot delete parent "JDSRSKO".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JDSRSKO] ENABLE TRIGGER [TD_JDSRSKO]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_JDSRSKO] on [dbo].[JDSRSKO] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "JDSRSKO" if children still exist in "SKO"  */
      if update(KDDSR)
      begin
         if exists (select 1
                    from   SKO t2, inserted i1, deleted d1
                    where  t2.KDDSR = d1.KDDSR
                     and  (i1.KDDSR != d1.KDDSR))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKO". Cannot modify parent code in "JDSRSKO".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JDSRSKO] ENABLE TRIGGER [TU_JDSRSKO]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create trigger [dbo].[TD_JKELOLA] on [dbo].[JKELOLA] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "JKELOLA" if children still exist in "KELOLAUNIT"  */
    if exists (select 1
               from   KELOLAUNIT t2, deleted t1
               where  t2.KDKELOLA = t1.KDKELOLA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KELOLAUNIT". Cannot delete parent "JKELOLA".'
          goto error
       end
    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JKELOLA] ENABLE TRIGGER [TD_JKELOLA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create trigger [dbo].[TU_JKELOLA] on [dbo].[JKELOLA] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "JKELOLA" if children still exist in "KELOLAUNIT"  */
      if update(KDKELOLA)
      begin
         if exists (select 1
                    from   KELOLAUNIT t2, inserted i1, deleted d1
                    where  t2.KDKELOLA = d1.KDKELOLA
                     and  (i1.KDKELOLA != d1.KDKELOLA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "KELOLAUNIT". Cannot modify parent code in "JKELOLA".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end





GO
ALTER TABLE [dbo].[JKELOLA] ENABLE TRIGGER [TU_JKELOLA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_JKINKEG] on [dbo].[JKINKEG] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "JKINKEG" if children still exist in "KINKEG"  */
    if exists (select 1
               from   KINKEG t2, deleted t1
               where  t2.KDJKK = t1.KDJKK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KINKEG". Cannot delete parent "JKINKEG".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JKINKEG] ENABLE TRIGGER [TD_JKINKEG]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_JKINKEG] on [dbo].[JKINKEG] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "JKINKEG" if children still exist in "KINKEG"  */
      if update(KDJKK)
      begin
         if exists (select 1
                    from   KINKEG t2, inserted i1, deleted d1
                    where  t2.KDJKK = d1.KDJKK
                     and  (i1.KDJKK != d1.KDJKK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "KINKEG". Cannot modify parent code in "JKINKEG".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JKINKEG] ENABLE TRIGGER [TU_JKINKEG]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_JPAJAK] on [dbo].[JPAJAK] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "JPAJAK" if children still exist in "SP2DPJK"  */
    if exists (select 1
               from   SP2DPJK t2, deleted t1
               where  t2.PJKKEY = t1.PJKKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DPJK". Cannot delete parent "JPAJAK".'
          goto error
       end

    /*  Cannot delete parent "JPAJAK" if children still exist in "SPMPJK"  */
    if exists (select 1
               from   SPMPJK t2, deleted t1
               where  t2.PJKKEY = t1.PJKKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPMPJK". Cannot delete parent "JPAJAK".'
          goto error
       end

    /*  Cannot delete parent "JPAJAK" if children still exist in "SPJDETP"  */
    if exists (select 1
               from   SPJDETP t2, deleted t1
               where  t2.PJKKEY = t1.PJKKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETP". Cannot delete parent "JPAJAK".'
          goto error
       end

    /*  Cannot delete parent "JPAJAK" if children still exist in "SETPFK"  */
    if exists (select 1
               from   SETPFK t2, deleted t1
               where  t2.PJKKEY = t1.PJKKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SETPFK". Cannot delete parent "JPAJAK".'
          goto error
       end

    /*  Cannot delete parent "JPAJAK" if children still exist in "BKPAJAKDET"  */
    --if exists (select 1
    --           from   BKPAJAKDET t2, deleted t1
    --           where  t2.PJKKEY = t1.PJKKEY)
    --   begin
    --      select @errno  = 50006,
    --             @errmsg = 'Children still exist in "BKPAJAKDET". Cannot delete parent "JPAJAK".'
    --      goto error
    --   end
	-- Disabled by CH. (BKPAJAK tdk ada kolom PJKKEY)

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JPAJAK] ENABLE TRIGGER [TD_JPAJAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_JPAJAK] on [dbo].[JPAJAK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "JPAJAK" if children still exist in "SP2DPJK"  */
      if update(PJKKEY)
      begin
         if exists (select 1
                    from   SP2DPJK t2, inserted i1, deleted d1
                    where  t2.PJKKEY = d1.PJKKEY
                     and  (i1.PJKKEY != d1.PJKKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DPJK". Cannot modify parent code in "JPAJAK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JPAJAK" if children still exist in "SPMPJK"  */
      if update(PJKKEY)
      begin
         if exists (select 1
                    from   SPMPJK t2, inserted i1, deleted d1
                    where  t2.PJKKEY = d1.PJKKEY
                     and  (i1.PJKKEY != d1.PJKKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPMPJK". Cannot modify parent code in "JPAJAK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JPAJAK" if children still exist in "SPJDETP"  */
      if update(PJKKEY)
      begin
         if exists (select 1
                    from   SPJDETP t2, inserted i1, deleted d1
                    where  t2.PJKKEY = d1.PJKKEY
                     and  (i1.PJKKEY != d1.PJKKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETP". Cannot modify parent code in "JPAJAK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JPAJAK" if children still exist in "SETPFK"  */
      if update(PJKKEY)
      begin
         if exists (select 1
                    from   SETPFK t2, inserted i1, deleted d1
                    where  t2.PJKKEY = d1.PJKKEY
                     and  (i1.PJKKEY != d1.PJKKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SETPFK". Cannot modify parent code in "JPAJAK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JPAJAK" if children still exist in "BKPAJAKDET"  */
      if update(PJKKEY)
      begin
         if exists (select 1
                    from   BKPAJAKDET t2, inserted i1, deleted d1
                    where  t2.MTGKEYPJK = d1.PJKKEY
                     and  (i1.PJKKEY != d1.PJKKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKPAJAKDET". Cannot modify parent code in "JPAJAK".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JPAJAK] ENABLE TRIGGER [TU_JPAJAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TD_JPERSPEKTIF] on [dbo].[JPERSPEKTIF] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "JPERSPEKTIF" if children still exist in "MKEGIATAN"  */
    if exists (select 1
               from   MKEGIATAN t2, deleted t1
               where  t2.KDPERSPEKTIF = t1.KDPERSPEKTIF)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MKEGIATAN". Cannot delete parent "JPERSPEKTIF".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JPERSPEKTIF] ENABLE TRIGGER [TD_JPERSPEKTIF]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_JPERSPEKTIF] on [dbo].[JPERSPEKTIF] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "JPERSPEKTIF" if children still exist in "MKEGIATAN"  */
      if update(KDPERSPEKTIF)
      begin
         if exists (select 1
                    from   MKEGIATAN t2, inserted i1, deleted d1
                    where  t2.KDPERSPEKTIF = d1.KDPERSPEKTIF
                     and  (i1.KDPERSPEKTIF != d1.KDPERSPEKTIF))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MKEGIATAN". Cannot modify parent code in "JPERSPEKTIF".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JPERSPEKTIF] ENABLE TRIGGER [TU_JPERSPEKTIF]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_JSTANDAR] on [dbo].[JSTANDAR] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "JSTANDAR" if children still exist in "STDHARGA"  */
    if exists (select 1
               from   STDHARGA t2, deleted t1
               where  t2.KDJNSSTD = t1.KDJNSSTD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "STDHARGA". Cannot delete parent "JSTANDAR".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JSTANDAR] ENABLE TRIGGER [TD_JSTANDAR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_JSTANDAR] on [dbo].[JSTANDAR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "JSTANDAR" if children still exist in "STDHARGA"  */
      if update(KDJNSSTD)
      begin
         if exists (select 1
                    from   STDHARGA t2, inserted i1, deleted d1
                    where  t2.KDJNSSTD = d1.KDJNSSTD
                     and  (i1.KDJNSSTD != d1.KDJNSSTD))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "STDHARGA". Cannot modify parent code in "JSTANDAR".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JSTANDAR] ENABLE TRIGGER [TU_JSTANDAR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_JTRNLKAS] on [dbo].[JTRNLKAS] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "SPPDETRTL"  */
    if exists (select 1
               from   SPPDETRTL t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPPDETRTL". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "SPPDETR"  */
    if exists (select 1
               from   SPPDETR t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPPDETR". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "SPPDETB"  */
    if exists (select 1
               from   SPPDETB t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPPDETB". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "SPPDETD"  */
    if exists (select 1
               from   SPPDETD t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPPDETD". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "SPMDETB"  */
    if exists (select 1
               from   SPMDETB t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPMDETB". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "SPMDETRTL"  */
    if exists (select 1
               from   SPMDETRTL t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPMDETRTL". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "SPMDETR"  */
    if exists (select 1
               from   SPMDETR t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPMDETR". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "SPMDETD"  */
    if exists (select 1
               from   SPMDETD t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPMDETD". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "SP2DDETR"  */
    if exists (select 1
               from   SP2DDETR t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DDETR". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "SP2DDETRTL"  */
    if exists (select 1
               from   SP2DDETRTL t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DDETRTL". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "SP2DDETB"  */
    if exists (select 1
               from   SP2DDETB t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DDETB". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "SP2DDETD"  */
    if exists (select 1
               from   SP2DDETD t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DDETD". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "RKMDETR"  */
    if exists (select 1
               from   RKMDETR t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETR". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "RKMDETRTL"  */
    if exists (select 1
               from   RKMDETRTL t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETRTL". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "RKMDETB"  */
    if exists (select 1
               from   RKMDETB t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETB". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "RKMDETD"  */
    if exists (select 1
               from   RKMDETD t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETD". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "RKMDETT"  */
    if exists (select 1
               from   RKMDETT t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETT". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "SPJDETR"  */
    if exists (select 1
               from   SPJDETR t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETR". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "SPJDETRTL"  */
    if exists (select 1
               from   SPJDETRTL t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETRTL". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "SPJDETB"  */
    if exists (select 1
               from   SPJDETB t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETB". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "SPJDETD"  */
    if exists (select 1
               from   SPJDETD t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETD". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "BPKDETD"  */
    if exists (select 1
               from   BPKDETD t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPKDETD". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "BPKDETB"  */
    if exists (select 1
               from   BPKDETB t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPKDETB". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "BPKDETRTL"  */
    if exists (select 1
               from   BPKDETRTL t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPKDETRTL". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "BPKDETR"  */
    if exists (select 1
               from   BPKDETR t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPKDETR". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "TBPDETR"  */
    if exists (select 1
               from   TBPDETR t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPDETR". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "TBPDETRTL"  */
    if exists (select 1
               from   TBPDETRTL t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPDETRTL". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "TBPDETB"  */
    if exists (select 1
               from   TBPDETB t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPDETB". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "TBPDETD"  */
    if exists (select 1
               from   TBPDETD t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPDETD". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "TBPDETT"  */
    if exists (select 1
               from   TBPDETT t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPDETT". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "PANJARDET"  */
    if exists (select 1
               from   PANJARDET t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PANJARDET". Cannot delete parent "JTRNLKAS".'
          goto error
       end

    /*  Cannot delete parent "JTRNLKAS" if children still exist in "BKBANKDET"  */
    if exists (select 1
               from   BKBANKDET t2, deleted t1
               where  t2.NOJETRA = t1.NOJETRA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKBANKDET". Cannot delete parent "JTRNLKAS".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JTRNLKAS] ENABLE TRIGGER [TD_JTRNLKAS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_JTRNLKAS] on [dbo].[JTRNLKAS] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "PERSACC" must exist when inserting a child in "JTRNLKAS"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "JTRNLKAS".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JTRNLKAS] ENABLE TRIGGER [TI_JTRNLKAS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_JTRNLKAS] on [dbo].[JTRNLKAS] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "PERSACC" must exist when updating a child in "JTRNLKAS"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "JTRNLKAS".'
               goto error
            end
      end
      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "SPPDETRTL"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   SPPDETRTL t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPPDETRTL". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "SPPDETR"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   SPPDETR t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPPDETR". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "SPPDETB"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   SPPDETB t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPPDETB". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "SPPDETD"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   SPPDETD t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPPDETD". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "SPMDETB"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   SPMDETB t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPMDETB". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "SPMDETRTL"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   SPMDETRTL t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPMDETRTL". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "SPMDETR"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   SPMDETR t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPMDETR". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "SPMDETD"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   SPMDETD t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPMDETD". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "SP2DDETR"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   SP2DDETR t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DDETR". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "SP2DDETRTL"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   SP2DDETRTL t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DDETRTL". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "SP2DDETB"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   SP2DDETB t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DDETB". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "SP2DDETD"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   SP2DDETD t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DDETD". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "RKMDETR"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   RKMDETR t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETR". Cannot modify parent code in "JTRNLKAS".'
               goto error
  end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "RKMDETRTL"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   RKMDETRTL t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETRTL". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "RKMDETB"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   RKMDETB t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETB". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "RKMDETD"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   RKMDETD t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETD". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "RKMDETT"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   RKMDETT t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETT". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "SPJDETR"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   SPJDETR t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETR". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "SPJDETRTL"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   SPJDETRTL t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETRTL". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "SPJDETB"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   SPJDETB t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETB". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "SPJDETD"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   SPJDETD t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETD". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "BPKDETD"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   BPKDETD t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPKDETD". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "BPKDETB"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   BPKDETB t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPKDETB". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "BPKDETRTL"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   BPKDETRTL t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPKDETRTL". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "BPKDETR"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   BPKDETR t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPKDETR". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "TBPDETR"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   TBPDETR t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPDETR". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "TBPDETRTL"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   TBPDETRTL t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPDETRTL". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "TBPDETB"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   TBPDETB t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPDETB". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "TBPDETD"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   TBPDETD t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPDETD". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "TBPDETT"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   TBPDETT t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPDETT". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "PANJARDET"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   PANJARDET t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PANJARDET". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JTRNLKAS" if children still exist in "BKBANKDET"  */
      if update(NOJETRA)
      begin
         if exists (select 1
                    from   BKBANKDET t2, inserted i1, deleted d1
                    where  t2.NOJETRA = d1.NOJETRA
                     and  (i1.NOJETRA != d1.NOJETRA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKBANKDET". Cannot modify parent code in "JTRNLKAS".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JTRNLKAS] ENABLE TRIGGER [TU_JTRNLKAS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE trigger [dbo].[TU_JURNAL] on [dbo].[jurnal] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return


     if update(tgl_valid)
     
      BEGIN

		DECLARE @NOBUKTI VARCHAR(100), @UNITKEY VARCHAR(10),@KDPERD VARCHAR(30),@KDPERK VARCHAR(30),@JURNAL INT,@KDSTATUS VARCHAR(10), @tgl_valid DATETIME
		SET @JURNAL=1
		declare cjurupdate cursor for
		SELECT  distinct I.nobukti,I.unitkey,   I.jurnal,I.KDSTATUS,I.tgl_valid from INSERTED I INNER JOIN JURNAL B ON I.UNITKEY=B.UNITKEY AND I.NOBUKTI=B.NOBUKTI AND I.KDPERD=B.KDPERD AND I.KDPERK=B.KDPERK AND I.JURNAL=B.JURNAL WHERE B.JURNAL=@JURNAL
		open cjurupdate
		fetch next from cjurupdate into @NOBUKTI , @UNITKEY ,@JURNAL, @KDSTATUS, @tgl_valid
		while @@FETCH_STATUS=0
		begin	
			IF @tgl_valid IS NOT NULL
			BEGIN
				DELETE FROM JURNAL WHERE unitkey=@UNITKEY AND nobukti=@NOBUKTI AND JURNAL=3 AND kdstatus=@KDSTATUS 
				EXEC WSP_JURNAL64 @NOBUKTI , @UNITKEY  ,@JURNAL, @KDSTATUS, @tgl_valid
				
				EXEC WSP_JURNALPROGNOSIS @NOBUKTI , @UNITKEY ,@JURNAL ,@KDSTATUS, @tgl_valid
				
				
				------SELECT @NOBUKTI 
				------ SELECT @UNITKEY  
				------ SELECT @JURNAL
				------ SELECT @KDSTATUS
				------  SELECT @tgl_valid
			END ELSE
			IF @tgl_valid IS  NULL	
			BEGIN
				DELETE FROM JURNAL WHERE unitkey=@UNITKEY AND nobukti=@NOBUKTI AND JURNAL=3 AND kdstatus=@KDSTATUS
			END	
			
			
			fetch next from cjurupdate into @NOBUKTI , @UNITKEY ,@JURNAL, @KDSTATUS, @tgl_valid
		end
		close cjurupdate
		deallocate cjurupdate
		
		
		
      END
      
    


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end





GO
ALTER TABLE [dbo].[jurnal] ENABLE TRIGGER [TU_JURNAL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_JURTUP] on [dbo].[JURTUP] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "JURTUP" if children still exist in "NRCELIMINASI"  */
    if exists (select 1
               from   NRCELIMINASI t2, deleted t1
               where  t2.NOTUTUP = t1.NOTUTUP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "NRCELIMINASI". Cannot delete parent "JURTUP".'
          goto error
       end

    /*  Cannot delete parent "JURTUP" if children still exist in "TUPD"  */
    if exists (select 1
               from   TUPD t2, deleted t1
               where  t2.NOTUTUP = t1.NOTUTUP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TUPD". Cannot delete parent "JURTUP".'
          goto error
       end

    /*  Cannot delete parent "JURTUP" if children still exist in "TUPR"  */
    if exists (select 1
               from   TUPR t2, deleted t1
               where  t2.NOTUTUP = t1.NOTUTUP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TUPR". Cannot delete parent "JURTUP".'
          goto error
       end

    /*  Cannot delete parent "JURTUP" if children still exist in "TUPB"  */
    if exists (select 1
               from   TUPB t2, deleted t1
               where  t2.NOTUTUP = t1.NOTUTUP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TUPB". Cannot delete parent "JURTUP".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JURTUP] ENABLE TRIGGER [TD_JURTUP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_JURTUP] on [dbo].[JURTUP] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "PERSACC" must exist when inserting a child in "JURTUP"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "JURTUP".'
             goto error
          end
    end
    /*  Parent "MATANGNRC" must exist when inserting a child in "JURTUP"  */
    if update(MTGKEY)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  MTGKEY is null)
       if @numnull != @numrows
          if (select count(*)
              from   MATANGNRC t1, inserted t2
              where  t1.MTGKEY = t2.MTGKEY) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGNRC". Cannot create child in "JURTUP".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JURTUP] ENABLE TRIGGER [TI_JURTUP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_JURTUP] on [dbo].[JURTUP] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "PERSACC" must exist when updating a child in "JURTUP"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "JURTUP".'
               goto error
            end
      end
      /*  Parent "MATANGNRC" must exist when updating a child in "JURTUP"  */
      if update(MTGKEY)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  MTGKEY is null)
         if @numnull != @numrows
            if (select count(*)
                from   MATANGNRC t1, inserted t2
                where  t1.MTGKEY = t2.MTGKEY) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGNRC" does not exist. Cannot modify child in "JURTUP".'
               goto error
            end
      end
      /*  Cannot modify parent code in "JURTUP" if children still exist in "NRCELIMINASI"  */
      if update(NOTUTUP)
      begin
         if exists (select 1
                    from   NRCELIMINASI t2, inserted i1, deleted d1
                    where  t2.NOTUTUP = d1.NOTUTUP
                     and  (i1.NOTUTUP != d1.NOTUTUP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "NRCELIMINASI". Cannot modify parent code in "JURTUP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JURTUP" if children still exist in "TUPD"  */
      if update(NOTUTUP)
      begin
         if exists (select 1
                    from   TUPD t2, inserted i1, deleted d1
                    where  t2.NOTUTUP = d1.NOTUTUP
                     and  (i1.NOTUTUP != d1.NOTUTUP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TUPD". Cannot modify parent code in "JURTUP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JURTUP" if children still exist in "TUPR"  */
      if update(NOTUTUP)
      begin
         if exists (select 1
                    from   TUPR t2, inserted i1, deleted d1
                    where  t2.NOTUTUP = d1.NOTUTUP
                     and  (i1.NOTUTUP != d1.NOTUTUP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TUPR". Cannot modify parent code in "JURTUP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "JURTUP" if children still exist in "TUPB"  */
      if update(NOTUTUP)
      begin
         if exists (select 1
                    from   TUPB t2, inserted i1, deleted d1
                    where  t2.NOTUTUP = d1.NOTUTUP
                     and  (i1.NOTUTUP != d1.NOTUTUP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TUPB". Cannot modify parent code in "JURTUP".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[JURTUP] ENABLE TRIGGER [TU_JURTUP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_KASB] on [dbo].[KASB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "TAHAP" must exist when inserting a child in "KASB"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "KASB".'
             goto error
          end
    end
    /*  Parent "BULAN" must exist when inserting a child in "KASB"  */
    if update(KD_BULAN)
    begin
       if (select count(*)
           from   BULAN t1, inserted t2
           where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BULAN". Cannot create child in "KASB".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "KASB"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "KASB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
 raiserror (@errmsg,@errno,  1)
    rollback  transaction
END
GO
ALTER TABLE [dbo].[KASB] ENABLE TRIGGER [TI_KASB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_KASB] on [dbo].[KASB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "TAHAP" must exist when updating a child in "KASB"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "KASB".'
               goto error
            end
      end
      /*  Parent "BULAN" must exist when updating a child in "KASB"  */
      if update(KD_BULAN)
      begin
         if (select count(*)
             from   BULAN t1, inserted t2
             where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BULAN" does not exist. Cannot modify child in "KASB".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "KASB"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "KASB".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
  raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[KASB] ENABLE TRIGGER [TU_KASB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_KASD] on [dbo].[KASD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "KASD"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "KASD".'
             goto error
          end
    end
    /*  Parent "BULAN" must exist when inserting a child in "KASD"  */
    if update(KD_BULAN)
    begin
       if (select count(*)
           from   BULAN t1, inserted t2
           where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BULAN". Cannot create child in "KASD".'
             goto error
          end
    end
    /*  Parent "TAHAP" must exist when inserting a child in "KASD"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "KASD".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
END



GO
ALTER TABLE [dbo].[KASD] ENABLE TRIGGER [TI_KASD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_KASD] on [dbo].[KASD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "KASD"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "KASD".'
               goto error
            end
      end
      /*  Parent "BULAN" must exist when updating a child in "KASD"  */
      if update(KD_BULAN)
      begin
         if (select count(*)
             from   BULAN t1, inserted t2
             where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BULAN" does not exist. Cannot modify child in "KASD".'
               goto error
            end
      end
      /*  Parent "TAHAP" must exist when updating a child in "KASD"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "KASD".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
  raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[KASD] ENABLE TRIGGER [TU_KASD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_KASKEG] on [dbo].[KASKEG] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "BULAN" must exist when inserting a child in "KASKEG"  */
    if update(KD_BULAN)
    begin
       if (select count(*)
           from   BULAN t1, inserted t2
           where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BULAN". Cannot create child in "KASKEG".'
             goto error
          end
    end
    /*  Parent "TAHAP" must exist when inserting a child in "KASKEG"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "KASKEG".'
             goto error
          end
    end
    /*  Parent "MKEGIATAN" must exist when inserting a child in "KASKEG"  */
    if update(KDKEGUNIT)
    begin
       if (select count(*)
           from   MKEGIATAN t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "KASKEG".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "KASKEG"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "KASKEG".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
   raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[KASKEG] ENABLE TRIGGER [TI_KASKEG]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_KASKEG] on [dbo].[KASKEG] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "BULAN" must exist when updating a child in "KASKEG"  */
      if update(KD_BULAN)
      begin
         if (select count(*)
             from   BULAN t1, inserted t2
             where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BULAN" does not exist. Cannot modify child in "KASKEG".'
               goto error
            end
      end
      /*  Parent "TAHAP" must exist when updating a child in "KASKEG"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "KASKEG".'
               goto error
            end
      end
      /*  Parent "MKEGIATAN" must exist when updating a child in "KASKEG"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "KASKEG".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "KASKEG"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "KASKEG".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
 raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[KASKEG] ENABLE TRIGGER [TU_KASKEG]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_KASRTL] on [dbo].[KASRTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "KASRTL"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "KASRTL".'
             goto error
          end
    end
    /*  Parent "TAHAP" must exist when inserting a child in "KASRTL"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "KASRTL".'
             goto error
          end
    end
    /*  Parent "BULAN" must exist when inserting a child in "KASRTL"  */
    if update(KD_BULAN)
    begin
       if (select count(*)
           from   BULAN t1, inserted t2
           where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BULAN". Cannot create child in "KASRTL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
END


GO
ALTER TABLE [dbo].[KASRTL] ENABLE TRIGGER [TI_KASRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_KASRTL] on [dbo].[KASRTL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "KASRTL"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "KASRTL".'
               goto error
            end
      end
      /*  Parent "TAHAP" must exist when updating a child in "KASRTL"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "KASRTL".'
               goto error
            end
      end
      /*  Parent "BULAN" must exist when updating a child in "KASRTL"  */
      if update(KD_BULAN)
      begin
         if (select count(*)
             from   BULAN t1, inserted t2
             where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BULAN" does not exist. Cannot modify child in "KASRTL".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
  raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[KASRTL] ENABLE TRIGGER [TU_KASRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--USE [V@LID49V6_2019]
--GO
--/****** Object:  Trigger [dbo].[TD_KEGUNIT]    Script Date: 07/08/2019 22:16:49 ******/
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO




CREATE  trigger [dbo].[TD_KEGUNIT] on [dbo].[KEGUNIT] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "KEGUNIT" if children still exist in "KASKEG"  */
    if exists (select 1
               from   KASKEG t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.KDKEGUNIT = t1.KDKEGUNIT
                AND   t2.KDTAHAP = t1.KDTAHAP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KASKEG". Cannot delete parent "KEGUNIT".'
          goto error
       end

    /*  Cannot delete parent "KEGUNIT" if children still exist in "DASKR"  */
--    if exists (select 1
--               from   DASKR t2, deleted t1
--               where  t2.UNITKEY = t1.UNITKEY
--                and   t2.KDKEGUNIT = t1.KDKEGUNIT)
--       begin
--          select @errno  = 50006,
--                 @errmsg = 'Children still exist in "DASKR". Cannot delete parent "KEGUNIT".'
--          goto error
--       end

    /*  Cannot delete parent "KEGUNIT" if children still exist in "TTAPDR"  */
--    if exists (select 1
--               from   TTAPDR t2, deleted t1
--               where     t2.UNITKEY = t1.UNITKEY
--                AND   t2.KDTAHAP = t1.KDTAHAP
--                and   t2.KDKEGUNIT = t1.KDKEGUNIT)
--       begin
--          select @errno  = 50006,
--                 @errmsg = 'Children still exist in "TTAPDR". Cannot delete parent "KEGUNIT".'
--          goto error
--       end

    /*  Cannot delete parent "KEGUNIT" if children still exist in "RASKBLNR"  */
--    if exists (select 1
--               from   RASKBLNR t2, deleted t1
--               where  t2.KDTAHAP = t1.KDTAHAP
--                and   t2.UNITKEY = t1.UNITKEY
--                and   t2.KDKEGUNIT = t1.KDKEGUNIT)
--       begin
--          select @errno  = 50006,
--                 @errmsg = 'Children still exist in "RASKBLNR". Cannot delete parent "KEGUNIT".'
--          goto error
--       end

    /*  Cannot delete parent "KEGUNIT" if children still exist in "RASKR"  */
    if exists (select 1
               from   RASKR t2, deleted t1
               where  t2.KDTAHAP = t1.KDTAHAP
                and   t2.UNITKEY = t1.UNITKEY
                and   t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKR". Cannot delete parent "KEGUNIT".'
          goto error
       end

    /*  Cannot delete parent "KEGUNIT" if children still exist in "KINKEG"  */
    if exists (select 1
               from   KINKEG t2, deleted t1
               where  t2.KDTAHAP = t1.KDTAHAP
                and   t2.UNITKEY = t1.UNITKEY
                and   t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KINKEG". Cannot delete parent "KEGUNIT".'
          goto error
       end


    return

/*  Errors handling  */
error:
  raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[KEGUNIT] ENABLE TRIGGER [TD_KEGUNIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--USE [V@LID49V6_2019]
--GO
--/****** Object:  Trigger [dbo].[TI_KEGUNIT]    Script Date: 07/08/2019 22:17:03 ******/
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO

CREATE trigger [dbo].[TI_KEGUNIT] on [dbo].[KEGUNIT] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "SIFATKEG" must exist when inserting a child in "KEGUNIT"  */
    if update(KDSIFAT)
    begin
       if (select count(*)
           from   SIFATKEG t1, inserted t2
           where  t1.KDSIFAT = t2.KDSIFAT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SIFATKEG". Cannot create child in "KEGUNIT".'
             goto error
          end
    end
    /*  Parent "PGRMUNIT" must exist when inserting a child in "KEGUNIT"  */
    if update(KDTAHAP) or
       update(UNITKEY) or
       update(IDPRGRM)
    begin
       if (select count(*)
           from   PGRMUNIT t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP
            and   t1.UNITKEY = t2.UNITKEY
            and   t1.IDPRGRM = t2.IDPRGRM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PGRMUNIT". Cannot create child in "KEGUNIT".'
             goto error
          end
    end
    /*  Parent "MKEGIATAN" must exist when inserting a child in "KEGUNIT"  */
    if update(KDKEGUNIT)
    begin
       if (select count(*)
           from   MKEGIATAN t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "KEGUNIT".'
             goto error
          end
    end
    /*  Parent "PEGAWAI" must exist when inserting a child in "KEGUNIT"  */
    if update(NIP)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  NIP is null)
       if @numnull != @numrows
          if (select count(*)
              from   PEGAWAI t1, inserted t2
              where  t1.NIP = t2.NIP) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PEGAWAI". Cannot create child in "KEGUNIT".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[KEGUNIT] ENABLE TRIGGER [TI_KEGUNIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--USE [V@LID49V6_2019]
--GO
--/****** Object:  Trigger [dbo].[TU_KEGUNIT]    Script Date: 07/08/2019 22:17:10 ******/
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO

CREATE trigger [dbo].[TU_KEGUNIT] on [dbo].[KEGUNIT] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "SIFATKEG" must exist when updating a child in "KEGUNIT"  */
      if update(KDSIFAT)
      begin
         if (select count(*)
             from   SIFATKEG t1, inserted t2
             where  t1.KDSIFAT = t2.KDSIFAT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SIFATKEG" does not exist. Cannot modify child in "KEGUNIT".'
               goto error
            end
      end
      /*  Parent "PGRMUNIT" must exist when updating a child in "KEGUNIT"  */
      if update(KDTAHAP) or
         update(UNITKEY) or
         update(IDPRGRM)
      begin
         if (select count(*)
             from   PGRMUNIT t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP
              and   t1.UNITKEY = t2.UNITKEY
              and   t1.IDPRGRM = t2.IDPRGRM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PGRMUNIT" does not exist. Cannot modify child in "KEGUNIT".'
               goto error
            end
      end
      /*  Parent "MKEGIATAN" must exist when updating a child in "KEGUNIT"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "KEGUNIT".'
               goto error
            end
      end
      /*  Parent "PEGAWAI" must exist when updating a child in "KEGUNIT"  */
      if update(NIP)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  NIP is null)
         if @numnull != @numrows
            if (select count(*)
                from   PEGAWAI t1, inserted t2
                where  t1.NIP = t2.NIP) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'PEGAWAI" does not exist. Cannot modify child in "KEGUNIT".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[KEGUNIT] ENABLE TRIGGER [TU_KEGUNIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_KHUSUSREK] on [dbo].[KHUSUSREK] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "KHUSUSREK" if children still exist in "MATANGD"  */
    if exists (select 1
               from   MATANGD t2, deleted t1
               where  t2.KDKHUSUS = t1.KDKHUSUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGD". Cannot delete parent "KHUSUSREK".'
          goto error
       end

    /*  Cannot delete parent "KHUSUSREK" if children still exist in "MATANGR"  */
    if exists (select 1
               from   MATANGR t2, deleted t1
               where  t2.KDKHUSUS = t1.KDKHUSUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGR". Cannot delete parent "KHUSUSREK".'
          goto error
       end

    /*  Cannot delete parent "KHUSUSREK" if children still exist in "MATANGNRC"  */
    if exists (select 1
               from   MATANGNRC t2, deleted t1
               where  t2.KDKHUSUS = t1.KDKHUSUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGNRC". Cannot delete parent "KHUSUSREK".'
          goto error
       end

    /*  Cannot delete parent "KHUSUSREK" if children still exist in "MATANGB"  */
    if exists (select 1
               from   MATANGB t2, deleted t1
               where  t2.KDKHUSUS = t1.KDKHUSUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGB". Cannot delete parent "KHUSUSREK".'
          goto error
       end

    /*  Cannot delete parent "KHUSUSREK" if children still exist in "MATANGDLRA"  */
    if exists (select 1
               from   MATANGDLRA t2, deleted t1
               where  t2.KDKHUSUS = t1.KDKHUSUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGDLRA". Cannot delete parent "KHUSUSREK".'
          goto error
       end

    /*  Cannot delete parent "KHUSUSREK" if children still exist in "MATANGRLRA"  */
    if exists (select 1
               from   MATANGRLRA t2, deleted t1
               where  t2.KDKHUSUS = t1.KDKHUSUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGRLRA". Cannot delete parent "KHUSUSREK".'
          goto error
       end

    /*  Cannot delete parent "KHUSUSREK" if children still exist in "MATANGBLRA"  */
    if exists (select 1
               from   MATANGBLRA t2, deleted t1
               where  t2.KDKHUSUS = t1.KDKHUSUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGBLRA". Cannot delete parent "KHUSUSREK".'
          goto error
       end

    /*  Cannot delete parent "KHUSUSREK" if children still exist in "MATANGDLAK"  */
    if exists (select 1
               from   MATANGDLAK t2, deleted t1
               where  t2.KDKHUSUS = t1.KDKHUSUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGDLAK". Cannot delete parent "KHUSUSREK".'
          goto error
       end

    /*  Cannot delete parent "KHUSUSREK" if children still exist in "MATANGRLAK"  */
    if exists (select 1
               from   MATANGRLAK t2, deleted t1
               where  t2.KDKHUSUS = t1.KDKHUSUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGRLAK". Cannot delete parent "KHUSUSREK".'
          goto error
       end

    /*  Cannot delete parent "KHUSUSREK" if children still exist in "MATANGBLAK"  */
    if exists (select 1
               from   MATANGBLAK t2, deleted t1
               where  t2.KDKHUSUS = t1.KDKHUSUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGBLAK". Cannot delete parent "KHUSUSREK".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[KHUSUSREK] ENABLE TRIGGER [TD_KHUSUSREK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_KHUSUSREK] on [dbo].[KHUSUSREK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "KHUSUSREK" if children still exist in "MATANGD"  */
      if update(KDKHUSUS)
      begin
         if exists (select 1
                    from   MATANGD t2, inserted i1, deleted d1
                    where  t2.KDKHUSUS = d1.KDKHUSUS
                     and  (i1.KDKHUSUS != d1.KDKHUSUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGD". Cannot modify parent code in "KHUSUSREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "KHUSUSREK" if children still exist in "MATANGR"  */
      if update(KDKHUSUS)
      begin
         if exists (select 1
                    from   MATANGR t2, inserted i1, deleted d1
                    where  t2.KDKHUSUS = d1.KDKHUSUS
                     and  (i1.KDKHUSUS != d1.KDKHUSUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGR". Cannot modify parent code in "KHUSUSREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "KHUSUSREK" if children still exist in "MATANGNRC"  */
      if update(KDKHUSUS)
      begin
         if exists (select 1
                    from   MATANGNRC t2, inserted i1, deleted d1
                    where  t2.KDKHUSUS = d1.KDKHUSUS
                     and  (i1.KDKHUSUS != d1.KDKHUSUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGNRC". Cannot modify parent code in "KHUSUSREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "KHUSUSREK" if children still exist in "MATANGB"  */
      if update(KDKHUSUS)
      begin
         if exists (select 1
                    from   MATANGB t2, inserted i1, deleted d1
                    where  t2.KDKHUSUS = d1.KDKHUSUS
                     and  (i1.KDKHUSUS != d1.KDKHUSUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGB". Cannot modify parent code in "KHUSUSREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "KHUSUSREK" if children still exist in "MATANGDLRA"  */
      if update(KDKHUSUS)
      begin
         if exists (select 1
                    from   MATANGDLRA t2, inserted i1, deleted d1
                    where  t2.KDKHUSUS = d1.KDKHUSUS
                     and  (i1.KDKHUSUS != d1.KDKHUSUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGDLRA". Cannot modify parent code in "KHUSUSREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "KHUSUSREK" if children still exist in "MATANGRLRA"  */
      if update(KDKHUSUS)
      begin
         if exists (select 1
                    from   MATANGRLRA t2, inserted i1, deleted d1
                    where  t2.KDKHUSUS = d1.KDKHUSUS
                     and  (i1.KDKHUSUS != d1.KDKHUSUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGRLRA". Cannot modify parent code in "KHUSUSREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "KHUSUSREK" if children still exist in "MATANGBLRA"  */
      if update(KDKHUSUS)
      begin
         if exists (select 1
                    from   MATANGBLRA t2, inserted i1, deleted d1
                    where  t2.KDKHUSUS = d1.KDKHUSUS
                     and  (i1.KDKHUSUS != d1.KDKHUSUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGBLRA". Cannot modify parent code in "KHUSUSREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "KHUSUSREK" if children still exist in "MATANGDLAK"  */
      if update(KDKHUSUS)
      begin
         if exists (select 1
                    from   MATANGDLAK t2, inserted i1, deleted d1
                    where  t2.KDKHUSUS = d1.KDKHUSUS
                     and  (i1.KDKHUSUS != d1.KDKHUSUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGDLAK". Cannot modify parent code in "KHUSUSREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "KHUSUSREK" if children still exist in "MATANGRLAK"  */
      if update(KDKHUSUS)
      begin
         if exists (select 1
                    from   MATANGRLAK t2, inserted i1, deleted d1
                    where  t2.KDKHUSUS = d1.KDKHUSUS
                     and  (i1.KDKHUSUS != d1.KDKHUSUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGRLAK". Cannot modify parent code in "KHUSUSREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "KHUSUSREK" if children still exist in "MATANGBLAK"  */
      if update(KDKHUSUS)
      begin
         if exists (select 1
                    from   MATANGBLAK t2, inserted i1, deleted d1
                    where  t2.KDKHUSUS = d1.KDKHUSUS
                     and  (i1.KDKHUSUS != d1.KDKHUSUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGBLAK". Cannot modify parent code in "KHUSUSREK".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[KHUSUSREK] ENABLE TRIGGER [TU_KHUSUSREK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_KINKEG] on [dbo].[KINKEG] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "JKINKEG" must exist when inserting a child in "KINKEG"  */
    if update(KDJKK)
    begin
       if (select count(*)
           from   JKINKEG t1, inserted t2
           where  t1.KDJKK = t2.KDJKK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JKINKEG". Cannot create child in "KINKEG".'
             goto error
          end
    end
    /*  Parent "MKEGIATAN" must exist when inserting a child in "KINKEG"  */
    if update(KDKEGUNIT)
    begin
       if (select count(*)
           from   MKEGIATAN t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "KINKEG".'
             goto error
          end
    end
    /*  Parent "TAHAP" must exist when inserting a child in "KINKEG"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "KINKEG".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "KINKEG"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "KINKEG".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[KINKEG] ENABLE TRIGGER [TI_KINKEG]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_KINKEG] on [dbo].[KINKEG] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "JKINKEG" must exist when updating a child in "KINKEG"  */
      if update(KDJKK)
      begin
         if (select count(*)
             from   JKINKEG t1, inserted t2
             where  t1.KDJKK = t2.KDJKK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JKINKEG" does not exist. Cannot modify child in "KINKEG".'
               goto error
            end
      end
      /*  Parent "MKEGIATAN" must exist when updating a child in "KINKEG"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "KINKEG".'
               goto error
            end
      end
      /*  Parent "TAHAP" must exist when updating a child in "KINKEG"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "KINKEG".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "KINKEG"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "KINKEG".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
  raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[KINKEG] ENABLE TRIGGER [TU_KINKEG]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_KINNON] on [dbo].[KINNON] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "JKINKEG" must exist when inserting a child in "KINNON"  */
    if update(KDJKK)
    begin
       if (select count(*)
           from   JKINKEG t1, inserted t2
           where  t1.KDJKK = t2.KDJKK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JKINKEG". Cannot create child in "KINNON".'
             goto error
          end
    end
    /*  Parent "TAHAP" must exist when inserting a child in "KINNON"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "KINNON".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "KINNON"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "KINNON".'
             goto error
          end
    end
    /*  Parent "ZKODE" must exist when inserting a child in "KINNON"  */
    if update(IDXKODE)
    begin
       if (select count(*)
           from   ZKODE t1, inserted t2
           where  t1.IDXKODE = t2.IDXKODE) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "ZKODE". Cannot create child in "KINNON".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
raiserror (@errmsg,@errno,  1)
    rollback  transaction
END


GO
ALTER TABLE [dbo].[KINNON] ENABLE TRIGGER [TI_KINNON]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_KINNON] on [dbo].[KINNON] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "JKINKEG" must exist when updating a child in "KINNON"  */
      if update(KDJKK)
      begin
         if (select count(*)
             from   JKINKEG t1, inserted t2
             where  t1.KDJKK = t2.KDJKK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JKINKEG" does not exist. Cannot modify child in "KINNON".'
               goto error
            end
      end
      /*  Parent "TAHAP" must exist when updating a child in "KINNON"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "KINNON".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "KINNON"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "KINNON".'
               goto error
            end
      end
      /*  Parent "ZKODE" must exist when updating a child in "KINNON"  */
      if update(IDXKODE)
      begin
         if (select count(*)
             from   ZKODE t1, inserted t2
             where  t1.IDXKODE = t2.IDXKODE) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ZKODE" does not exist. Cannot modify child in "KINNON".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[KINNON] ENABLE TRIGGER [TU_KINNON]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_KPA] on [dbo].[KPA] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "KPA" if children still exist in "BENDKPA"  */
    if exists (select 1
               from   BENDKPA t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NIP = t1.NIP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BENDKPA". Cannot delete parent "KPA".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
END



GO
ALTER TABLE [dbo].[KPA] ENABLE TRIGGER [TD_KPA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_KPA] on [dbo].[KPA] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "KPA"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "KPA".'
             goto error
          end
    end
    /*  Parent "PEGAWAI" must exist when inserting a child in "KPA"  */
    if update(NIP)
    begin
       if (select count(*)
           from   PEGAWAI t1, inserted t2
           where  t1.NIP = t2.NIP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PEGAWAI". Cannot create child in "KPA".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
END



GO
ALTER TABLE [dbo].[KPA] ENABLE TRIGGER [TI_KPA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_KPA] on [dbo].[KPA] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "KPA"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "KPA".'
               goto error
            end
      end
      /*  Parent "PEGAWAI" must exist when updating a child in "KPA"  */
      if update(NIP)
      begin
         if (select count(*)
             from   PEGAWAI t1, inserted t2
             where  t1.NIP = t2.NIP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PEGAWAI" does not exist. Cannot modify child in "KPA".'
               goto error
            end
      end
      /*  Cannot modify parent code in "KPA" if children still exist in "BENDKPA"  */
      if update(UNITKEY) or
         update(NIP)
      begin
         if exists (select 1
                    from   BENDKPA t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NIP = d1.NIP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NIP != d1.NIP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BENDKPA". Cannot modify parent code in "KPA".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[KPA] ENABLE TRIGGER [TU_KPA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_MATANGB] on [dbo].[MATANGB] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MATANGB" if children still exist in "DASKUMB"  */
    if exists (select 1
               from   DASKUMB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKUMB". Cannot delete parent "MATANGB".'
          goto error
       end

    /*  Cannot delete parent "MATANGB" if children still exist in "RASKB"  */
    if exists (select 1
               from   RASKB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKB". Cannot delete parent "MATANGB".'
          goto error
       end

    /*  Cannot delete parent "MATANGB" if children still exist in "DASKB"  */
    if exists (select 1
               from   DASKB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKB". Cannot delete parent "MATANGB".'
          goto error
       end

    /*  Cannot delete parent "MATANGB" if children still exist in "SKOBDET"  */
    if exists (select 1
               from   SKOBDET t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKOBDET". Cannot delete parent "MATANGB".'
          goto error
       end

    /*  Cannot delete parent "MATANGB" if children still exist in "SPPDETB"  */
    if exists (select 1
               from   SPPDETB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPPDETB". Cannot delete parent "MATANGB".'
          goto error
       end

    /*  Cannot delete parent "MATANGB" if children still exist in "SPMDETB"  */
    if exists (select 1
               from   SPMDETB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPMDETB". Cannot delete parent "MATANGB".'
          goto error
       end

    /*  Cannot delete parent "MATANGB" if children still exist in "SETPFK"  */
    if exists (select 1
               from   SETPFK t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SETPFK". Cannot delete parent "MATANGB".'
          goto error
       end

    /*  Cannot delete parent "MATANGB" if children still exist in "SP2DDETB"  */
    if exists (select 1
               from   SP2DDETB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DDETB". Cannot delete parent "MATANGB".'
          goto error
       end

    /*  Cannot delete parent "MATANGB" if children still exist in "RKMDETB"  */
    if exists (select 1
               from   RKMDETB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETB". Cannot delete parent "MATANGB".'
          goto error
       end

    /*  Cannot delete parent "MATANGB" if children still exist in "SPJDETB"  */
    if exists (select 1
               from   SPJDETB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETB". Cannot delete parent "MATANGB".'
          goto error
     end

    /*  Cannot delete parent "MATANGB" if children still exist in "BPKDETB"  */
    if exists (select 1
               from   BPKDETB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPKDETB". Cannot delete parent "MATANGB".'
          goto error
       end

    /*  Cannot delete parent "MATANGB" if children still exist in "TBPDETB"  */
    if exists (select 1
               from   TBPDETB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPDETB". Cannot delete parent "MATANGB".'
          goto error
       end

    /*  Cannot delete parent "MATANGB" if children still exist in "RBMDETB"  */
    if exists (select 1
               from   RBMDETB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RBMDETB". Cannot delete parent "MATANGB".'
          goto error
       end

    /*  Cannot delete parent "MATANGB" if children still exist in "TUPB"  */
    if exists (select 1
               from   TUPB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TUPB". Cannot delete parent "MATANGB".'
          goto error
       end

    /*  Cannot delete parent "MATANGB" if children still exist in "SALDOLRAB"  */
    if exists (select 1
               from   SALDOLRAB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLRAB". Cannot delete parent "MATANGB".'
          goto error
       end

    /*  Cannot delete parent "MATANGB" if children still exist in "SETBLRA"  */
    if exists (select 1
               from   SETBLRA t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SETBLRA". Cannot delete parent "MATANGB".'
          goto error
       end

    /*  Cannot delete parent "MATANGB" if children still exist in "SETBLAK"  */
    if exists (select 1
               from   SETBLAK t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SETBLAK". Cannot delete parent "MATANGB".'
          goto error
       end

    /*  Cannot delete parent "MATANGB" if children still exist in "OTOKOROLARIB"  */
    if exists (select 1
               from   OTOKOROLARIB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "OTOKOROLARIB". Cannot delete parent "MATANGB".'
          goto error
       end

    /*  Cannot delete parent "MATANGB" if children still exist in "SALDOLAKB"  */
    if exists (select 1
               from   SALDOLAKB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLAKB". Cannot delete parent "MATANGB".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGB] ENABLE TRIGGER [TD_MATANGB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_MATANGB] on [dbo].[MATANGB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "STRUREK" must exist when inserting a child in "MATANGB"  */
    if update(MTGLEVEL)
    begin
       if (select count(*)
           from   STRUREK t1, inserted t2
           where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STRUREK". Cannot create child in "MATANGB".'
             goto error
          end
    end
    /*  Parent "KHUSUSREK" must exist when inserting a child in "MATANGB"  */
    if update(KDKHUSUS)
    begin
       if (select count(*)
           from   KHUSUSREK t1, inserted t2
           where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "KHUSUSREK". Cannot create child in "MATANGB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGB] ENABLE TRIGGER [TI_MATANGB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_MATANGB] on [dbo].[MATANGB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "STRUREK" must exist when updating a child in "MATANGB"  */
      if update(MTGLEVEL)
      begin
         if (select count(*)
             from   STRUREK t1, inserted t2
             where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STRUREK" does not exist. Cannot modify child in "MATANGB".'
               goto error
            end
      end
      /*  Parent "KHUSUSREK" must exist when updating a child in "MATANGB"  */
      if update(KDKHUSUS)
      begin
         if (select count(*)
             from   KHUSUSREK t1, inserted t2
             where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'KHUSUSREK" does not exist. Cannot modify child in "MATANGB".'
               goto error
            end
      end
      /*  Cannot modify parent code in "MATANGB" if children still exist in "DASKUMB"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   DASKUMB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKUMB". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "RASKB"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   RASKB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKB". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "DASKB"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   DASKB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKB". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "SKOBDET"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SKOBDET t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKOBDET". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "SPPDETB"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SPPDETB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPPDETB". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "SPMDETB"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SPMDETB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPMDETB". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "SETPFK"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SETPFK t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SETPFK". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "SP2DDETB"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SP2DDETB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DDETB". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "RKMDETB"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   RKMDETB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETB". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "SPJDETB"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SPJDETB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETB". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "BPKDETB"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   BPKDETB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPKDETB". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "TBPDETB"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   TBPDETB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPDETB". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "RBMDETB"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   RBMDETB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RBMDETB". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "TUPB"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   TUPB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TUPB". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "SALDOLRAB"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SALDOLRAB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLRAB". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "SETBLRA"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SETBLRA t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SETBLRA". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "SETBLAK"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SETBLAK t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SETBLAK". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "OTOKOROLARIB"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   OTOKOROLARIB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "OTOKOROLARIB". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGB" if children still exist in "SALDOLAKB"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SALDOLAKB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLAKB". Cannot modify parent code in "MATANGB".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGB] ENABLE TRIGGER [TU_MATANGB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_MATANGBLRA] on [dbo].[MATANGBLRA] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MATANGBLRA" if children still exist in "SETBLRA"  */
    if exists (select 1
               from   SETBLRA t2, deleted t1
               where  t2.MTGKEYLRA = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SETBLRA". Cannot delete parent "MATANGBLRA".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGBLRA] ENABLE TRIGGER [TD_MATANGBLRA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_MATANGBLRA] on [dbo].[MATANGBLRA] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "STRUREK" must exist when inserting a child in "MATANGBLRA"  */
    if update(MTGLEVEL)
    begin
       if (select count(*)
           from   STRUREK t1, inserted t2
           where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STRUREK". Cannot create child in "MATANGBLRA".'
             goto error
          end
    end
    /*  Parent "KHUSUSREK" must exist when inserting a child in "MATANGBLRA"  */
    if update(KDKHUSUS)
    begin
       if (select count(*)
           from   KHUSUSREK t1, inserted t2
           where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "KHUSUSREK". Cannot create child in "MATANGBLRA".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGBLRA] ENABLE TRIGGER [TI_MATANGBLRA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_MATANGBLRA] on [dbo].[MATANGBLRA] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "STRUREK" must exist when updating a child in "MATANGBLRA"  */
      if update(MTGLEVEL)
      begin
         if (select count(*)
             from   STRUREK t1, inserted t2
             where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STRUREK" does not exist. Cannot modify child in "MATANGBLRA".'
               goto error
            end
      end
      /*  Parent "KHUSUSREK" must exist when updating a child in "MATANGBLRA"  */
      if update(KDKHUSUS)
      begin
         if (select count(*)
             from   KHUSUSREK t1, inserted t2
             where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'KHUSUSREK" does not exist. Cannot modify child in "MATANGBLRA".'
               goto error
            end
      end
      /*  Cannot modify parent code in "MATANGBLRA" if children still exist in "SETBLRA"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SETBLRA t2, inserted i1, deleted d1
                    where  t2.MTGKEYLRA = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SETBLRA". Cannot modify parent code in "MATANGBLRA".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGBLRA] ENABLE TRIGGER [TU_MATANGBLRA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_MATANGD] on [dbo].[MATANGD] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MATANGD" if children still exist in "MTGDUNIT"  */
    if exists (select 1
               from   MTGDUNIT t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MTGDUNIT". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "DASKUMD"  */
    if exists (select 1
               from   DASKUMD t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKUMD". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "RASKD"  */
    if exists (select 1
               from   RASKD t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKD". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "DASKD"  */
    if exists (select 1
               from   DASKD t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKD". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "SKODDET"  */
    if exists (select 1
               from   SKODDET t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKODDET". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "SPPDETD"  */
    if exists (select 1
               from   SPPDETD t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPPDETD". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "SPMDETD"  */
    if exists (select 1
               from   SPMDETD t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPMDETD". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "SP2DDETD"  */
    if exists (select 1
               from   SP2DDETD t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DDETD". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "RKMDETD"  */
    if exists (select 1
               from   RKMDETD t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETD". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "SPJDETD"  */
    if exists (select 1
               from   SPJDETD t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETD". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "BPKDETD"  */
    if exists (select 1
               from   BPKDETD t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPKDETD". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "TBPDETD"  */
    if exists (select 1
               from   TBPDETD t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPDETD". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "RBMDETD"  */
    if exists (select 1
               from   RBMDETD t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RBMDETD". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "TUPD"  */
    if exists (select 1
               from   TUPD t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TUPD". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "SALDOLRAD"  */
    if exists (select 1
               from   SALDOLRAD t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLRAD". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "SETDLRA"  */
    if exists (select 1
               from   SETDLRA t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SETDLRA". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "SETDLAK"  */
    if exists (select 1
               from   SETDLAK t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SETDLAK". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "STDHARGAD"  */
    if exists (select 1
               from   STDHARGAD t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "STDHARGAD". Cannot delete parent "MATANGD".'
          goto error
       end

    /*  Cannot delete parent "MATANGD" if children still exist in "SALDOLAKD"  */
    if exists (select 1
               from   SALDOLAKD t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLAKD". Cannot delete parent "MATANGD".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGD] ENABLE TRIGGER [TD_MATANGD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_MATANGD] on [dbo].[MATANGD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "STRUREK" must exist when inserting a child in "MATANGD"  */
    if update(MTGLEVEL)
    begin
       if (select count(*)
           from   STRUREK t1, inserted t2
           where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STRUREK". Cannot create child in "MATANGD".'
             goto error
          end
    end
    /*  Parent "KHUSUSREK" must exist when inserting a child in "MATANGD"  */
--    if update(KDKHUSUS)
--    begin
--       if (select count(*)
--           from   KHUSUSREK t1, inserted t2
--           where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "KHUSUSREK". Cannot create child in "MATANGD".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[MATANGD] ENABLE TRIGGER [TI_MATANGD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TU_MATANGD] on [dbo].[MATANGD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "STRUREK" must exist when updating a child in "MATANGD"  */
      if update(MTGLEVEL)
      begin
         if (select count(*)
             from   STRUREK t1, inserted t2
             where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STRUREK" does not exist. Cannot modify child in "MATANGD".'
               goto error
            end
      end
      /*  Parent "KHUSUSREK" must exist when updating a child in "MATANGD"  */
--      if update(KDKHUSUS)
--      begin
--         if (select count(*)
--             from   KHUSUSREK t1, inserted t2
--             where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'KHUSUSREK" does not exist. Cannot modify child in "MATANGD".'
--               goto error
--            end
--      end
      /*  Cannot modify parent code in "MATANGD" if children still exist in "MTGDUNIT"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   MTGDUNIT t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MTGDUNIT". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "DASKUMD"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   DASKUMD t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKUMD". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "RASKD"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   RASKD t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKD". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "DASKD"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   DASKD t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKD". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "SKODDET"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SKODDET t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKODDET". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "SPPDETD"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SPPDETD t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPPDETD". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "SPMDETD"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SPMDETD t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPMDETD". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "SP2DDETD"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SP2DDETD t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DDETD". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "RKMDETD"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   RKMDETD t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETD". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "SPJDETD"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SPJDETD t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETD". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "BPKDETD"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   BPKDETD t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPKDETD". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "TBPDETD"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   TBPDETD t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPDETD". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "RBMDETD"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   RBMDETD t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RBMDETD". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "TUPD"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   TUPD t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TUPD". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "SALDOLRAD"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SALDOLRAD t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLRAD". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "SETDLRA"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SETDLRA t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SETDLRA". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "SETDLAK"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SETDLAK t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SETDLAK". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "STDHARGAD"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   STDHARGAD t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "STDHARGAD". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGD" if children still exist in "SALDOLAKD"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SALDOLAKD t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLAKD". Cannot modify parent code in "MATANGD".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[MATANGD] ENABLE TRIGGER [TU_MATANGD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_MATANGDLAK] on [dbo].[MATANGDLAK] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MATANGDLAK" if children still exist in "SETDLAK"  */
    if exists (select 1
               from   SETDLAK t2, deleted t1
               where  t2.MTGKEYLAK = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SETDLAK". Cannot delete parent "MATANGDLAK".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGDLAK] ENABLE TRIGGER [TD_MATANGDLAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_MATANGDLAK] on [dbo].[MATANGDLAK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "STRUREK" must exist when inserting a child in "MATANGDLAK"  */
    if update(MTGLEVEL)
    begin
       if (select count(*)
           from   STRUREK t1, inserted t2
           where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STRUREK". Cannot create child in "MATANGDLAK".'
             goto error
          end
    end
    /*  Parent "KHUSUSREK" must exist when inserting a child in "MATANGDLAK"  */
    if update(KDKHUSUS)
    begin
       if (select count(*)
           from   KHUSUSREK t1, inserted t2
           where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "KHUSUSREK". Cannot create child in "MATANGDLAK".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGDLAK] ENABLE TRIGGER [TI_MATANGDLAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_MATANGDLAK] on [dbo].[MATANGDLAK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "STRUREK" must exist when updating a child in "MATANGDLAK"  */
      if update(MTGLEVEL)
      begin
         if (select count(*)
             from   STRUREK t1, inserted t2
             where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STRUREK" does not exist. Cannot modify child in "MATANGDLAK".'
               goto error
            end
      end
      /*  Parent "KHUSUSREK" must exist when updating a child in "MATANGDLAK"  */
      if update(KDKHUSUS)
      begin
         if (select count(*)
             from   KHUSUSREK t1, inserted t2
             where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'KHUSUSREK" does not exist. Cannot modify child in "MATANGDLAK".'
               goto error
            end
      end
      /*  Cannot modify parent code in "MATANGDLAK" if children still exist in "SETDLAK"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SETDLAK t2, inserted i1, deleted d1
                    where  t2.MTGKEYLAK = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SETDLAK". Cannot modify parent code in "MATANGDLAK".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGDLAK] ENABLE TRIGGER [TU_MATANGDLAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_MATANGDLRA] on [dbo].[MATANGDLRA] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MATANGDLRA" if children still exist in "SETDLRA"  */
    if exists (select 1
               from   SETDLRA t2, deleted t1
               where  t2.MTGKEYLRA = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SETDLRA". Cannot delete parent "MATANGDLRA".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGDLRA] ENABLE TRIGGER [TD_MATANGDLRA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_MATANGDLRA] on [dbo].[MATANGDLRA] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "STRUREK" must exist when inserting a child in "MATANGDLRA"  */
    if update(MTGLEVEL)
    begin
       if (select count(*)
           from   STRUREK t1, inserted t2
           where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STRUREK". Cannot create child in "MATANGDLRA".'
             goto error
          end
    end
    /*  Parent "KHUSUSREK" must exist when inserting a child in "MATANGDLRA"  */
    if update(KDKHUSUS)
    begin
       if (select count(*)
           from   KHUSUSREK t1, inserted t2
           where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "KHUSUSREK". Cannot create child in "MATANGDLRA".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGDLRA] ENABLE TRIGGER [TI_MATANGDLRA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_MATANGDLRA] on [dbo].[MATANGDLRA] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "STRUREK" must exist when updating a child in "MATANGDLRA"  */
      if update(MTGLEVEL)
      begin
         if (select count(*)
             from   STRUREK t1, inserted t2
             where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STRUREK" does not exist. Cannot modify child in "MATANGDLRA".'
               goto error
            end
      end
      /*  Parent "KHUSUSREK" must exist when updating a child in "MATANGDLRA"  */
      if update(KDKHUSUS)
      begin
         if (select count(*)
             from   KHUSUSREK t1, inserted t2
             where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'KHUSUSREK" does not exist. Cannot modify child in "MATANGDLRA".'
               goto error
            end
      end
      /*  Cannot modify parent code in "MATANGDLRA" if children still exist in "SETDLRA"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SETDLRA t2, inserted i1, deleted d1
                    where  t2.MTGKEYLRA = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SETDLRA". Cannot modify parent code in "MATANGDLRA".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGDLRA] ENABLE TRIGGER [TU_MATANGDLRA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_MATANGNRC] on [dbo].[MATANGNRC] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MATANGNRC" if children still exist in "BKBKAS"  */
    if exists (select 1
               from   BKBKAS t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKBKAS". Cannot delete parent "MATANGNRC".'
          goto error
       end

    /*  Cannot delete parent "MATANGNRC" if children still exist in "REKONSET"  */
    if exists (select 1
               from   REKONSET t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "REKONSET". Cannot delete parent "MATANGNRC".'
          goto error
       end

    /*  Cannot delete parent "MATANGNRC" if children still exist in "REKAKAS"  */
    if exists (select 1
               from   REKAKAS t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "REKAKAS". Cannot delete parent "MATANGNRC".'
          goto error
       end

    /*  Cannot delete parent "MATANGNRC" if children still exist in "SALDOAWAL"  */
    if exists (select 1
               from   SALDOAWAL t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOAWAL". Cannot delete parent "MATANGNRC".'
          goto error
       end

    /*  Cannot delete parent "MATANGNRC" if children still exist in "SALDOAKHIR"  */
    if exists (select 1
               from   SALDOAKHIR t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOAKHIR". Cannot delete parent "MATANGNRC".'
          goto error
       end

    /*  Cannot delete parent "MATANGNRC" if children still exist in "RBMDETN"  */
    if exists (select 1
               from   RBMDETN t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RBMDETN". Cannot delete parent "MATANGNRC".'
          goto error
       end

    /*  Cannot delete parent "MATANGNRC" if children still exist in "BKBMDET"  */
    if exists (select 1
               from   BKBMDET t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKBMDET". Cannot delete parent "MATANGNRC".'
          goto error
       end

    /*  Cannot delete parent "MATANGNRC" if children still exist in "BKRKKDET"  */
    if exists (select 1
               from   BKRKKDET t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKRKKDET". Cannot delete parent "MATANGNRC".'
          goto error
       end

    /*  Cannot delete parent "MATANGNRC" if children still exist in "BKRKMDET"  */
    if exists (select 1
               from   BKRKMDET t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKRKMDET". Cannot delete parent "MATANGNRC".'
          goto error
       end

    /*  Cannot delete parent "MATANGNRC" if children still exist in "BKSPJDET"  */
    if exists (select 1
               from   BKSPJDET t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKSPJDET". Cannot delete parent "MATANGNRC".'
          goto error
       end

    /*  Cannot delete parent "MATANGNRC" if children still exist in "JURTUP"  */
    if exists (select 1
               from   JURTUP t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "JURTUP". Cannot delete parent "MATANGNRC".'
          goto error
       end

    /*  Cannot delete parent "MATANGNRC" if children still exist in "NRCELIMINASI"  */
    if exists (select 1
               from   NRCELIMINASI t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "NRCELIMINASI". Cannot delete parent "MATANGNRC".'
          goto error
       end

    /*  Cannot delete parent "MATANGNRC" if children still exist in "OTOKOROLARIR"  */
    if exists (select 1
               from   OTOKOROLARIR t2, deleted t1
               where  t2.MTGKEYNRC = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "OTOKOROLARIR". Cannot delete parent "MATANGNRC".'
          goto error
       end

    /*  Cannot delete parent "MATANGNRC" if children still exist in "OTOKOROLARIB"  */
    if exists (select 1
               from   OTOKOROLARIB t2, deleted t1
               where  t2.MTGKEYNRC = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "OTOKOROLARIB". Cannot delete parent "MATANGNRC".'
          goto error
       end

    /*  Cannot delete parent "MATANGNRC" if children still exist in "NRCBEND"  */
    if exists (select 1
               from   NRCBEND t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "NRCBEND". Cannot delete parent "MATANGNRC".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGNRC] ENABLE TRIGGER [TD_MATANGNRC]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_MATANGNRC] on [dbo].[MATANGNRC] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "STRUREK" must exist when inserting a child in "MATANGNRC"  */
    if update(MTGLEVEL)
    begin
       if (select count(*)
           from   STRUREK t1, inserted t2
           where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STRUREK". Cannot create child in "MATANGNRC".'
             goto error
          end
    end
    /*  Parent "KHUSUSREK" must exist when inserting a child in "MATANGNRC"  */
    if update(KDKHUSUS)
    begin
       if (select count(*)
           from   KHUSUSREK t1, inserted t2
           where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "KHUSUSREK". Cannot create child in "MATANGNRC".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGNRC] ENABLE TRIGGER [TI_MATANGNRC]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_MATANGNRC] on [dbo].[MATANGNRC] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "STRUREK" must exist when updating a child in "MATANGNRC"  */
      if update(MTGLEVEL)
      begin
         if (select count(*)
             from   STRUREK t1, inserted t2
             where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STRUREK" does not exist. Cannot modify child in "MATANGNRC".'
               goto error
            end
      end
      /*  Parent "KHUSUSREK" must exist when updating a child in "MATANGNRC"  */
      if update(KDKHUSUS)
      begin
         if (select count(*)
             from   KHUSUSREK t1, inserted t2
             where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'KHUSUSREK" does not exist. Cannot modify child in "MATANGNRC".'
               goto error
            end
      end
      /*  Cannot modify parent code in "MATANGNRC" if children still exist in "BKBKAS"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   BKBKAS t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKBKAS". Cannot modify parent code in "MATANGNRC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGNRC" if children still exist in "REKONSET"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   REKONSET t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "REKONSET". Cannot modify parent code in "MATANGNRC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGNRC" if children still exist in "REKAKAS"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   REKAKAS t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "REKAKAS". Cannot modify parent code in "MATANGNRC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGNRC" if children still exist in "SALDOAWAL"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SALDOAWAL t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOAWAL". Cannot modify parent code in "MATANGNRC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGNRC" if children still exist in "SALDOAKHIR"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SALDOAKHIR t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOAKHIR". Cannot modify parent code in "MATANGNRC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGNRC" if children still exist in "RBMDETN"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   RBMDETN t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RBMDETN". Cannot modify parent code in "MATANGNRC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGNRC" if children still exist in "BKBMDET"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   BKBMDET t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKBMDET". Cannot modify parent code in "MATANGNRC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGNRC" if children still exist in "BKRKKDET"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   BKRKKDET t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKRKKDET". Cannot modify parent code in "MATANGNRC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGNRC" if children still exist in "BKRKMDET"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   BKRKMDET t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKRKMDET". Cannot modify parent code in "MATANGNRC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGNRC" if children still exist in "BKSPJDET"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   BKSPJDET t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKSPJDET". Cannot modify parent code in "MATANGNRC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGNRC" if children still exist in "JURTUP"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   JURTUP t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "JURTUP". Cannot modify parent code in "MATANGNRC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGNRC" if children still exist in "NRCELIMINASI"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   NRCELIMINASI t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "NRCELIMINASI". Cannot modify parent code in "MATANGNRC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGNRC" if children still exist in "OTOKOROLARIR"  */
if update(MTGKEY)
      begin
         if exists (select 1
                    from   OTOKOROLARIR t2, inserted i1, deleted d1
                    where  t2.MTGKEYNRC = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "OTOKOROLARIR". Cannot modify parent code in "MATANGNRC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGNRC" if children still exist in "OTOKOROLARIB"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   OTOKOROLARIB t2, inserted i1, deleted d1
                    where  t2.MTGKEYNRC = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "OTOKOROLARIB". Cannot modify parent code in "MATANGNRC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGNRC" if children still exist in "NRCBEND"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   NRCBEND t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "NRCBEND". Cannot modify parent code in "MATANGNRC".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGNRC] ENABLE TRIGGER [TU_MATANGNRC]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_MATANGR] on [dbo].[MATANGR] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MATANGR" if children still exist in "DASKUMR"  */
    if exists (select 1
               from   DASKUMR t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKUMR". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "RASKR"  */
    if exists (select 1
               from   RASKR t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKR". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "RASKRTL"  */
    if exists (select 1
               from   RASKRTL t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKRTL". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "DASKR"  */
    if exists (select 1
               from   DASKR t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKR". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "DASKRTL"  */
    if exists (select 1
               from   DASKRTL t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKRTL". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "SKORDET"  */
    if exists (select 1
               from   SKORDET t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKORDET". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "SKORTLDET"  */
    if exists (select 1
               from   SKORTLDET t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKORTLDET". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "SPPDETRTL"  */
    if exists (select 1
               from   SPPDETRTL t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPPDETRTL". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "SPPDETR"  */
    if exists (select 1
               from   SPPDETR t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPPDETR". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "SPMDETRTL"  */
    if exists (select 1
               from   SPMDETRTL t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPMDETRTL". Cannot delete parent "MATANGR".'
  goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "SPMDETR"  */
    if exists (select 1
               from   SPMDETR t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPMDETR". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "SP2DDETR"  */
    if exists (select 1
               from   SP2DDETR t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DDETR". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "SP2DDETRTL"  */
    if exists (select 1
               from   SP2DDETRTL t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DDETRTL". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "RKMDETR"  */
    if exists (select 1
               from   RKMDETR t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETR". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "RKMDETRTL"  */
    if exists (select 1
               from   RKMDETRTL t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETRTL". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "SPJDETR"  */
    if exists (select 1
               from   SPJDETR t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETR". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "SPJDETRTL"  */
    if exists (select 1
               from   SPJDETRTL t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETRTL". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "BPKDETRTL"  */
    if exists (select 1
               from   BPKDETRTL t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPKDETRTL". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "BPKDETR"  */
    if exists (select 1
               from   BPKDETR t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPKDETR". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "TBPDETR"  */
    if exists (select 1
               from   TBPDETR t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPDETR". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "TBPDETRTL"  */
    if exists (select 1
               from   TBPDETRTL t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPDETRTL". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "RBMDETRTL"  */
    if exists (select 1
               from   RBMDETRTL t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RBMDETRTL". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "RBMDETR"  */
    if exists (select 1
               from   RBMDETR t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RBMDETR". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "TUPR"  */
    if exists (select 1
               from   TUPR t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TUPR". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "SALDOLRAR"  */
    if exists (select 1
               from   SALDOLRAR t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLRAR". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "SALDOLRARTL"  */
    if exists (select 1
               from   SALDOLRARTL t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLRARTL". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "SETRLRA"  */
    if exists (select 1
               from   SETRLRA t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SETRLRA". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "SETRLAK"  */
    if exists (select 1
               from   SETRLAK t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SETRLAK". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "OTOKOROLARIR"  */
    if exists (select 1
               from   OTOKOROLARIR t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "OTOKOROLARIR". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "STDHARGAR"  */
    if exists (select 1
               from   STDHARGAR t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "STDHARGAR". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "SALDOLAKRTL"  */
    if exists (select 1
               from   SALDOLAKRTL t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLAKRTL". Cannot delete parent "MATANGR".'
          goto error
       end

    /*  Cannot delete parent "MATANGR" if children still exist in "SALDOLAKR"  */
    if exists (select 1
               from   SALDOLAKR t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLAKR". Cannot delete parent "MATANGR".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGR] ENABLE TRIGGER [TD_MATANGR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_MATANGR] on [dbo].[MATANGR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "STRUREK" must exist when inserting a child in "MATANGR"  */
    if update(MTGLEVEL)
    begin
       if (select count(*)
           from   STRUREK t1, inserted t2
           where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STRUREK". Cannot create child in "MATANGR".'
             goto error
          end
    end
    /*  Parent "KHUSUSREK" must exist when inserting a child in "MATANGR"  */
    if update(KDKHUSUS)
    begin
       if (select count(*)
           from   KHUSUSREK t1, inserted t2
           where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "KHUSUSREK". Cannot create child in "MATANGR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGR] ENABLE TRIGGER [TI_MATANGR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_MATANGR] on [dbo].[MATANGR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "STRUREK" must exist when updating a child in "MATANGR"  */
      if update(MTGLEVEL)
      begin
         if (select count(*)
             from   STRUREK t1, inserted t2
             where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STRUREK" does not exist. Cannot modify child in "MATANGR".'
               goto error
            end
      end
      /*  Parent "KHUSUSREK" must exist when updating a child in "MATANGR"  */
      if update(KDKHUSUS)
      begin
         if (select count(*)
             from   KHUSUSREK t1, inserted t2
             where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'KHUSUSREK" does not exist. Cannot modify child in "MATANGR".'
               goto error
            end
      end
      /*  Cannot modify parent code in "MATANGR" if children still exist in "DASKUMR"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   DASKUMR t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKUMR". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "RASKR"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   RASKR t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKR". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "RASKRTL"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   RASKRTL t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKRTL". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "DASKR"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   DASKR t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKR". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "DASKRTL"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   DASKRTL t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKRTL". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "SKORDET"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SKORDET t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKORDET". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "SKORTLDET"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SKORTLDET t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKORTLDET". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "SPPDETRTL"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SPPDETRTL t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPPDETRTL". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "SPPDETR"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SPPDETR t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPPDETR". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "SPMDETRTL"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SPMDETRTL t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPMDETRTL". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "SPMDETR"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SPMDETR t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPMDETR". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "SP2DDETR"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SP2DDETR t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DDETR". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "SP2DDETRTL"  */
      if update(MTGKEY)
      begin
         if exists (select 1
       from   SP2DDETRTL t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DDETRTL". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "RKMDETR"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   RKMDETR t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETR". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "RKMDETRTL"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   RKMDETRTL t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETRTL". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "SPJDETR"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SPJDETR t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETR". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "SPJDETRTL"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SPJDETRTL t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETRTL". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "BPKDETRTL"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   BPKDETRTL t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPKDETRTL". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "BPKDETR"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   BPKDETR t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPKDETR". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "TBPDETR"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   TBPDETR t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
          and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPDETR". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "TBPDETRTL"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   TBPDETRTL t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPDETRTL". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "RBMDETRTL"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   RBMDETRTL t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RBMDETRTL". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "RBMDETR"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   RBMDETR t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RBMDETR". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "TUPR"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   TUPR t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TUPR". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "SALDOLRAR"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SALDOLRAR t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLRAR". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "SALDOLRARTL"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SALDOLRARTL t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLRARTL". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "SETRLRA"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SETRLRA t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
        @errmsg = 'Children still exist in "SETRLRA". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "SETRLAK"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SETRLAK t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SETRLAK". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "OTOKOROLARIR"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   OTOKOROLARIR t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "OTOKOROLARIR". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "STDHARGAR"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   STDHARGAR t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "STDHARGAR". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "SALDOLAKRTL"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SALDOLAKRTL t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLAKRTL". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MATANGR" if children still exist in "SALDOLAKR"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SALDOLAKR t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLAKR". Cannot modify parent code in "MATANGR".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGR] ENABLE TRIGGER [TU_MATANGR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_MATANGRLAK] on [dbo].[MATANGRLAK] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MATANGRLAK" if children still exist in "SETRLAK"  */
    if exists (select 1
               from   SETRLAK t2, deleted t1
               where  t2.MTGKEYLAK = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SETRLAK". Cannot delete parent "MATANGRLAK".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGRLAK] ENABLE TRIGGER [TD_MATANGRLAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_MATANGRLAK] on [dbo].[MATANGRLAK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "STRUREK" must exist when inserting a child in "MATANGRLAK"  */
    if update(MTGLEVEL)
    begin
       if (select count(*)
           from   STRUREK t1, inserted t2
           where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STRUREK". Cannot create child in "MATANGRLAK".'
             goto error
          end
    end
    /*  Parent "KHUSUSREK" must exist when inserting a child in "MATANGRLAK"  */
    if update(KDKHUSUS)
    begin
       if (select count(*)
           from   KHUSUSREK t1, inserted t2
           where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "KHUSUSREK". Cannot create child in "MATANGRLAK".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGRLAK] ENABLE TRIGGER [TI_MATANGRLAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_MATANGRLAK] on [dbo].[MATANGRLAK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "STRUREK" must exist when updating a child in "MATANGRLAK"  */
      if update(MTGLEVEL)
      begin
         if (select count(*)
             from   STRUREK t1, inserted t2
             where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STRUREK" does not exist. Cannot modify child in "MATANGRLAK".'
               goto error
            end
      end
      /*  Parent "KHUSUSREK" must exist when updating a child in "MATANGRLAK"  */
      if update(KDKHUSUS)
      begin
         if (select count(*)
             from   KHUSUSREK t1, inserted t2
             where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'KHUSUSREK" does not exist. Cannot modify child in "MATANGRLAK".'
               goto error
            end
      end
      /*  Cannot modify parent code in "MATANGRLAK" if children still exist in "SETRLAK"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SETRLAK t2, inserted i1, deleted d1
                    where  t2.MTGKEYLAK = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SETRLAK". Cannot modify parent code in "MATANGRLAK".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGRLAK] ENABLE TRIGGER [TU_MATANGRLAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_MATANGRLRA] on [dbo].[MATANGRLRA] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MATANGRLRA" if children still exist in "SETRLRA"  */
    if exists (select 1
               from   SETRLRA t2, deleted t1
               where  t2.MTGKEYLRA = t1.MTGKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SETRLRA". Cannot delete parent "MATANGRLRA".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGRLRA] ENABLE TRIGGER [TD_MATANGRLRA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_MATANGRLRA] on [dbo].[MATANGRLRA] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "STRUREK" must exist when inserting a child in "MATANGRLRA"  */
    if update(MTGLEVEL)
    begin
       if (select count(*)
           from   STRUREK t1, inserted t2
           where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STRUREK". Cannot create child in "MATANGRLRA".'
             goto error
          end
    end
    /*  Parent "KHUSUSREK" must exist when inserting a child in "MATANGRLRA"  */
    if update(KDKHUSUS)
    begin
       if (select count(*)
           from   KHUSUSREK t1, inserted t2
           where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "KHUSUSREK". Cannot create child in "MATANGRLRA".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGRLRA] ENABLE TRIGGER [TI_MATANGRLRA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_MATANGRLRA] on [dbo].[MATANGRLRA] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "STRUREK" must exist when updating a child in "MATANGRLRA"  */
      if update(MTGLEVEL)
      begin
         if (select count(*)
             from   STRUREK t1, inserted t2
             where  t1.MTGLEVEL = t2.MTGLEVEL) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STRUREK" does not exist. Cannot modify child in "MATANGRLRA".'
               goto error
            end
      end
      /*  Parent "KHUSUSREK" must exist when updating a child in "MATANGRLRA"  */
      if update(KDKHUSUS)
      begin
         if (select count(*)
             from   KHUSUSREK t1, inserted t2
             where  t1.KDKHUSUS = t2.KDKHUSUS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'KHUSUSREK" does not exist. Cannot modify child in "MATANGRLRA".'
               goto error
            end
      end
      /*  Cannot modify parent code in "MATANGRLRA" if children still exist in "SETRLRA"  */
      if update(MTGKEY)
      begin
         if exists (select 1
                    from   SETRLRA t2, inserted i1, deleted d1
                    where  t2.MTGKEYLRA = d1.MTGKEY
                     and  (i1.MTGKEY != d1.MTGKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SETRLRA". Cannot modify parent code in "MATANGRLRA".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MATANGRLRA] ENABLE TRIGGER [TU_MATANGRLRA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_MKEGIATAN] on [dbo].[MKEGIATAN] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       RETURN
       
       
       
--------BEGIN REHATTA

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "KONTRAK"  */
    if exists (select 1
               from   KONTRAK t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KONTRAK". Cannot delete parent "MKEGIATAN".'
          goto error
       end

--------END REHATTA
       
       
       

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "KEGUNIT"  */
    if exists (select 1
               from   KEGUNIT t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KEGUNIT". Cannot delete parent "MKEGIATAN".'
          goto error
       end

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "KINKEG"  */
    if exists (select 1
               from   KINKEG t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KINKEG". Cannot delete parent "MKEGIATAN".'
          goto error
       end



--------BEGIN REHATTA
    /*  Cannot delete parent "MKEGIATAN" if children still exist in "KASKEG"  */
    if exists (select 1
               from   KASKEG t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KASKEG". Cannot delete parent "MKEGIATAN".'
          goto error
       end


--------END REHATTA




    /*  Cannot delete parent "MKEGIATAN" if children still exist in "RASKR"  */
    if exists (select 1
               from   RASKR t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKR". Cannot delete parent "MKEGIATAN".'
          goto error
       end

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "DASKR"  */
    if exists (select 1
               from   DASKR t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKR". Cannot delete parent "MKEGIATAN".'
          goto error
       end

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "SKORDET"  */
    if exists (select 1
               from   SKORDET t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKORDET". Cannot delete parent "MKEGIATAN".'
          goto error
       end

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "SPPDETR"  */
    if exists (select 1
               from   SPPDETR t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPPDETR". Cannot delete parent "MKEGIATAN".'
          goto error
       end

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "SPMDETR"  */
    if exists (select 1
               from   SPMDETR t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPMDETR". Cannot delete parent "MKEGIATAN".'
          goto error
       end

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "SP2DDETR"  */
    if exists (select 1
               from   SP2DDETR t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DDETR". Cannot delete parent "MKEGIATAN".'
          goto error
       end

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "DASKRL"  */
    if exists (select 1
               from   DASKRL t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKRL". Cannot delete parent "MKEGIATAN".'
          goto error
       end

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "RKMDETR"  */
    if exists (select 1
               from   RKMDETR t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETR". Cannot delete parent "MKEGIATAN".'
          goto error
       end

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "SPJDETR"  */
    if exists (select 1
               from   SPJDETR t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETR". Cannot delete parent "MKEGIATAN".'
          goto error
       end

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "BPKDETR"  */
    if exists (select 1
               from   BPKDETR t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPKDETR". Cannot delete parent "MKEGIATAN".'
          goto error
       end

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "TBPDETR"  */
    if exists (select 1
               from   TBPDETR t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPDETR". Cannot delete parent "MKEGIATAN".'
          goto error
       end

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "RBMDETR"  */
    if exists (select 1
               from   RBMDETR t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RBMDETR". Cannot delete parent "MKEGIATAN".'
          goto error
       end

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "SALDOLRAR"  */
    if exists (select 1
               from   SALDOLRAR t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOLRAR". Cannot delete parent "MKEGIATAN".'
          goto error
       end

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "PANJARDET"  */
    if exists (select 1
               from   PANJARDET t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PANJARDET". Cannot delete parent "MKEGIATAN".'
          goto error
       end

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "KASKEG"  */
    if exists (select 1
               from   KASKEG t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KASKEG". Cannot delete parent "MKEGIATAN".'
          goto error
       end

    /*  Cannot delete parent "MKEGIATAN" if children still exist in "SBDANAKEG"  */
    if exists (select 1
               from   SBDANAKEG t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SBDANAKEG". Cannot delete parent "MKEGIATAN".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MKEGIATAN] ENABLE TRIGGER [TD_MKEGIATAN]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_MKEGIATAN] on [dbo].[MKEGIATAN] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MPGRM" must exist when inserting a child in "MKEGIATAN"  */
    if update(IDPRGRM)
    begin
       if (select count(*)
           from   MPGRM t1, inserted t2
           where  t1.IDPRGRM = t2.IDPRGRM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MPGRM". Cannot create child in "MKEGIATAN".'
             goto error
          end
    end
    /*  Parent "JPERSPEKTIF" must exist when inserting a child in "MKEGIATAN"  */
    if update(KDPERSPEKTIF)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KDPERSPEKTIF is null)
       if @numnull != @numrows
          if (select count(*)
              from   JPERSPEKTIF t1, inserted t2
              where  t1.KDPERSPEKTIF = t2.KDPERSPEKTIF) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JPERSPEKTIF". Cannot create child in "MKEGIATAN".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MKEGIATAN] ENABLE TRIGGER [TI_MKEGIATAN]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_MKEGIATAN] on [dbo].[MKEGIATAN] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MPGRM" must exist when updating a child in "MKEGIATAN"  */
      if update(IDPRGRM)
      begin
         if (select count(*)
             from   MPGRM t1, inserted t2
             where  t1.IDPRGRM = t2.IDPRGRM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MPGRM" does not exist. Cannot modify child in "MKEGIATAN".'
               goto error
            end
      end
      /*  Parent "JPERSPEKTIF" must exist when updating a child in "MKEGIATAN"  */
      if update(KDPERSPEKTIF)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KDPERSPEKTIF is null)
         if @numnull != @numrows
            if (select count(*)
                from   JPERSPEKTIF t1, inserted t2
                where  t1.KDPERSPEKTIF = t2.KDPERSPEKTIF) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JPERSPEKTIF" does not exist. Cannot modify child in "MKEGIATAN".'
               goto error
            end
      end
      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "KEGUNIT"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   KEGUNIT t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "KEGUNIT". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "KINKEG"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   KINKEG t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "KINKEG". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "RASKR"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   RASKR t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKR". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "DASKR"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   DASKR t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKR". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "SKORDET"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   SKORDET t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKORDET". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "SPPDETR"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   SPPDETR t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPPDETR". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "SPMDETR"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   SPMDETR t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPMDETR". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "SP2DDETR"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   SP2DDETR t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DDETR". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "DASKRL"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   DASKRL t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKRL". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "RKMDETR"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   RKMDETR t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETR". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "SPJDETR"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   SPJDETR t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETR". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "BPKDETR"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   BPKDETR t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPKDETR". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "TBPDETR"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   TBPDETR t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPDETR". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "RBMDETR"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   RBMDETR t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RBMDETR". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "SALDOLRAR"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   SALDOLRAR t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOLRAR". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "PANJARDET"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   PANJARDET t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PANJARDET". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "KASKEG"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   KASKEG t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "KASKEG". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MKEGIATAN" if children still exist in "SBDANAKEG"  */
      if update(KDKEGUNIT)
      begin
         if exists (select 1
                    from   SBDANAKEG t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SBDANAKEG". Cannot modify parent code in "MKEGIATAN".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MKEGIATAN] ENABLE TRIGGER [TU_MKEGIATAN]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[TD_MONEVDAFTPHK3] on [dbo].[MONEVDAFTPHK3] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MONEVDAFTPHK3" if children still exist in "MONEVKONTRAK"  */
    if exists (select 1
               from   MONEVKONTRAK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
               and t2.KDP3 = t1.KDP3)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVKONTRAK". Cannot delete parent "MONEVDAFTPHK3".'
          goto error
       end
        
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[MONEVDAFTPHK3] ENABLE TRIGGER [TD_MONEVDAFTPHK3]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[TD_MONEVJKERJA] on [dbo].[MONEVJKERJA] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MONEVJKERJA" if children still exist in "MONEVPAKET"  */
    if exists (select 1
               from   MONEVPAKET t2, deleted t1
               where  t2.KDKERJA = t1.KDKERJA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVPAKET". Cannot delete parent "MONEVJKERJA".'
          goto error
       end
        
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[MONEVJKERJA] ENABLE TRIGGER [TD_MONEVJKERJA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[TD_MONEVKEG] on [dbo].[MONEVKEG] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MONEVKEG" if children still exist in "MONEVPAKET"  */
    if exists (select 1
               from   MONEVPAKET t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT
						and t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVPAKET". Cannot delete parent "MONEVKEG".'
          goto error
       end

	/*  Cannot delete parent "MONEVKEG" if children still exist in "MONEVPAKETDANA"  */
    if exists (select 1
               from   MONEVPAKETDANA t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT
						and t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVPAKETDANA". Cannot delete parent "MONEVKEG".'
          goto error
       end

    /*  Cannot delete parent "MONEVKEG" if children still exist in "MONEVPAKETDET"  */
    if exists (select 1
               from   MONEVPAKETDET t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT
						and t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVPAKETDET". Cannot delete parent "MONEVKEG".'
          goto error
       end

    
    /*  Cannot delete parent "MONEVKEG" if children still exist in "MONEVPAKETBYR"  */
    if exists (select 1
               from   MONEVPAKETBYR t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT
						and t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVPAKETBYR". Cannot delete parent "MONEVKEG".'
          goto error
       end

    
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[MONEVKEG] ENABLE TRIGGER [TD_MONEVKEG]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--IF EXISTS (SELECT NAME FROM sysobjects WHERE NAME = 'TD_MONEVKONTRAK')
--DROP TRIGGER TD_MONEVKONTRAK

CREATE TRIGGER [dbo].[TD_MONEVKONTRAK] on [dbo].[MONEVKONTRAK] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return
   
    /*  Cannot delete parent "MONEVKONTRAK" if children still exist in "MONEVKONPAKET"  */
    if exists (select 1
               from   MONEVKONPAKET t2, deleted t1
               where  t2.NOKON = t1.NOKON)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVKONPAKET". Cannot delete parent "MONEVKONTRAK".'
          goto error
       end
       
    /*  Cannot delete parent "MONEVKONTRAK" if children still exist in "MONEVKONTRAKADD"  */
    if exists (select 1
               from   MONEVKONTRAKADD t2, deleted t1
               where  t2.NOKON = t1.NOKON)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVKONTRAKADD". Cannot delete parent "MONEVKONTRAK".'
          goto error
       end
       
    
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MONEVKONTRAK] ENABLE TRIGGER [TD_MONEVKONTRAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[TD_MONEVMETPROC] on [dbo].[MONEVMETPROC] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MONEVMETPROC" if children still exist in "MONEVPAKET"  */
    if exists (select 1
               from   MONEVPAKET t2, deleted t1
               where  t2.KDMETOD = t1.KDMETOD)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVPAKET". Cannot delete parent "MONEVMETPROC".'
          goto error
       end
        
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[MONEVMETPROC] ENABLE TRIGGER [TD_MONEVMETPROC]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--IF EXISTS (SELECT NAME FROM sysobjects WHERE NAME = 'TD_MONEVPAKET')
--DROP TRIGGER TD_MONEVPAKET

CREATE TRIGGER [dbo].[TD_MONEVPAKET] on [dbo].[MONEVPAKET] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MONEVPAKET" if children still exist in "MONEVPAKETDANA"  */
    if exists (select 1
               from   MONEVPAKETDANA t2, deleted t1
               where  t2.KDPAKET = t1.KDPAKET)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVPAKETDANA". Cannot delete parent "MONEVPAKET".'
          goto error
       end
	
    /*  Cannot delete parent "MONEVPAKET" if children still exist in "MONEVPAKETDET"  */
    if exists (select 1
               from   MONEVPAKETDET t2, deleted t1
               where  t2.KDPAKET = t1.KDPAKET)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVPAKETDET". Cannot delete parent "MONEVPAKET".'
          goto error
       end
       
    /*  Cannot delete parent "MONEVPAKET" if children still exist in "MONEVKONPAKET"  */
    if exists (select 1
               from   MONEVKONPAKET t2, deleted t1
               where  t2.KDPAKET = t1.KDPAKET)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVKONPAKET". Cannot delete parent "MONEVPAKET".'
          goto error
       end

    /*  Cannot delete parent "MONEVPAKET" if children still exist in "MONEVFINALPROC"  */
    if exists (select 1
               from   MONEVFINALPROC t2, deleted t1
               where  t2.KDPAKET = t1.KDPAKET)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVFINALPROC". Cannot delete parent "MONEVPAKET".'
          goto error
       end

    /*  Cannot delete parent "MONEVPAKET" if children still exist in "MONEVPAKETBYR"  */
    if exists (select 1
               from   MONEVPAKETBYR t2, deleted t1
               where  t2.KDPAKET = t1.KDPAKET)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVPAKETBYR". Cannot delete parent "MONEVPAKET".'
          goto error
       end

    
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[MONEVPAKET] ENABLE TRIGGER [TD_MONEVPAKET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[TD_MONEVSANGGAH] on [dbo].[MONEVSANGGAH] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MONEVSANGGAH" if children still exist in "MONEVPAKETDET"  */
    if exists (select 1
               from   PAKETDET t2, deleted t1
               where  t2.KDSANGGAH = t1.KDSANGGAH)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVPAKETDET". Cannot delete parent "MONEVSANGGAH".'
          goto error
       end
        
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[MONEVSANGGAH] ENABLE TRIGGER [TD_MONEVSANGGAH]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[TD_MONEVSISEVAL] on [dbo].[MONEVSISEVAL] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MONEVSISEVAL" if children still exist in "MONEVPAKET"  */
    if exists (select 1
               from   MONEVPAKET t2, deleted t1
               where  t2.KDEVAL = t1.KDEVAL)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVPAKET". Cannot delete parent "MONEVSISEVAL".'
          goto error
       end
        
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[MONEVSISEVAL] ENABLE TRIGGER [TD_MONEVSISEVAL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_MONEVWEBGROUP] on [dbo].[MONEVWEBGROUP] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MONEVWEBGROUP" if children still exist in "MONEVWEBUSER"  */
    if exists (select 1
               from   MONEVWEBUSER t2, deleted t1
               where  t2.GROUPID = t1.GROUPID)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVWEBUSER". Cannot delete parent "MONEVWEBGROUP".'
          goto error
       end

    /*  Cannot delete parent "MONEVWEBGROUP" if children still exist in "MONEVWEBOTOR"  */
    if exists (select 1
               from   MONEVWEBOTOR t2, deleted t1
               where  t2.GROUPID = t1.GROUPID)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVWEBOTOR". Cannot delete parent "MONEVWEBGROUP".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MONEVWEBGROUP] ENABLE TRIGGER [TD_MONEVWEBGROUP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_MONEVWEBGROUP] on [dbo].[MONEVWEBGROUP] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "MONEVWEBGROUP" if children still exist in "MONEVWEBUSER"  */
      if update(GROUPID)
      begin
         if exists (select 1
                    from   MONEVWEBUSER t2, inserted i1, deleted d1
                    where  t2.GROUPID = d1.GROUPID
                     and  (i1.GROUPID != d1.GROUPID))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MONEVWEBUSER". Cannot modify parent code in "MONEVWEBGROUP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MONEVWEBGROUP" if children still exist in "MONEVWEBOTOR"  */
      if update(GROUPID)
      begin
         if exists (select 1
                    from   MONEVWEBOTOR t2, inserted i1, deleted d1
                    where  t2.GROUPID = d1.GROUPID
                     and  (i1.GROUPID != d1.GROUPID))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MONEVWEBOTOR". Cannot modify parent code in "MONEVWEBGROUP".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MONEVWEBGROUP] ENABLE TRIGGER [TU_MONEVWEBGROUP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_MONEVWEBOTOR] on [dbo].[MONEVWEBOTOR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MONEVWEBGROUP" must exist when inserting a child in "MONEVWEBOTOR"  */
    if update(GROUPID)
    begin
       if (select count(*)
           from   MONEVWEBGROUP t1, inserted t2
           where  t1.GROUPID = t2.GROUPID) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MONEVWEBGROUP". Cannot create child in "MONEVWEBOTOR".'
             goto error
          end
    end
    /*  Parent "MONEVWEBROLE" must exist when inserting a child in "MONEVWEBOTOR"  */
    if update(ROLEID)
    begin
       if (select count(*)
           from   MONEVWEBROLE t1, inserted t2
           where  t1.ROLEID = t2.ROLEID) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MONEVWEBROLE". Cannot create child in "MONEVWEBOTOR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MONEVWEBOTOR] ENABLE TRIGGER [TI_MONEVWEBOTOR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_MONEVWEBOTOR] on [dbo].[MONEVWEBOTOR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MONEVWEBGROUP" must exist when updating a child in "MONEVWEBOTOR"  */
      if update(GROUPID)
      begin
         if (select count(*)
             from   MONEVWEBGROUP t1, inserted t2
             where  t1.GROUPID = t2.GROUPID) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MONEVWEBGROUP" does not exist. Cannot modify child in "MONEVWEBOTOR".'
               goto error
            end
      end
      /*  Parent "MONEVWEBROLE" must exist when updating a child in "MONEVWEBOTOR"  */
      if update(ROLEID)
      begin
         if (select count(*)
             from   MONEVWEBROLE t1, inserted t2
             where  t1.ROLEID = t2.ROLEID) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MONEVWEBROLE" does not exist. Cannot modify child in "MONEVWEBOTOR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MONEVWEBOTOR] ENABLE TRIGGER [TU_MONEVWEBOTOR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TD_MONEVWEBROLE] on [dbo].[MONEVWEBROLE] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MONEVWEBROLE" if children still exist in "MONEVWEBOTOR"  */
    if exists (select 1
               from   MONEVWEBOTOR t2, deleted t1
               where  t2.ROLEID = t1.ROLEID)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MONEVWEBOTOR". Cannot delete parent "MONEVWEBROLE".'
          goto error
       end

    /*  Cannot delete parent "MONEVWEBROLE" if children still exist in "WEBERROR"  */
    if exists (select 1
               from   WEBERROR t2, deleted t1
               where  t2.ROLEID = t1.ROLEID)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "WEBERROR". Cannot delete parent "MONEVWEBROLE".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end







GO
ALTER TABLE [dbo].[MONEVWEBROLE] ENABLE TRIGGER [TD_MONEVWEBROLE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_MONEVWEBROLE] on [dbo].[MONEVWEBROLE] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "MONEVWEBROLE" if children still exist in "MONEVWEBOTOR"  */
      if update(ROLEID)
      begin
         if exists (select 1
                    from   MONEVWEBOTOR t2, inserted i1, deleted d1
                    where  t2.ROLEID = d1.ROLEID
                     and  (i1.ROLEID != d1.ROLEID))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MONEVWEBOTOR". Cannot modify parent code in "MONEVWEBROLE".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MONEVWEBROLE" if children still exist in "WEBERROR"  */
      if update(ROLEID)
      begin
         if exists (select 1
                    from   WEBERROR t2, inserted i1, deleted d1
                    where  t2.ROLEID = d1.ROLEID
                     and  (i1.ROLEID != d1.ROLEID))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "WEBERROR". Cannot modify parent code in "MONEVWEBROLE".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MONEVWEBROLE] ENABLE TRIGGER [TU_MONEVWEBROLE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_MONEVWEBUSER] on [dbo].[MONEVWEBUSER] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "TAHAP" must exist when inserting a child in "MONEVWEBUSER"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "MONEVWEBUSER".'
             goto error
          end
    end
    /*  Parent "MONEVWEBGROUP" must exist when inserting a child in "MONEVWEBUSER"  */
    if update(GROUPID)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  GROUPID is null)
       if @numnull != @numrows
          if (select count(*)
              from   MONEVWEBGROUP t1, inserted t2
              where  t1.GROUPID = t2.GROUPID) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MONEVWEBGROUP". Cannot create child in "MONEVWEBUSER".'
             goto error
          end
    end
    /*  Parent "PEGAWAI" must exist when inserting a child in "MONEVWEBUSER"  */
    if update(NIP)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  NIP is null)
       if @numnull != @numrows
          if (select count(*)
              from   PEGAWAI t1, inserted t2
              where  t1.NIP = t2.NIP) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PEGAWAI". Cannot create child in "MONEVWEBUSER".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "MONEVWEBUSER"  */
    if update(UNITKEY)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  UNITKEY is null)
       if @numnull != @numrows
          if (select count(*)
              from   DAFTUNIT t1, inserted t2
              where  t1.UNITKEY = t2.UNITKEY) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "MONEVWEBUSER".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MONEVWEBUSER] ENABLE TRIGGER [TI_MONEVWEBUSER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_MONEVWEBUSER] on [dbo].[MONEVWEBUSER] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "TAHAP" must exist when updating a child in "MONEVWEBUSER"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "MONEVWEBUSER".'
               goto error
            end
      end
      /*  Parent "MONEVWEBGROUP" must exist when updating a child in "MONEVWEBUSER"  */
      if update(GROUPID)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  GROUPID is null)
         if @numnull != @numrows
            if (select count(*)
                from   MONEVWEBGROUP t1, inserted t2
                where  t1.GROUPID = t2.GROUPID) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'MONEVWEBGROUP" does not exist. Cannot modify child in "MONEVWEBUSER".'
               goto error
            end
      end
      /*  Parent "PEGAWAI" must exist when updating a child in "MONEVWEBUSER"  */
      if update(NIP)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  NIP is null)
         if @numnull != @numrows
            if (select count(*)
                from   PEGAWAI t1, inserted t2
                where  t1.NIP = t2.NIP) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'PEGAWAI" does not exist. Cannot modify child in "MONEVWEBUSER".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "MONEVWEBUSER"  */
      if update(UNITKEY)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  UNITKEY is null)
         if @numnull != @numrows
            if (select count(*)
                from   DAFTUNIT t1, inserted t2
                where  t1.UNITKEY = t2.UNITKEY) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "MONEVWEBUSER".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MONEVWEBUSER] ENABLE TRIGGER [TU_MONEVWEBUSER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TD_MPARKEG] on [dbo].[MPARKEG] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       RETURN
       
       
       
    /*  Cannot delete parent "MPARKEG" if children still exist in "KEGUNIT"  */
    if exists (select 1
               from   KEGUNIT t3, MKEGIATAN t2, deleted t1
               where  t2.KDKEG_INDUK = t1.KDKEG_INDUK and t2.KDKEGUNIT = t3.KDKEGUNIT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in KUA PPA "KEGUNIT". Cannot delete parent Kegiatan "MPARKEG".'
          goto error
       end 

    /*  Cannot delete parent "MPARKEG" if children still exist in "MKEGIATAN"  */
    if exists (select 1
               from   MKEGIATAN t2, deleted t1
               where  t2.KDKEG_INDUK = t1.KDKEG_INDUK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in Tabel Sub Kegiatan "MPARKEGIATAN". Cannot delete parent Kegiatan "MPARKEG".'
          goto error
       end

       
       
       

    return

/*  Errors handling  */
error:
    raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MPARKEG] ENABLE TRIGGER [TD_MPARKEG]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE trigger [dbo].[TI_MPARKEG] on [dbo].[MPARKEG] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MPGRM" must exist when inserting a child in "MPARKEG"  */
    if update(IDPRGRM)
    begin
       if (select count(*)
           from   MPGRM t1, inserted t2
           where  t1.IDPRGRM = t2.IDPRGRM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MPGRM". Cannot ALTER child in "MPARKEG".'
             goto error
          end
    end

    /*  Parent "JPERSPEKTIF" must exist when inserting a child in "MPARKEG"  */
    if update(KDPERSPEKTIF)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KDPERSPEKTIF is null)
       if @numnull != @numrows
          if (select count(*)
              from   JPERSPEKTIF t1, inserted t2
              where  t1.KDPERSPEKTIF = t2.KDPERSPEKTIF) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JPERSPEKTIF". Cannot ALTER child in "MPARKEG".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errno, @errmsg,1)
    rollback  transaction
end


GO
ALTER TABLE [dbo].[MPARKEG] ENABLE TRIGGER [TI_MPARKEG]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE trigger [dbo].[TU_MPARKEG] on [dbo].[MPARKEG] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MPGRM" must exist when updating a child in "MPARKEG"  */
      if update(IDPRGRM)
      begin
         if (select count(*)
             from   MPGRM t1, inserted t2
             where  t1.IDPRGRM = t2.IDPRGRM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MPGRM" does not exist. Cannot modify child in "MPARKEG".'
               goto error
            end
      end

      /*  Parent "JPERSPEKTIF" must exist when updating a child in "MPARKEG"  */
      if update(KDPERSPEKTIF)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KDPERSPEKTIF is null)
         if @numnull != @numrows
            if (select count(*)
                from   JPERSPEKTIF t1, inserted t2
                where  t1.KDPERSPEKTIF = t2.KDPERSPEKTIF) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JPERSPEKTIF" does not exist. Cannot modify child in "MPARKEG".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MPARKEG" if children still exist in "MKEGIATAN"  */
      if update(KDKEG_INDUK)
      begin
         if exists (select 1
                    from   MKEGIATAN t2, inserted i1, deleted d1
                    where  t2.KDKEG_INDUK = d1.KDKEG_INDUK
                     and  (i1.KDKEG_INDUK != d1.KDKEG_INDUK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MKEGIATAN". Cannot modify parent code in "MPARKEG".'
               goto error
            end
      end



      return

/*  Errors handling  */
error:
    raiserror (@errno, @errmsg,1)
    rollback  transaction
end


GO
ALTER TABLE [dbo].[MPARKEG] ENABLE TRIGGER [TU_MPARKEG]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_MPGRM] on [dbo].[MPGRM] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "MPGRM" if children still exist in "MKEGIATAN"  */
    if exists (select 1
               from   MKEGIATAN t2, deleted t1
               where  t2.IDPRGRM = t1.IDPRGRM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MKEGIATAN". Cannot delete parent "MPGRM".'
          goto error
       end

    /*  Cannot delete parent "MPGRM" if children still exist in "PGRMUNIT"  */
    if exists (select 1
               from   PGRMUNIT t2, deleted t1
               where  t2.IDPRGRM = t1.IDPRGRM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PGRMUNIT". Cannot delete parent "MPGRM".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MPGRM] ENABLE TRIGGER [TD_MPGRM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_MPGRM] on [dbo].[MPGRM] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "MPGRM"  */
    if update(UNITKEY)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  UNITKEY is null)
       if @numnull != @numrows
          if (select count(*)
              from   DAFTUNIT t1, inserted t2
              where  t1.UNITKEY = t2.UNITKEY) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "MPGRM".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MPGRM] ENABLE TRIGGER [TI_MPGRM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_MPGRM] on [dbo].[MPGRM] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "MPGRM"  */
      if update(UNITKEY)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  UNITKEY is null)
         if @numnull != @numrows
            if (select count(*)
                from   DAFTUNIT t1, inserted t2
                where  t1.UNITKEY = t2.UNITKEY) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "MPGRM".'
               goto error
            end
      end
      /*  Cannot modify parent code in "MPGRM" if children still exist in "MKEGIATAN"  */
      if update(IDPRGRM)
      begin
         if exists (select 1
                    from   MKEGIATAN t2, inserted i1, deleted d1
                    where  t2.IDPRGRM = d1.IDPRGRM
                     and  (i1.IDPRGRM != d1.IDPRGRM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MKEGIATAN". Cannot modify parent code in "MPGRM".'
               goto error
            end
      end

      /*  Cannot modify parent code in "MPGRM" if children still exist in "PGRMUNIT"  */
      if update(IDPRGRM)
      begin
         if exists (select 1
                    from   PGRMUNIT t2, inserted i1, deleted d1
                    where  t2.IDPRGRM = d1.IDPRGRM
                     and  (i1.IDPRGRM != d1.IDPRGRM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PGRMUNIT". Cannot modify parent code in "MPGRM".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MPGRM] ENABLE TRIGGER [TU_MPGRM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_MTGDUNIT] on [dbo].[MTGDUNIT] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGD" must exist when inserting a child in "MTGDUNIT"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGD". Cannot create child in "MTGDUNIT".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "MTGDUNIT"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "MTGDUNIT".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MTGDUNIT] ENABLE TRIGGER [TI_MTGDUNIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_MTGDUNIT] on [dbo].[MTGDUNIT] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGD" must exist when updating a child in "MTGDUNIT"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGD" does not exist. Cannot modify child in "MTGDUNIT".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "MTGDUNIT"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "MTGDUNIT".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[MTGDUNIT] ENABLE TRIGGER [TU_MTGDUNIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_NRCBEND] on [dbo].[NRCBEND] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGNRC" must exist when inserting a child in "NRCBEND"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGNRC t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGNRC". Cannot create child in "NRCBEND".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "NRCBEND"  */
    if update(KEYBEND)
    begin
       if (select count(*)
           from   BEND t1, inserted t2
           where  t1.KEYBEND = t2.KEYBEND) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "NRCBEND".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[NRCBEND] ENABLE TRIGGER [TI_NRCBEND]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_NRCBEND] on [dbo].[NRCBEND] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGNRC" must exist when updating a child in "NRCBEND"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGNRC t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGNRC" does not exist. Cannot modify child in "NRCBEND".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "NRCBEND"  */
      if update(KEYBEND)
      begin
         if (select count(*)
             from   BEND t1, inserted t2
             where  t1.KEYBEND = t2.KEYBEND) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "NRCBEND".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[NRCBEND] ENABLE TRIGGER [TU_NRCBEND]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_NRCELIMINASI] on [dbo].[NRCELIMINASI] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "JURTUP" must exist when inserting a child in "NRCELIMINASI"  */
    if update(NOTUTUP)
    begin
       if (select count(*)
           from   JURTUP t1, inserted t2
           where  t1.NOTUTUP = t2.NOTUTUP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JURTUP". Cannot create child in "NRCELIMINASI".'
             goto error
          end
    end
    /*  Parent "PERSACC" must exist when inserting a child in "NRCELIMINASI"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "NRCELIMINASI".'
             goto error
          end
    end
    /*  Parent "MATANGNRC" must exist when inserting a child in "NRCELIMINASI"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGNRC t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGNRC". Cannot create child in "NRCELIMINASI".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[NRCELIMINASI] ENABLE TRIGGER [TI_NRCELIMINASI]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_NRCELIMINASI] on [dbo].[NRCELIMINASI] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "JURTUP" must exist when updating a child in "NRCELIMINASI"  */
      if update(NOTUTUP)
      begin
         if (select count(*)
             from   JURTUP t1, inserted t2
             where  t1.NOTUTUP = t2.NOTUTUP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JURTUP" does not exist. Cannot modify child in "NRCELIMINASI".'
               goto error
            end
      end
      /*  Parent "PERSACC" must exist when updating a child in "NRCELIMINASI"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "NRCELIMINASI".'
               goto error
            end
      end
      /*  Parent "MATANGNRC" must exist when updating a child in "NRCELIMINASI"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGNRC t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGNRC" does not exist. Cannot modify child in "NRCELIMINASI".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[NRCELIMINASI] ENABLE TRIGGER [TU_NRCELIMINASI]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_OTOKOROLARIB] on [dbo].[OTOKOROLARIB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGB" must exist when inserting a child in "OTOKOROLARIB"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGB". Cannot create child in "OTOKOROLARIB".'
             goto error
          end
    end
    /*  Parent "PERSACC" must exist when inserting a child in "OTOKOROLARIB"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "OTOKOROLARIB".'
             goto error
          end
    end
    /*  Parent "MATANGNRC" must exist when inserting a child in "OTOKOROLARIB"  */
    if update(MTGKEYNRC)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  MTGKEYNRC is null)
       if @numnull != @numrows
          if (select count(*)
              from   MATANGNRC t1, inserted t2
              where  t1.MTGKEY = t2.MTGKEYNRC) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGNRC". Cannot create child in "OTOKOROLARIB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[OTOKOROLARIB] ENABLE TRIGGER [TI_OTOKOROLARIB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_OTOKOROLARIB] on [dbo].[OTOKOROLARIB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGB" must exist when updating a child in "OTOKOROLARIB"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGB" does not exist. Cannot modify child in "OTOKOROLARIB".'
               goto error
            end
      end
      /*  Parent "PERSACC" must exist when updating a child in "OTOKOROLARIB"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "OTOKOROLARIB".'
               goto error
            end
      end
      /*  Parent "MATANGNRC" must exist when updating a child in "OTOKOROLARIB"  */
      if update(MTGKEYNRC)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  MTGKEYNRC is null)
         if @numnull != @numrows
            if (select count(*)
                from   MATANGNRC t1, inserted t2
                where  t1.MTGKEY = t2.MTGKEYNRC) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGNRC" does not exist. Cannot modify child in "OTOKOROLARIB".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[OTOKOROLARIB] ENABLE TRIGGER [TU_OTOKOROLARIB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_OTOKOROLARIR] on [dbo].[OTOKOROLARIR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "OTOKOROLARIR"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "OTOKOROLARIR".'
             goto error
          end
    end
    /*  Parent "PERSACC" must exist when inserting a child in "OTOKOROLARIR"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "OTOKOROLARIR".'
             goto error
          end
    end
    /*  Parent "MATANGNRC" must exist when inserting a child in "OTOKOROLARIR"  */
    if update(MTGKEYNRC)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  MTGKEYNRC is null)
       if @numnull != @numrows
          if (select count(*)
              from   MATANGNRC t1, inserted t2
              where  t1.MTGKEY = t2.MTGKEYNRC) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGNRC". Cannot create child in "OTOKOROLARIR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[OTOKOROLARIR] ENABLE TRIGGER [TI_OTOKOROLARIR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_OTOKOROLARIR] on [dbo].[OTOKOROLARIR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "OTOKOROLARIR"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "OTOKOROLARIR".'
               goto error
            end
      end
      /*  Parent "PERSACC" must exist when updating a child in "OTOKOROLARIR"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "OTOKOROLARIR".'
               goto error
            end
      end
      /*  Parent "MATANGNRC" must exist when updating a child in "OTOKOROLARIR"  */
      if update(MTGKEYNRC)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  MTGKEYNRC is null)
         if @numnull != @numrows
            if (select count(*)
                from   MATANGNRC t1, inserted t2
                where  t1.MTGKEY = t2.MTGKEYNRC) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGNRC" does not exist. Cannot modify child in "OTOKOROLARIR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[OTOKOROLARIR] ENABLE TRIGGER [TU_OTOKOROLARIR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_PANJAR] on [dbo].[PANJAR] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "PANJAR" if children still exist in "PANJARDET"  */
    if exists (select 1
               from   PANJARDET t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOPANJAR = t1.NOPANJAR)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PANJARDET". Cannot delete parent "PANJAR".'
          goto error
       end

    /*  Cannot delete parent "PANJAR" if children still exist in "BKUPANJAR"  */
    if exists (select 1
               from   BKUPANJAR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOPANJAR = t1.NOPANJAR)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUPANJAR". Cannot delete parent "PANJAR".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PANJAR] ENABLE TRIGGER [TD_PANJAR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_PANJAR] on [dbo].[PANJAR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "PANJAR"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "PANJAR".'
             goto error
          end
    end
    /*  Parent "ZKODE" must exist when inserting a child in "PANJAR"  */
    if update(IDXKODE)
    begin
       if (select count(*)
           from   ZKODE t1, inserted t2
           where  t1.IDXKODE = t2.IDXKODE) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "ZKODE". Cannot create child in "PANJAR".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "PANJAR"  */
    if update(KEYBEND)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "PANJAR".'
             goto error
          end
    end
    /*  Parent "PEGAWAI" must exist when inserting a child in "PANJAR"  */
    if update(NIP)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  NIP is null)
       if @numnull != @numrows
          if (select count(*)
              from   PEGAWAI t1, inserted t2
              where  t1.NIP = t2.NIP) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PEGAWAI". Cannot create child in "PANJAR".'
             goto error
          end
    end
    /*  Parent "STATTRS" must exist when inserting a child in "PANJAR"  */
    if update(KDSTATUS)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KDSTATUS is null)
       if @numnull != @numrows
          if (select count(*)
              from   STATTRS t1, inserted t2
              where  t1.KDSTATUS = t2.KDSTATUS) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STATTRS". Cannot create child in "PANJAR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PANJAR] ENABLE TRIGGER [TI_PANJAR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_PANJAR] on [dbo].[PANJAR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "PANJAR"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "PANJAR".'
               goto error
            end
      end
      /*  Parent "ZKODE" must exist when updating a child in "PANJAR"  */
      if update(IDXKODE)
      begin
         if (select count(*)
             from   ZKODE t1, inserted t2
             where  t1.IDXKODE = t2.IDXKODE) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ZKODE" does not exist. Cannot modify child in "PANJAR".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "PANJAR"  */
      if update(KEYBEND)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "PANJAR".'
               goto error
            end
      end
      /*  Parent "PEGAWAI" must exist when updating a child in "PANJAR"  */
      if update(NIP)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  NIP is null)
         if @numnull != @numrows
            if (select count(*)
                from   PEGAWAI t1, inserted t2
                where  t1.NIP = t2.NIP) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'PEGAWAI" does not exist. Cannot modify child in "PANJAR".'
               goto error
            end
      end
      /*  Parent "STATTRS" must exist when updating a child in "PANJAR"  */
      if update(KDSTATUS)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KDSTATUS is null)
         if @numnull != @numrows
            if (select count(*)
                from   STATTRS t1, inserted t2
                where  t1.KDSTATUS = t2.KDSTATUS) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'STATTRS" does not exist. Cannot modify child in "PANJAR".'
               goto error
            end
      end
      /*  Cannot modify parent code in "PANJAR" if children still exist in "PANJARDET"  */
      if update(UNITKEY) or
         update(NOPANJAR)
      begin
         if exists (select 1
                    from   PANJARDET t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOPANJAR = d1.NOPANJAR
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOPANJAR != d1.NOPANJAR))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PANJARDET". Cannot modify parent code in "PANJAR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PANJAR" if children still exist in "BKUPANJAR"  */
      if update(UNITKEY) or
         update(NOPANJAR)
      begin
         if exists (select 1
                from   BKUPANJAR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOPANJAR = d1.NOPANJAR
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOPANJAR != d1.NOPANJAR))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUPANJAR". Cannot modify parent code in "PANJAR".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PANJAR] ENABLE TRIGGER [TU_PANJAR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_PANJARDET] on [dbo].[PANJARDET] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "PANJAR" must exist when inserting a child in "PANJARDET"  */
    if update(UNITKEY) or
       update(NOPANJAR)
    begin
       if (select count(*)
           from   PANJAR t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOPANJAR = t2.NOPANJAR) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PANJAR". Cannot create child in "PANJARDET".'
             goto error
          end
    end
    /*  Parent "MKEGIATAN" must exist when inserting a child in "PANJARDET"  */
    if update(KDKEGUNIT)
    begin
       if (select count(*)
           from   MKEGIATAN t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "PANJARDET".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "PANJARDET"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "PANJARDET".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PANJARDET] ENABLE TRIGGER [TI_PANJARDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_PANJARDET] on [dbo].[PANJARDET] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "PANJAR" must exist when updating a child in "PANJARDET"  */
      if update(UNITKEY) or
         update(NOPANJAR)
      begin
         if (select count(*)
             from   PANJAR t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOPANJAR = t2.NOPANJAR) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PANJAR" does not exist. Cannot modify child in "PANJARDET".'
               goto error
            end
      end
      /*  Parent "MKEGIATAN" must exist when updating a child in "PANJARDET"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "PANJARDET".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "PANJARDET"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "PANJARDET".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PANJARDET] ENABLE TRIGGER [TU_PANJARDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_PEGAWAI] on [dbo].[PEGAWAI] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "PEGAWAI" if children still exist in "TTAPD"  */
    if exists (select 1
               from   TTAPD t2, deleted t1
               where  t2.NIP = t1.NIP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TTAPD". Cannot delete parent "PEGAWAI".'
          goto error
       end


---BEGIN REHATTA
    /*  Cannot delete parent "PEGAWAI" if children still exist in "KPA"  */
    if exists (select 1
               from   KPA t2, deleted t1
               where  t2.NIP = t1.NIP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KPA". Cannot delete parent "PEGAWAI".'
          goto error
       END



    /*  Cannot delete parent "PEGAWAI" if children still exist in "BENDKPA"  */
    if exists (select 1
               from   BENDKPA t2, deleted t1
               where  t2.NIP = t1.NIP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BENDKPA". Cannot delete parent "PEGAWAI".'
          goto error
       END
---END REHATTA       








    /*  Cannot delete parent "PEGAWAI" if children still exist in "BEND"  */
    if exists (select 1
               from   BEND t2, deleted t1
               where  t2.NIP = t1.NIP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BEND". Cannot delete parent "PEGAWAI".'
          goto error
       end

    /*  Cannot delete parent "PEGAWAI" if children still exist in "ATASBEND"  */
    if exists (select 1
               from   ATASBEND t2, deleted t1
               where  t2.NIP = t1.NIP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "ATASBEND". Cannot delete parent "PEGAWAI".'
          goto error
       end

    /*  Cannot delete parent "PEGAWAI" if children still exist in "JABTTD"  */
    if exists (select 1
               from   JABTTD t2, deleted t1
               where  t2.NIP = t1.NIP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "JABTTD". Cannot delete parent "PEGAWAI".'
          goto error
       end

    /*  Cannot delete parent "PEGAWAI" if children still exist in "KEGUNIT"  */
    if exists (select 1
               from   KEGUNIT t2, deleted t1
               where  t2.NIP = t1.NIP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KEGUNIT". Cannot delete parent "PEGAWAI".'
          goto error
       end

    /*  Cannot delete parent "PEGAWAI" if children still exist in "PANJAR"  */
    if exists (select 1
               from   PANJAR t2, deleted t1
               where  t2.NIP = t1.NIP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PANJAR". Cannot delete parent "PEGAWAI".'
          goto error
       end

    /*  Cannot delete parent "PEGAWAI" if children still exist in "WEBUSER"  */
    if exists (select 1
               from   WEBUSER t2, deleted t1
               where  t2.NIP = t1.NIP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "WEBUSER". Cannot delete parent "PEGAWAI".'
          goto error
       end

    /*  Cannot delete parent "PEGAWAI" if children still exist in "PPK"  */
    if exists (select 1
               from   PPK t2, deleted t1
               where  t2.NIP = t1.NIP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PPK". Cannot delete parent "PEGAWAI".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PEGAWAI] ENABLE TRIGGER [TD_PEGAWAI]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_PEGAWAI] on [dbo].[PEGAWAI] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "GOLONGAN" must exist when inserting a child in "PEGAWAI"  */
    if update(KDGOL)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KDGOL is null)
       if @numnull != @numrows
          if (select count(*)
              from   GOLONGAN t1, inserted t2
              where  t1.KDGOL = t2.KDGOL) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "GOLONGAN". Cannot create child in "PEGAWAI".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "PEGAWAI"  */
    if update(UNITKEY)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  UNITKEY is null)
       if @numnull != @numrows
          if (select count(*)
              from   DAFTUNIT t1, inserted t2
              where  t1.UNITKEY = t2.UNITKEY) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "PEGAWAI".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PEGAWAI] ENABLE TRIGGER [TI_PEGAWAI]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_PEGAWAI] on [dbo].[PEGAWAI] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "GOLONGAN" must exist when updating a child in "PEGAWAI"  */
      if update(KDGOL)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KDGOL is null)
         if @numnull != @numrows
            if (select count(*)
                from   GOLONGAN t1, inserted t2
                where  t1.KDGOL = t2.KDGOL) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'GOLONGAN" does not exist. Cannot modify child in "PEGAWAI".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "PEGAWAI"  */
      if update(UNITKEY)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  UNITKEY is null)
         if @numnull != @numrows
            if (select count(*)
                from   DAFTUNIT t1, inserted t2
                where  t1.UNITKEY = t2.UNITKEY) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "PEGAWAI".'
               goto error
            end
      end
      /*  Cannot modify parent code in "PEGAWAI" if children still exist in "TTAPD"  */
      if update(NIP)
      begin
         if exists (select 1
                    from   TTAPD t2, inserted i1, deleted d1
                    where  t2.NIP = d1.NIP
                     and  (i1.NIP != d1.NIP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TTAPD". Cannot modify parent code in "PEGAWAI".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PEGAWAI" if children still exist in "BEND"  */
      if update(NIP)
      begin
         if exists (select 1
                    from   BEND t2, inserted i1, deleted d1
                    where  t2.NIP = d1.NIP
                     and  (i1.NIP != d1.NIP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BEND". Cannot modify parent code in "PEGAWAI".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PEGAWAI" if children still exist in "ATASBEND"  */
      if update(NIP)
      begin
         if exists (select 1
                    from   ATASBEND t2, inserted i1, deleted d1
                    where  t2.NIP = d1.NIP
                     and  (i1.NIP != d1.NIP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "ATASBEND". Cannot modify parent code in "PEGAWAI".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PEGAWAI" if children still exist in "JABTTD"  */
      if update(NIP)
      begin
         if exists (select 1
                    from   JABTTD t2, inserted i1, deleted d1
                    where  t2.NIP = d1.NIP
                     and  (i1.NIP != d1.NIP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "JABTTD". Cannot modify parent code in "PEGAWAI".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PEGAWAI" if children still exist in "KEGUNIT"  */
      if update(NIP)
      begin
         if exists (select 1
                    from   KEGUNIT t2, inserted i1, deleted d1
                    where  t2.NIP = d1.NIP
                     and  (i1.NIP != d1.NIP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "KEGUNIT". Cannot modify parent code in "PEGAWAI".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PEGAWAI" if children still exist in "PANJAR"  */
      if update(NIP)
      begin
         if exists (select 1
                    from   PANJAR t2, inserted i1, deleted d1
                    where  t2.NIP = d1.NIP
                     and  (i1.NIP != d1.NIP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PANJAR". Cannot modify parent code in "PEGAWAI".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PEGAWAI" if children still exist in "WEBUSER"  */
      if update(NIP)
      begin
         if exists (select 1
                    from   WEBUSER t2, inserted i1, deleted d1
                    where  t2.NIP = d1.NIP
                     and  (i1.NIP != d1.NIP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "WEBUSER". Cannot modify parent code in "PEGAWAI".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PEGAWAI" if children still exist in "PPK"  */
      if update(NIP)
      begin
         if exists (select 1
                    from   PPK t2, inserted i1, deleted d1
                    where  t2.NIP = d1.NIP
                     and  (i1.NIP != d1.NIP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PPK". Cannot modify parent code in "PEGAWAI".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PEGAWAI] ENABLE TRIGGER [TU_PEGAWAI]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_PERIODE] on [dbo].[PERIODE] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "PERIODE" if children still exist in "BULAN"  */
    if exists (select 1
               from   BULAN t2, deleted t1
               where  t2.KDPERIODE = t1.KDPERIODE)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BULAN". Cannot delete parent "PERIODE".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PERIODE] ENABLE TRIGGER [TD_PERIODE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_PERIODE] on [dbo].[PERIODE] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "PERIODE" if children still exist in "BULAN"  */
      if update(KDPERIODE)
      begin
         if exists (select 1
                    from   BULAN t2, inserted i1, deleted d1
                    where  t2.KDPERIODE = d1.KDPERIODE
                     and  (i1.KDPERIODE != d1.KDPERIODE))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BULAN". Cannot modify parent code in "PERIODE".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PERIODE] ENABLE TRIGGER [TU_PERIODE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_PERSACC] on [dbo].[PERSACC] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "PERSACC" if children still exist in "JTRNLKAS"  */
    if exists (select 1
               from   JTRNLKAS t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "JTRNLKAS". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "SALDOAWAL"  */
    if exists (select 1
               from   SALDOAWAL t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOAWAL". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "SALDOAKHIR"  */
    if exists (select 1
               from   SALDOAKHIR t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDOAKHIR". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "RBMDETD"  */
    if exists (select 1
               from   RBMDETD t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RBMDETD". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "RBMDETB"  */
    if exists (select 1
               from   RBMDETB t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RBMDETB". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "RBMDETRTL"  */
    if exists (select 1
               from   RBMDETRTL t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RBMDETRTL". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "RBMDETR"  */
    if exists (select 1
               from   RBMDETR t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RBMDETR". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "RBMDETN"  */
    if exists (select 1
               from   RBMDETN t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RBMDETN". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "BKBMDET"  */
    if exists (select 1
               from   BKBMDET t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKBMDET". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "BKRKKDET"  */
    if exists (select 1
               from   BKRKKDET t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKRKKDET". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "BKRKMDET"  */
    if exists (select 1
               from   BKRKMDET t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKRKMDET". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "BKSPJDET"  */
    if exists (select 1
               from   BKSPJDET t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKSPJDET". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "JURTUP"  */
    if exists (select 1
               from   JURTUP t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "JURTUP". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "NRCELIMINASI"  */
    if exists (select 1
               from   NRCELIMINASI t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "NRCELIMINASI". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "TUPD"  */
    if exists (select 1
               from   TUPD t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TUPD". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "TUPR"  */
    if exists (select 1
               from   TUPR t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TUPR". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "TUPB"  */
    if exists (select 1
               from   TUPB t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TUPB". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "POSNORMAL"  */
    if exists (select 1
               from   POSNORMAL t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "POSNORMAL". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "OTOKOROLARIR"  */
    if exists (select 1
               from   OTOKOROLARIR t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "OTOKOROLARIR". Cannot delete parent "PERSACC".'
          goto error
       end

    /*  Cannot delete parent "PERSACC" if children still exist in "OTOKOROLARIB"  */
    if exists (select 1
               from   OTOKOROLARIB t2, deleted t1
               where  t2.KDPERS = t1.KDPERS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "OTOKOROLARIB". Cannot delete parent "PERSACC".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PERSACC] ENABLE TRIGGER [TD_PERSACC]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_PERSACC] on [dbo].[PERSACC] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "PERSACC" if children still exist in "JTRNLKAS"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   JTRNLKAS t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "JTRNLKAS". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "SALDOAWAL"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   SALDOAWAL t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOAWAL". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "SALDOAKHIR"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   SALDOAKHIR t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDOAKHIR". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "RBMDETD"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   RBMDETD t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RBMDETD". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "RBMDETB"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   RBMDETB t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RBMDETB". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "RBMDETRTL"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   RBMDETRTL t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RBMDETRTL". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "RBMDETR"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   RBMDETR t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RBMDETR". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "RBMDETN"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   RBMDETN t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RBMDETN". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "BKBMDET"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   BKBMDET t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKBMDET". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "BKRKKDET"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   BKRKKDET t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKRKKDET". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "BKRKMDET"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   BKRKMDET t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKRKMDET". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "BKSPJDET"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   BKSPJDET t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKSPJDET". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "JURTUP"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   JURTUP t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "JURTUP". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "NRCELIMINASI"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   NRCELIMINASI t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "NRCELIMINASI". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "TUPD"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   TUPD t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TUPD". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "TUPR"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   TUPR t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TUPR". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "TUPB"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   TUPB t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TUPB". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "POSNORMAL"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   POSNORMAL t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "POSNORMAL". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "OTOKOROLARIR"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   OTOKOROLARIR t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "OTOKOROLARIR". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PERSACC" if children still exist in "OTOKOROLARIB"  */
      if update(KDPERS)
      begin
         if exists (select 1
                    from   OTOKOROLARIB t2, inserted i1, deleted d1
                    where  t2.KDPERS = d1.KDPERS
                     and  (i1.KDPERS != d1.KDPERS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "OTOKOROLARIB". Cannot modify parent code in "PERSACC".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PERSACC] ENABLE TRIGGER [TU_PERSACC]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_PGRMUNIT] on [dbo].[PGRMUNIT] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "PGRMUNIT" if children still exist in "KEGUNIT"  */
    if exists (select 1
               from   KEGUNIT t2, deleted t1
               where  t2.KDTAHAP = t1.KDTAHAP
                and   t2.UNITKEY = t1.UNITKEY
                and   t2.IDPRGRM = t1.IDPRGRM)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KEGUNIT". Cannot delete parent "PGRMUNIT".'
          goto error
       end


    return

/*  Errors handling  */
error:
  raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PGRMUNIT] ENABLE TRIGGER [TD_PGRMUNIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_PGRMUNIT] on [dbo].[PGRMUNIT] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "TAHAP" must exist when inserting a child in "PGRMUNIT"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "PGRMUNIT".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "PGRMUNIT"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "PGRMUNIT".'
             goto error
          end
    end
    /*  Parent "MPGRM" must exist when inserting a child in "PGRMUNIT"  */
    if update(IDPRGRM)
    begin
       if (select count(*)
           from   MPGRM t1, inserted t2
           where  t1.IDPRGRM = t2.IDPRGRM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MPGRM". Cannot create child in "PGRMUNIT".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PGRMUNIT] ENABLE TRIGGER [TI_PGRMUNIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_PGRMUNIT] on [dbo].[PGRMUNIT] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "TAHAP" must exist when updating a child in "PGRMUNIT"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "PGRMUNIT".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "PGRMUNIT"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "PGRMUNIT".'
               goto error
            end
      end
      /*  Parent "MPGRM" must exist when updating a child in "PGRMUNIT"  */
      if update(IDPRGRM)
      begin
         if (select count(*)
             from   MPGRM t1, inserted t2
             where  t1.IDPRGRM = t2.IDPRGRM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MPGRM" does not exist. Cannot modify child in "PGRMUNIT".'
               goto error
            end
      end
      /*  Cannot modify parent code in "PGRMUNIT" if children still exist in "KEGUNIT"  */
      if update(KDTAHAP) or
         update(UNITKEY) or
         update(IDPRGRM)
      begin
         if exists (select 1
                    from   KEGUNIT t2, inserted i1, deleted d1
                    where  t2.KDTAHAP = d1.KDTAHAP
                     and   t2.UNITKEY = d1.UNITKEY
                     and   t2.IDPRGRM = d1.IDPRGRM
                     and  (i1.KDTAHAP != d1.KDTAHAP
                      or   i1.UNITKEY != d1.UNITKEY
                      or   i1.IDPRGRM != d1.IDPRGRM))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "KEGUNIT". Cannot modify parent code in "PGRMUNIT".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PGRMUNIT] ENABLE TRIGGER [TU_PGRMUNIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_POSNORMAL] on [dbo].[POSNORMAL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "PERSACC" must exist when inserting a child in "POSNORMAL"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "POSNORMAL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[POSNORMAL] ENABLE TRIGGER [TI_POSNORMAL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_POSNORMAL] on [dbo].[POSNORMAL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "PERSACC" must exist when updating a child in "POSNORMAL"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "POSNORMAL".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[POSNORMAL] ENABLE TRIGGER [TU_POSNORMAL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_PPK] on [dbo].[PPK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "PEGAWAI" must exist when inserting a child in "PPK"  */
    if update(NIP)
    begin
       if (select count(*)
           from   PEGAWAI t1, inserted t2
           where  t1.NIP = t2.NIP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PEGAWAI". Cannot create child in "PPK".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "PPK"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "PPK".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PPK] ENABLE TRIGGER [TI_PPK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_PPK] on [dbo].[PPK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "PEGAWAI" must exist when updating a child in "PPK"  */
      if update(NIP)
      begin
         if (select count(*)
             from   PEGAWAI t1, inserted t2
             where  t1.NIP = t2.NIP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PEGAWAI" does not exist. Cannot modify child in "PPK".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "PPK"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "PPK".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PPK] ENABLE TRIGGER [TU_PPK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_PROFIL] on [dbo].[PROFIL] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "PROFIL" if children still exist in "PROFILUNIT"  */
    if exists (select 1
               from   PROFILUNIT t2, deleted t1
               where  t2.KDPROFIL = t1.KDPROFIL)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PROFILUNIT". Cannot delete parent "PROFIL".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PROFIL] ENABLE TRIGGER [TD_PROFIL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_PROFIL] on [dbo].[PROFIL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "PROFIL" if children still exist in "PROFILUNIT"  */
      if update(KDPROFIL)
      begin
         if exists (select 1
                    from   PROFILUNIT t2, inserted i1, deleted d1
                    where  t2.KDPROFIL = d1.KDPROFIL
                     and  (i1.KDPROFIL != d1.KDPROFIL))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PROFILUNIT". Cannot modify parent code in "PROFIL".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PROFIL] ENABLE TRIGGER [TU_PROFIL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_PROFILUNIT] on [dbo].[PROFILUNIT] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "PROFILUNIT"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "PROFILUNIT".'
             goto error
          end
    end
    /*  Parent "PROFIL" must exist when inserting a child in "PROFILUNIT"  */
    if update(KDPROFIL)
    begin
       if (select count(*)
           from   PROFIL t1, inserted t2
           where  t1.KDPROFIL = t2.KDPROFIL) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PROFIL". Cannot create child in "PROFILUNIT".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PROFILUNIT] ENABLE TRIGGER [TI_PROFILUNIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_PROFILUNIT] on [dbo].[PROFILUNIT] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "PROFILUNIT"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "PROFILUNIT".'
               goto error
            end
      end
      /*  Parent "PROFIL" must exist when updating a child in "PROFILUNIT"  */
      if update(KDPROFIL)
      begin
         if (select count(*)
             from   PROFIL t1, inserted t2
             where  t1.KDPROFIL = t2.KDPROFIL) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PROFIL" does not exist. Cannot modify child in "PROFILUNIT".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[PROFILUNIT] ENABLE TRIGGER [TU_PROFILUNIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE trigger [dbo].[TD_PSPJ] on [dbo].[PSPJ] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "PSPJ" if children still exist in "SPJSPP"  */
    if exists (select 1
               from   SPJSPP t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPJ = t1.NOSPJ)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJSPP". Cannot delete parent "PSPJ".'
          goto error
       end

    /*  Cannot delete parent "PSPJ" if children still exist in "SPJDETP"  */
    if exists (select 1
               from   SPJDETP t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPJ = t1.NOSPJ)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETP". Cannot delete parent "PSPJ".'
          goto error
       end

    /*  Cannot delete parent "PSPJ" if children still exist in "BPKSPJ"  */
    if exists (select 1
               from   BPKSPJ t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPJ = t1.NOSPJ)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPKSPJ". Cannot delete parent "PSPJ".'
          goto error
       end

    /*  Cannot delete parent "PSPJ" if children still exist in "SPJDETR"  */
    if exists (select 1
               from   SPJDETR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPJ = t1.NOSPJ)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETR". Cannot delete parent "PSPJ".'
          goto error
       end

    /*  Cannot delete parent "PSPJ" if children still exist in "SPJDETRTL"  */
    if exists (select 1
               from   SPJDETRTL t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPJ = t1.NOSPJ)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETRTL". Cannot delete parent "PSPJ".'
          goto error
       end

    /*  Cannot delete parent "PSPJ" if children still exist in "SPJDETB"  */
    if exists (select 1
               from   SPJDETB t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPJ = t1.NOSPJ)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETB". Cannot delete parent "PSPJ".'
          goto error
       end

    /*  Cannot delete parent "PSPJ" if children still exist in "SPJDETD"  */
    if exists (select 1
               from   SPJDETD t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPJ = t1.NOSPJ)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJDETD". Cannot delete parent "PSPJ".'
          goto error
       end

    /*  Cannot delete parent "PSPJ" if children still exist in "BKSPJ"  */
    if exists (select 1
               from   BKSPJ t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPJ = t1.NOSPJ)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKSPJ". Cannot delete parent "PSPJ".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end



GO
ALTER TABLE [dbo].[PSPJ] ENABLE TRIGGER [TD_PSPJ]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE trigger [dbo].[TI_PSPJ] on [dbo].[PSPJ] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "ZKODE" must exist when inserting a child in "PSPJ"  */
    if update(IDXKODE)
    begin
       if (select count(*)
           from   ZKODE t1, inserted t2
           where  t1.IDXKODE = t2.IDXKODE) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "ZKODE". Cannot create child in "PSPJ".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "PSPJ"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "PSPJ".'
             goto error
          end
    end
    /*  Parent "STATTRS" must exist when inserting a child in "PSPJ"  */
    if update(KDSTATUS)
    begin
       if (select count(*)
           from   STATTRS t1, inserted t2
           where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STATTRS". Cannot create child in "PSPJ".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "PSPJ"  */
--    if update(KEYBEND)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  KEYBEND is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   BEND t1, inserted t2
--              where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "PSPJ".'
--             goto error
--          end
--    end
    /*  Parent "JABTTD" must exist when inserting a child in "PSPJ"  */
--    if update(IDXTTD)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "PSPJ".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end





GO
ALTER TABLE [dbo].[PSPJ] ENABLE TRIGGER [TI_PSPJ]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE trigger [dbo].[TU_PSPJ] on [dbo].[PSPJ] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "ZKODE" must exist when updating a child in "PSPJ"  */
      if update(IDXKODE)
      begin
         if (select count(*)
             from   ZKODE t1, inserted t2
             where  t1.IDXKODE = t2.IDXKODE) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ZKODE" does not exist. Cannot modify child in "PSPJ".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "PSPJ"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "PSPJ".'
               goto error
            end
      end
      /*  Parent "STATTRS" must exist when updating a child in "PSPJ"  */
      if update(KDSTATUS)
      begin
         if (select count(*)
             from   STATTRS t1, inserted t2
             where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STATTRS" does not exist. Cannot modify child in "PSPJ".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "PSPJ"  */
--      if update(KEYBEND)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  KEYBEND is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   BEND t1, inserted t2
--                where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'BEND" does not exist. Cannot modify child in "PSPJ".'
--               goto error
--            end
--      end
      /*  Parent "JABTTD" must exist when updating a child in "PSPJ"  */
--      if update(IDXTTD)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDXTTD is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   JABTTD t1, inserted t2
--                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "PSPJ".'
--               goto error
--            end
--      end
      /*  Cannot modify parent code in "PSPJ" if children still exist in "SPJSPP"  */
      if update(UNITKEY) or
         update(NOSPJ)
      begin
         if exists (select 1
                    from   SPJSPP t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPJ = d1.NOSPJ
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPJ != d1.NOSPJ))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJSPP". Cannot modify parent code in "PSPJ".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PSPJ" if children still exist in "SPJDETP"  */
      if update(UNITKEY) or
         update(NOSPJ)
      begin
         if exists (select 1
                    from   SPJDETP t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPJ = d1.NOSPJ
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPJ != d1.NOSPJ))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETP". Cannot modify parent code in "PSPJ".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PSPJ" if children still exist in "BPKSPJ"  */
      if update(UNITKEY) or
         update(NOSPJ)
      begin
         if exists (select 1
                    from   BPKSPJ t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPJ = d1.NOSPJ
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPJ != d1.NOSPJ))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPKSPJ". Cannot modify parent code in "PSPJ".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PSPJ" if children still exist in "SPJDETR"  */
      if update(UNITKEY) or
         update(NOSPJ)
      begin
         if exists (select 1
                    from   SPJDETR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPJ = d1.NOSPJ
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPJ != d1.NOSPJ))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETR". Cannot modify parent code in "PSPJ".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PSPJ" if children still exist in "SPJDETRTL"  */
      if update(UNITKEY) or
         update(NOSPJ)
      begin
         if exists (select 1
                    from   SPJDETRTL t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPJ = d1.NOSPJ
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPJ != d1.NOSPJ))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETRTL". Cannot modify parent code in "PSPJ".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PSPJ" if children still exist in "SPJDETB"  */
      if update(UNITKEY) or
         update(NOSPJ)
      begin
         if exists (select 1
                    from   SPJDETB t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPJ = d1.NOSPJ
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPJ != d1.NOSPJ))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETB". Cannot modify parent code in "PSPJ".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PSPJ" if children still exist in "SPJDETD"  */
      if update(UNITKEY) or
         update(NOSPJ)
      begin
         if exists (select 1
                    from   SPJDETD t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPJ = d1.NOSPJ
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPJ != d1.NOSPJ))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJDETD". Cannot modify parent code in "PSPJ".'
               goto error
            end
      end

      /*  Cannot modify parent code in "PSPJ" if children still exist in "BKSPJ"  */
      if update(UNITKEY) or
         update(NOSPJ)
      begin
         if exists (select 1
                    from   BKSPJ t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPJ = d1.NOSPJ
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPJ != d1.NOSPJ))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKSPJ". Cannot modify parent code in "PSPJ".'
               goto error
            end
      END
  




      
      
	 --,@tglvalid datetime
     IF  UPDATE(TGLSAH)      
      declare @UNITKEY VARCHAR(10), @NOBKU VARCHAR(100),@NOSPJ VARCHAR(100), @TABLENAME VARCHAR(20), @KDSTATUS VARCHAR(2), @IDXKODE INT, @TGLSAH DATETIME
		BEGIN 
			declare cjurnal cursor for
				SELECT I.NOSAH,I.NOSPJ, 'PSPJ' TABLENAME, I.UNITKEY, I.KDSTATUS, I.IDXKODE, I.TGLSAH from INSERTED I --INNER JOIN TBP T ON T.UNITKEY = I.UNITKEY AND T.NOTBP = I.NOTBP 
			open cjurnal
			fetch next from cjurnal into @NOBKU,@NOSPJ,  @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE, @TGLSAH
			while @@FETCH_STATUS=0
			begin	
				IF @TGLSAH IS NULL --BY RE 19 JUNI 2014
				BEGIN
			
				
							 if exists (select 1
										from   SPJSPP t2, inserted i1, deleted d1
										where  t2.UNITKEY = d1.UNITKEY
										 and   t2.NOSPJ = d1.NOSPJ AND T2.NOSPJ IS NOT NULL
										 )
								begin
								   select @errno  = 50005,
										 @errmsg = 'SPJ SUDAH DIGUNAKAN "SPP". TIDAK DAPAT MENGHAPUS TGLSAH "PSPJ".'
								   goto error
								END ELSE
								BEGIN
											DELETE FROM jurnal WHERE unitkey = @UNITKEY AND NOBUKTI = @NOSPJ AND kdstatus IN ('42','43','20') -----TAMBAH KDSTATUS BY RE 19 JAN 2014
				
								END	
						


					
					
				END
				ELSE
				IF @TGLSAH IS NOT NULL	   --BY RE 19 JUNI 2014
				BEGIN
					DELETE FROM jurnal WHERE UNITKEY = @UNITKEY AND NOBUKTI = @NOSPJ AND kdstatus IN ('42','43','20') 
					exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE	
				END				
				fetch next from cjurnal into @NOBKU,@NOSPJ , @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE, @TGLSAH
			end
			close cjurnal
			deallocate cjurnal
		END
      
      if update(tglvalid)
      declare  @UNITKEYSPJ VARCHAR(10),@tglvalid datetime, @NOSPJSKPD varchar(50)
      begin
		declare cjurnal cursor for
			select unitkey,NOSPJ,tglvalid from inserted
		open cjurnal
		fetch next from cjurnal into @UNITKEYSPJ,@NOSPJSKPD,@tglvalid
		while @@FETCH_STATUS=0
		begin	
			
			IF @TGLVALID IS NOT NULL
			BEGIN
				
				if exists 
					(
						select 1
							from   
							(
								SELECT UNITKEY, KD_BULAN,NOSPJ FROM
								(
										SELECT UNITKEY, KD_BULAN, @NOSPJSKPD NOSPJ FROM LAPORSAH  WHERE UNITKEY=@UNITKEYSPJ  
										
								) A	
							) t2,   inserted i1, deleted d1
							where  t2.UNITKEY = d1.UNITKEY
							and   t2.NOSPJ = d1.NOSPJ AND MONTH(D1.TGLVALID) <=  KD_BULAN
					)
					BEGIN
							
							select @errno  = 50005,
							@errmsg =  'JURNAL SUDAH DIKUNCI DI PENGESAHAN LAPORAN PEMBUKUAN'
							goto error

							
					END
					ELSE
					BEGIN
							UPDATE jurnal SET tgl_valid = @TGLVALID WHERE unitkey = @UNITKEYSPJ AND NOBUKTI = @NOSPJSKPD 
							AND kdstatus IN ('42','43','20')-----TAMBAH KDSTATUS BY RE 19 JAN 2014						

					END	
				
				
			END ELSE
			IF @TGLVALID IS NULL	
			BEGIN
				
				if exists 
					(
						select 1
							from   
							(
								SELECT * FROM PSPJ WHERE UNITKEY=@UNITKEYSPJ AND NOSPJ=@NOSPJSKPD
							) t2,   deleted d1
							where  t2.UNITKEY = d1.UNITKEY
							and   t2.NOSPJ = d1.NOSPJ 
							AND MONTH(D1.TGLVALID)<=(SELECT KD_BULAN
							                           FROM LAPORSAH WHERE UNITKEY=@UNITKEYSPJ)
					)
				BEGIN
							select @errno  = 50005,
							@errmsg =  'JURNAL TIDAK DAPAT DIHAPUS SUDAH DIKUNCI DI PENGESAHAN LAPORAN PEMBUKUAN'
							goto error
							
				END	ELSE
				BEGIN
							UPDATE jurnal SET tgl_valid = @TGLVALID WHERE unitkey = @UNITKEYSPJ AND NOBUKTI = @NOSPJSKPD 
							AND kdstatus IN ('42','43','20')-----TAMBAH KDSTATUS BY RE 19 JAN 2014	
				END	
				
			END
			
			
				
				
			
			fetch next from cjurnal into @UNITKEYSPJ,@NOSPJSKPD,@tglvalid
		end
		close cjurnal
		deallocate cjurnal
      end
     


      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end








GO
ALTER TABLE [dbo].[PSPJ] ENABLE TRIGGER [TU_PSPJ]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_RASKB] on [dbo].[RASKB] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "RASKB" if children still exist in "RASKBLNB"  */
    if exists (select 1
               from   RASKBLNB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY
                and   t2.KDTAHAP = t1.KDTAHAP
                and   t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKBLNB". Cannot delete parent "RASKB".'
          goto error
       end

    /*  Cannot delete parent "RASKB" if children still exist in "RASKDETB"  */
    if exists (select 1
               from   RASKDETB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY
                and   t2.KDTAHAP = t1.KDTAHAP
                and   t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKDETB". Cannot delete parent "RASKB".'
          goto error
       end

    /*  Cannot delete parent "RASKB" if children still exist in "SBDANAB"  */
    if exists (select 1
               from   SBDANAB t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY
                and   t2.KDTAHAP = t1.KDTAHAP
                and   t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SBDANAB". Cannot delete parent "RASKB".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKB] ENABLE TRIGGER [TD_RASKB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RASKB] on [dbo].[RASKB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGB" must exist when inserting a child in "RASKB"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGB". Cannot create child in "RASKB".'
             goto error
          end
    end
    /*  Parent "TAHAP" must exist when inserting a child in "RASKB"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "RASKB".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "RASKB"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "RASKB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKB] ENABLE TRIGGER [TI_RASKB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RASKB] on [dbo].[RASKB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGB" must exist when updating a child in "RASKB"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGB" does not exist. Cannot modify child in "RASKB".'
               goto error
            end
      end
      /*  Parent "TAHAP" must exist when updating a child in "RASKB"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "RASKB".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "RASKB"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "RASKB".'
               goto error
            end
      end
      /*  Cannot modify parent code in "RASKB" if children still exist in "RASKBLNB"  */
      if update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if exists (select 1
                    from   RASKBLNB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and   t2.KDTAHAP = d1.KDTAHAP
                     and   t2.UNITKEY = d1.UNITKEY
                     and  (i1.MTGKEY != d1.MTGKEY
                      or   i1.KDTAHAP != d1.KDTAHAP
                      or   i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKBLNB". Cannot modify parent code in "RASKB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "RASKB" if children still exist in "RASKDETB"  */
      if update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if exists (select 1
                    from   RASKDETB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and   t2.KDTAHAP = d1.KDTAHAP
                     and   t2.UNITKEY = d1.UNITKEY
                     and  (i1.MTGKEY != d1.MTGKEY
                      or   i1.KDTAHAP != d1.KDTAHAP
                      or   i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKDETB". Cannot modify parent code in "RASKB".'
               goto error
            end
      end

      /*  Cannot modify parent code in "RASKB" if children still exist in "SBDANAB"  */
      if update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if exists (select 1
                    from   SBDANAB t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and   t2.KDTAHAP = d1.KDTAHAP
                     and   t2.UNITKEY = d1.UNITKEY
                     and  (i1.MTGKEY != d1.MTGKEY
                      or   i1.KDTAHAP != d1.KDTAHAP
                      or   i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SBDANAB". Cannot modify parent code in "RASKB".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKB] ENABLE TRIGGER [TU_RASKB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RASKBLNB] on [dbo].[RASKBLNB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "RASKB" must exist when inserting a child in "RASKBLNB"  */
    if update(MTGKEY) or
       update(KDTAHAP) or
       update(UNITKEY)
    begin
       if (select count(*)
           from   RASKB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY
            and   t1.KDTAHAP = t2.KDTAHAP
            and   t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "RASKB". Cannot create child in "RASKBLNB".'
             goto error
          end
    end
    /*  Parent "BULAN" must exist when inserting a child in "RASKBLNB"  */
    if update(KD_BULAN)
    begin
       if (select count(*)
           from   BULAN t1, inserted t2
           where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BULAN". Cannot create child in "RASKBLNB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKBLNB] ENABLE TRIGGER [TI_RASKBLNB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RASKBLNB] on [dbo].[RASKBLNB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "RASKB" must exist when updating a child in "RASKBLNB"  */
      if update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if (select count(*)
             from   RASKB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY
              and   t1.KDTAHAP = t2.KDTAHAP
              and   t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'RASKB" does not exist. Cannot modify child in "RASKBLNB".'
               goto error
            end
      end
      /*  Parent "BULAN" must exist when updating a child in "RASKBLNB"  */
      if update(KD_BULAN)
      begin
         if (select count(*)
             from   BULAN t1, inserted t2
             where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BULAN" does not exist. Cannot modify child in "RASKBLNB".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKBLNB] ENABLE TRIGGER [TU_RASKBLNB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RASKBLND] on [dbo].[RASKBLND] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "RASKD" must exist when inserting a child in "RASKBLND"  */
    if update(MTGKEY) or
       update(KDTAHAP) or
       update(UNITKEY)
    begin
       if (select count(*)
           from   RASKD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY
            and   t1.KDTAHAP = t2.KDTAHAP
            and   t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "RASKD". Cannot create child in "RASKBLND".'
             goto error
          end
    end
    /*  Parent "BULAN" must exist when inserting a child in "RASKBLND"  */
    if update(KD_BULAN)
    begin
       if (select count(*)
           from   BULAN t1, inserted t2
           where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BULAN". Cannot create child in "RASKBLND".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKBLND] ENABLE TRIGGER [TI_RASKBLND]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RASKBLND] on [dbo].[RASKBLND] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "RASKD" must exist when updating a child in "RASKBLND"  */
      if update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if (select count(*)
             from   RASKD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY
              and   t1.KDTAHAP = t2.KDTAHAP
              and   t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'RASKD" does not exist. Cannot modify child in "RASKBLND".'
               goto error
            end
      end
      /*  Parent "BULAN" must exist when updating a child in "RASKBLND"  */
      if update(KD_BULAN)
      begin
         if (select count(*)
             from   BULAN t1, inserted t2
             where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BULAN" does not exist. Cannot modify child in "RASKBLND".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKBLND] ENABLE TRIGGER [TU_RASKBLND]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RASKBLNR] on [dbo].[RASKBLNR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "RASKR" must exist when inserting a child in "RASKBLNR"  */
    if update(KDKEGUNIT) or
       update(MTGKEY) or
       update(KDTAHAP) or
       update(UNITKEY)
    begin
       if (select count(*)
           from   RASKR t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT
            and   t1.MTGKEY = t2.MTGKEY
            and   t1.KDTAHAP = t2.KDTAHAP
            and   t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "RASKR". Cannot create child in "RASKBLNR".'
             goto error
          end
    end
    /*  Parent "BULAN" must exist when inserting a child in "RASKBLNR"  */
    if update(KD_BULAN)
    begin
       if (select count(*)
           from   BULAN t1, inserted t2
           where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BULAN". Cannot create child in "RASKBLNR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKBLNR] ENABLE TRIGGER [TI_RASKBLNR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RASKBLNR] on [dbo].[RASKBLNR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "RASKR" must exist when updating a child in "RASKBLNR"  */
      if update(KDKEGUNIT) or
         update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if (select count(*)
             from   RASKR t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT
              and   t1.MTGKEY = t2.MTGKEY
              and   t1.KDTAHAP = t2.KDTAHAP
              and   t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'RASKR" does not exist. Cannot modify child in "RASKBLNR".'
               goto error
            end
      end
      /*  Parent "BULAN" must exist when updating a child in "RASKBLNR"  */
      if update(KD_BULAN)
      begin
         if (select count(*)
             from   BULAN t1, inserted t2
             where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BULAN" does not exist. Cannot modify child in "RASKBLNR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKBLNR] ENABLE TRIGGER [TU_RASKBLNR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RASKBLNRTL] on [dbo].[RASKBLNRTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "RASKRTL" must exist when inserting a child in "RASKBLNRTL"  */
    if update(MTGKEY) or
       update(KDTAHAP) or
       update(UNITKEY)
    begin
       if (select count(*)
           from   RASKRTL t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY
            and   t1.KDTAHAP = t2.KDTAHAP
            and   t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "RASKRTL". Cannot create child in "RASKBLNRTL".'
             goto error
          end
    end
    /*  Parent "BULAN" must exist when inserting a child in "RASKBLNRTL"  */
    if update(KD_BULAN)
    begin
       if (select count(*)
           from   BULAN t1, inserted t2
           where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BULAN". Cannot create child in "RASKBLNRTL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKBLNRTL] ENABLE TRIGGER [TI_RASKBLNRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RASKBLNRTL] on [dbo].[RASKBLNRTL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "RASKRTL" must exist when updating a child in "RASKBLNRTL"  */
      if update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if (select count(*)
             from   RASKRTL t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY
              and   t1.KDTAHAP = t2.KDTAHAP
              and   t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'RASKRTL" does not exist. Cannot modify child in "RASKBLNRTL".'
               goto error
            end
      end
      /*  Parent "BULAN" must exist when updating a child in "RASKBLNRTL"  */
      if update(KD_BULAN)
      begin
         if (select count(*)
             from   BULAN t1, inserted t2
             where  t1.KD_BULAN = t2.KD_BULAN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BULAN" does not exist. Cannot modify child in "RASKBLNRTL".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKBLNRTL] ENABLE TRIGGER [TU_RASKBLNRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_RASKD] on [dbo].[RASKD] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "RASKD" if children still exist in "RASKBLND"  */
    if exists (select 1
               from   RASKBLND t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY
                and   t2.KDTAHAP = t1.KDTAHAP
                and   t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKBLND". Cannot delete parent "RASKD".'
          goto error
       end

    /*  Cannot delete parent "RASKD" if children still exist in "RASKDETD"  */
    if exists (select 1
               from   RASKDETD t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY
                and   t2.KDTAHAP = t1.KDTAHAP
                and   t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKDETD". Cannot delete parent "RASKD".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKD] ENABLE TRIGGER [TD_RASKD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RASKD] on [dbo].[RASKD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGD" must exist when inserting a child in "RASKD"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGD". Cannot create child in "RASKD".'
             goto error
          end
    end
    /*  Parent "TAHAP" must exist when inserting a child in "RASKD"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "RASKD".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "RASKD"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "RASKD".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKD] ENABLE TRIGGER [TI_RASKD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RASKD] on [dbo].[RASKD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGD" must exist when updating a child in "RASKD"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGD" does not exist. Cannot modify child in "RASKD".'
               goto error
            end
      end
      /*  Parent "TAHAP" must exist when updating a child in "RASKD"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "RASKD".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "RASKD"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "RASKD".'
               goto error
            end
      end
      /*  Cannot modify parent code in "RASKD" if children still exist in "RASKBLND"  */
      if update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if exists (select 1
                    from   RASKBLND t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and   t2.KDTAHAP = d1.KDTAHAP
                     and   t2.UNITKEY = d1.UNITKEY
                     and  (i1.MTGKEY != d1.MTGKEY
                      or   i1.KDTAHAP != d1.KDTAHAP
                      or   i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKBLND". Cannot modify parent code in "RASKD".'
               goto error
            end
      end

      /*  Cannot modify parent code in "RASKD" if children still exist in "RASKDETD"  */
      if update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if exists (select 1
                    from   RASKDETD t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and   t2.KDTAHAP = d1.KDTAHAP
                     and   t2.UNITKEY = d1.UNITKEY
                     and  (i1.MTGKEY != d1.MTGKEY
                      or   i1.KDTAHAP != d1.KDTAHAP
                      or   i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKDETD". Cannot modify parent code in "RASKD".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKD] ENABLE TRIGGER [TU_RASKD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_RASKDETB] on [dbo].[RASKDETB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "RASKB" must exist when inserting a child in "RASKDETB"  */
    if update(MTGKEY) or
       update(KDTAHAP) or
       update(UNITKEY)
    begin
       if (select count(*)
           from   RASKB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY
            and   t1.KDTAHAP = t2.KDTAHAP
            and   t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "RASKB". Cannot create child in "RASKDETB".'
             goto error
          end
    end
    /*  Parent "STDHARGA" must exist when inserting a child in "RASKDETB"  */
--    if update(IDSTDHARGA)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDSTDHARGA is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   STDHARGA t1, inserted t2
--              where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "STDHARGA". Cannot create child in "RASKDETB".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[RASKDETB] ENABLE TRIGGER [TI_RASKDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TU_RASKDETB] on [dbo].[RASKDETB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "RASKB" must exist when updating a child in "RASKDETB"  */
      if update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if (select count(*)
             from   RASKB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY
              and   t1.KDTAHAP = t2.KDTAHAP
              and   t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'RASKB" does not exist. Cannot modify child in "RASKDETB".'
               goto error
            end
      end
      /*  Parent "STDHARGA" must exist when updating a child in "RASKDETB"  */
--      if update(IDSTDHARGA)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDSTDHARGA is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   STDHARGA t1, inserted t2
--                where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'STDHARGA" does not exist. Cannot modify child in "RASKDETB".'
--               goto error
--            end
--      end

      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[RASKDETB] ENABLE TRIGGER [TU_RASKDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_RASKDETD] on [dbo].[RASKDETD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "RASKD" must exist when inserting a child in "RASKDETD"  */
    if update(MTGKEY) or
       update(KDTAHAP) or
       update(UNITKEY)
    begin
       if (select count(*)
           from   RASKD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY
            and   t1.KDTAHAP = t2.KDTAHAP
            and   t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "RASKD". Cannot create child in "RASKDETD".'
             goto error
          end
    end
    /*  Parent "STDHARGA" must exist when inserting a child in "RASKDETD"  */
--    if update(IDSTDHARGA)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDSTDHARGA is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   STDHARGA t1, inserted t2
--              where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "STDHARGA". Cannot create child in "RASKDETD".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[RASKDETD] ENABLE TRIGGER [TI_RASKDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TU_RASKDETD] on [dbo].[RASKDETD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "RASKD" must exist when updating a child in "RASKDETD"  */
      if update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if (select count(*)
             from   RASKD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY
              and   t1.KDTAHAP = t2.KDTAHAP
              and   t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'RASKD" does not exist. Cannot modify child in "RASKDETD".'
               goto error
            end
      end
      /*  Parent "STDHARGA" must exist when updating a child in "RASKDETD"  */
--      if update(IDSTDHARGA)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDSTDHARGA is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   STDHARGA t1, inserted t2
--                where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'STDHARGA" does not exist. Cannot modify child in "RASKDETD".'
--               goto error
--            end
--      end

      return

/*  Errors handling  */
error:
   raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[RASKDETD] ENABLE TRIGGER [TU_RASKDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RASKDETR] on [dbo].[RASKDETR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "RASKR" must exist when inserting a child in "RASKDETR"  */
    if update(KDKEGUNIT) or
       update(MTGKEY) or
       update(KDTAHAP) or
       update(UNITKEY)
    begin
       if (select count(*)
           from   RASKR t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT
            and   t1.MTGKEY = t2.MTGKEY
            and   t1.KDTAHAP = t2.KDTAHAP
            and   t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "RASKR". Cannot create child in "RASKDETR".'
             goto error
          end
    end
    /*  Parent "STDHARGA" must exist when inserting a child in "RASKDETR"  */
--    if update(IDSTDHARGA)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDSTDHARGA is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   STDHARGA t1, inserted t2
--              where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "STDHARGA". Cannot create child in "RASKDETR".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKDETR] ENABLE TRIGGER [TI_RASKDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RASKDETR] on [dbo].[RASKDETR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "RASKR" must exist when updating a child in "RASKDETR"  */
      if update(KDKEGUNIT) or
         update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if (select count(*)
             from   RASKR t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT
              and   t1.MTGKEY = t2.MTGKEY
              and   t1.KDTAHAP = t2.KDTAHAP
              and   t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'RASKR" does not exist. Cannot modify child in "RASKDETR".'
               goto error
            end
      end
      /*  Parent "STDHARGA" must exist when updating a child in "RASKDETR"  */
--      if update(IDSTDHARGA)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDSTDHARGA is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   STDHARGA t1, inserted t2
--                where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'STDHARGA" does not exist. Cannot modify child in "RASKDETR".'
--               goto error
--            end
--      end

      return

/*  Errors handling  */
error:
raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKDETR] ENABLE TRIGGER [TU_RASKDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_RASKDETRTL] on [dbo].[RASKDETRTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "RASKRTL" must exist when inserting a child in "RASKDETRTL"  */
    if update(MTGKEY) or
       update(KDTAHAP) or
       update(UNITKEY)
    begin
       if (select count(*)
           from   RASKRTL t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY
            and   t1.KDTAHAP = t2.KDTAHAP
            and   t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "RASKRTL". Cannot create child in "RASKDETRTL".'
             goto error
          end
    end
    /*  Parent "STDHARGA" must exist when inserting a child in "RASKDETRTL"  */
--    if update(IDSTDHARGA)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDSTDHARGA is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   STDHARGA t1, inserted t2
--              where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "STDHARGA". Cannot create child in "RASKDETRTL".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[RASKDETRTL] ENABLE TRIGGER [TI_RASKDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TU_RASKDETRTL] on [dbo].[RASKDETRTL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "RASKRTL" must exist when updating a child in "RASKDETRTL"  */
      if update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if (select count(*)
             from   RASKRTL t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY
              and   t1.KDTAHAP = t2.KDTAHAP
              and   t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'RASKRTL" does not exist. Cannot modify child in "RASKDETRTL".'
               goto error
            end
      end
      /*  Parent "STDHARGA" must exist when updating a child in "RASKDETRTL"  */
--      if update(IDSTDHARGA)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDSTDHARGA is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   STDHARGA t1, inserted t2
--                where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'STDHARGA" does not exist. Cannot modify child in "RASKDETRTL".'
--               goto error
--            end
--      end

      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[RASKDETRTL] ENABLE TRIGGER [TU_RASKDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_RASKR] on [dbo].[RASKR] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "RASKR" if children still exist in "RASKBLNR"  */
    if exists (select 1
               from   RASKBLNR t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT
                and   t2.MTGKEY = t1.MTGKEY
                and   t2.KDTAHAP = t1.KDTAHAP
                and   t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKBLNR". Cannot delete parent "RASKR".'
          goto error
       end

    /*  Cannot delete parent "RASKR" if children still exist in "RASKDETR"  */
    if exists (select 1
               from   RASKDETR t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT
                and   t2.MTGKEY = t1.MTGKEY
                and   t2.KDTAHAP = t1.KDTAHAP
                and   t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKDETR". Cannot delete parent "RASKR".'
          goto error
       end

    /*  Cannot delete parent "RASKR" if children still exist in "SBDANAR"  */
    if exists (select 1
               from   SBDANAR t2, deleted t1
               where  t2.KDKEGUNIT = t1.KDKEGUNIT
                and   t2.MTGKEY = t1.MTGKEY
                and   t2.KDTAHAP = t1.KDTAHAP
                and   t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SBDANAR". Cannot delete parent "RASKR".'
          goto error
       end


    return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKR] ENABLE TRIGGER [TD_RASKR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RASKR] on [dbo].[RASKR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MKEGIATAN" must exist when inserting a child in "RASKR"  */
    if update(KDKEGUNIT)
    begin
       if (select count(*)
           from   MKEGIATAN t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "RASKR".'
             goto error
          end
    end
    /*  Parent "MATANGR" must exist when inserting a child in "RASKR"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "RASKR".'
             goto error
          end
    end
    /*  Parent "TAHAP" must exist when inserting a child in "RASKR"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "RASKR".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "RASKR"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "RASKR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKR] ENABLE TRIGGER [TI_RASKR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RASKR] on [dbo].[RASKR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MKEGIATAN" must exist when updating a child in "RASKR"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "RASKR".'
               goto error
            end
      end
      /*  Parent "MATANGR" must exist when updating a child in "RASKR"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "RASKR".'
               goto error
            end
      end
      /*  Parent "TAHAP" must exist when updating a child in "RASKR"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "RASKR".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "RASKR"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "RASKR".'
               goto error
            end
      end
      /*  Cannot modify parent code in "RASKR" if children still exist in "RASKBLNR"  */
      if update(KDKEGUNIT) or
         update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if exists (select 1
                    from   RASKBLNR t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and   t2.MTGKEY = d1.MTGKEY
                     and   t2.KDTAHAP = d1.KDTAHAP
                     and   t2.UNITKEY = d1.UNITKEY
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT
                      or   i1.MTGKEY != d1.MTGKEY
                      or   i1.KDTAHAP != d1.KDTAHAP
                      or   i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKBLNR". Cannot modify parent code in "RASKR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "RASKR" if children still exist in "RASKDETR"  */
      if update(KDKEGUNIT) or
         update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if exists (select 1
                    from   RASKDETR t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and   t2.MTGKEY = d1.MTGKEY
                     and   t2.KDTAHAP = d1.KDTAHAP
                     and   t2.UNITKEY = d1.UNITKEY
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT
                      or   i1.MTGKEY != d1.MTGKEY
                      or   i1.KDTAHAP != d1.KDTAHAP
                      or   i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKDETR". Cannot modify parent code in "RASKR".'
               goto error
            end
      end

      /*  Cannot modify parent code in "RASKR" if children still exist in "SBDANAR"  */
      if update(KDKEGUNIT) or
         update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if exists (select 1
                    from   SBDANAR t2, inserted i1, deleted d1
                    where  t2.KDKEGUNIT = d1.KDKEGUNIT
                     and   t2.MTGKEY = d1.MTGKEY
                     and   t2.KDTAHAP = d1.KDTAHAP
                     and   t2.UNITKEY = d1.UNITKEY
                     and  (i1.KDKEGUNIT != d1.KDKEGUNIT
                      or   i1.MTGKEY != d1.MTGKEY
                      or   i1.KDTAHAP != d1.KDTAHAP
                      or   i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SBDANAR". Cannot modify parent code in "RASKR".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKR] ENABLE TRIGGER [TU_RASKR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_RASKRTL] on [dbo].[RASKRTL] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "RASKRTL" if children still exist in "RASKBLNRTL"  */
    if exists (select 1
               from   RASKBLNRTL t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY
                and   t2.KDTAHAP = t1.KDTAHAP
                and   t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKBLNRTL". Cannot delete parent "RASKRTL".'
          goto error
       end

    /*  Cannot delete parent "RASKRTL" if children still exist in "RASKDETRTL"  */
    if exists (select 1
               from   RASKDETRTL t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY
                and   t2.KDTAHAP = t1.KDTAHAP
                and   t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKDETRTL". Cannot delete parent "RASKRTL".'
          goto error
       end

    /*  Cannot delete parent "RASKRTL" if children still exist in "SBDANARTL"  */
    if exists (select 1
               from   SBDANARTL t2, deleted t1
               where  t2.MTGKEY = t1.MTGKEY
                and   t2.KDTAHAP = t1.KDTAHAP
                and   t2.UNITKEY = t1.UNITKEY)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SBDANARTL". Cannot delete parent "RASKRTL".'
          goto error
       end


    return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKRTL] ENABLE TRIGGER [TD_RASKRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RASKRTL] on [dbo].[RASKRTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "RASKRTL"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "RASKRTL".'
             goto error
          end
    end
    /*  Parent "TAHAP" must exist when inserting a child in "RASKRTL"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "RASKRTL".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "RASKRTL"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "RASKRTL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKRTL] ENABLE TRIGGER [TI_RASKRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RASKRTL] on [dbo].[RASKRTL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "RASKRTL"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "RASKRTL".'
               goto error
            end
      end
      /*  Parent "TAHAP" must exist when updating a child in "RASKRTL"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "RASKRTL".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "RASKRTL"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "RASKRTL".'
               goto error
            end
      end
      /*  Cannot modify parent code in "RASKRTL" if children still exist in "RASKBLNRTL"  */
      if update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if exists (select 1
                    from   RASKBLNRTL t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and   t2.KDTAHAP = d1.KDTAHAP
                     and   t2.UNITKEY = d1.UNITKEY
                     and  (i1.MTGKEY != d1.MTGKEY
                      or   i1.KDTAHAP != d1.KDTAHAP
                      or   i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKBLNRTL". Cannot modify parent code in "RASKRTL".'
               goto error
            end
      end

      /*  Cannot modify parent code in "RASKRTL" if children still exist in "RASKDETRTL"  */
      if update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if exists (select 1
                    from   RASKDETRTL t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and   t2.KDTAHAP = d1.KDTAHAP
                     and   t2.UNITKEY = d1.UNITKEY
                     and  (i1.MTGKEY != d1.MTGKEY
                      or   i1.KDTAHAP != d1.KDTAHAP
                      or   i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKDETRTL". Cannot modify parent code in "RASKRTL".'
               goto error
            end
      end

      /*  Cannot modify parent code in "RASKRTL" if children still exist in "SBDANARTL"  */
      if update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if exists (select 1
                    from   SBDANARTL t2, inserted i1, deleted d1
                    where  t2.MTGKEY = d1.MTGKEY
                     and   t2.KDTAHAP = d1.KDTAHAP
                     and   t2.UNITKEY = d1.UNITKEY
                     and  (i1.MTGKEY != d1.MTGKEY
                      or   i1.KDTAHAP != d1.KDTAHAP
                      or   i1.UNITKEY != d1.UNITKEY))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SBDANARTL". Cannot modify parent code in "RASKRTL".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
  raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RASKRTL] ENABLE TRIGGER [TU_RASKRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RBMDETB] on [dbo].[RBMDETB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGB" must exist when inserting a child in "RBMDETB"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGB". Cannot create child in "RBMDETB".'
             goto error
          end
    end
    /*  Parent "BKTMEM" must exist when inserting a child in "RBMDETB"  */
    if update(UNITKEY) or
       update(NOBM)
    begin
       if (select count(*)
           from   BKTMEM t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBM = t2.NOBM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKTMEM". Cannot create child in "RBMDETB".'
             goto error
          end
    end
    /*  Parent "PERSACC" must exist when inserting a child in "RBMDETB"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "RBMDETB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RBMDETB] ENABLE TRIGGER [TI_RBMDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RBMDETB] on [dbo].[RBMDETB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGB" must exist when updating a child in "RBMDETB"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGB" does not exist. Cannot modify child in "RBMDETB".'
               goto error
            end
      end
      /*  Parent "BKTMEM" must exist when updating a child in "RBMDETB"  */
      if update(UNITKEY) or
         update(NOBM)
      begin
         if (select count(*)
             from   BKTMEM t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOBM = t2.NOBM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKTMEM" does not exist. Cannot modify child in "RBMDETB".'
               goto error
            end
      end
      /*  Parent "PERSACC" must exist when updating a child in "RBMDETB"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "RBMDETB".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RBMDETB] ENABLE TRIGGER [TU_RBMDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RBMDETD] on [dbo].[RBMDETD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGD" must exist when inserting a child in "RBMDETD"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGD". Cannot create child in "RBMDETD".'
             goto error
          end
    end
    /*  Parent "BKTMEM" must exist when inserting a child in "RBMDETD"  */
    if update(UNITKEY) or
       update(NOBM)
    begin
       if (select count(*)
           from   BKTMEM t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBM = t2.NOBM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKTMEM". Cannot create child in "RBMDETD".'
             goto error
          end
    end
    /*  Parent "PERSACC" must exist when inserting a child in "RBMDETD"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "RBMDETD".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RBMDETD] ENABLE TRIGGER [TI_RBMDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RBMDETD] on [dbo].[RBMDETD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGD" must exist when updating a child in "RBMDETD"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGD" does not exist. Cannot modify child in "RBMDETD".'
               goto error
            end
      end
      /*  Parent "BKTMEM" must exist when updating a child in "RBMDETD"  */
      if update(UNITKEY) or
         update(NOBM)
      begin
         if (select count(*)
             from   BKTMEM t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOBM = t2.NOBM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKTMEM" does not exist. Cannot modify child in "RBMDETD".'
               goto error
            end
      end
      /*  Parent "PERSACC" must exist when updating a child in "RBMDETD"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "RBMDETD".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RBMDETD] ENABLE TRIGGER [TU_RBMDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RBMDETN] on [dbo].[RBMDETN] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGNRC" must exist when inserting a child in "RBMDETN"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGNRC t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGNRC". Cannot create child in "RBMDETN".'
             goto error
          end
    end
    /*  Parent "BKTMEM" must exist when inserting a child in "RBMDETN"  */
    if update(UNITKEY) or
       update(NOBM)
    begin
       if (select count(*)
           from   BKTMEM t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBM = t2.NOBM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKTMEM". Cannot create child in "RBMDETN".'
             goto error
          end
    end
    /*  Parent "PERSACC" must exist when inserting a child in "RBMDETN"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "RBMDETN".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RBMDETN] ENABLE TRIGGER [TI_RBMDETN]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RBMDETN] on [dbo].[RBMDETN] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGNRC" must exist when updating a child in "RBMDETN"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGNRC t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGNRC" does not exist. Cannot modify child in "RBMDETN".'
               goto error
            end
      end
      /*  Parent "BKTMEM" must exist when updating a child in "RBMDETN"  */
      if update(UNITKEY) or
         update(NOBM)
      begin
         if (select count(*)
             from   BKTMEM t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOBM = t2.NOBM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKTMEM" does not exist. Cannot modify child in "RBMDETN".'
               goto error
            end
      end
      /*  Parent "PERSACC" must exist when updating a child in "RBMDETN"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "RBMDETN".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RBMDETN] ENABLE TRIGGER [TU_RBMDETN]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RBMDETR] on [dbo].[RBMDETR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "RBMDETR"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "RBMDETR".'
             goto error
          end
    end
    /*  Parent "MKEGIATAN" must exist when inserting a child in "RBMDETR"  */
   -- if update(KDKEGUNIT) 
   -- begin
   --    if  (
			--select count(*) from   MKEGIATAN t1, inserted t2
			--	where  (t1.KDKEGUNIT = t2.KDKEGUNIT 
			--		and 
			--			t2.mtgkey in (select mtgkey from matangr where left(kdper,1)!='5'   )
							
			--		)
   --       ) != @numrows 
   --       begin
   --          select @errno  = 50002,
   --                 @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "RBMDETR".'
   --          goto error
   --       end
   -- end
    /*  Parent "BKTMEM" must exist when inserting a child in "RBMDETR"  */
    if update(UNITKEY) or
       update(NOBM)
    begin
       if (select count(*)
           from   BKTMEM t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBM = t2.NOBM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKTMEM". Cannot create child in "RBMDETR".'
             goto error
          end
    end
    /*  Parent "PERSACC" must exist when inserting a child in "RBMDETR"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "RBMDETR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RBMDETR] ENABLE TRIGGER [TI_RBMDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RBMDETR] on [dbo].[RBMDETR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "RBMDETR"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "RBMDETR".'
               goto error
            end
      end
      /*  Parent "MKEGIATAN" must exist when updating a child in "RBMDETR"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "RBMDETR".'
               goto error
            end
      end
      /*  Parent "BKTMEM" must exist when updating a child in "RBMDETR"  */
      if update(UNITKEY) or
         update(NOBM)
      begin
         if (select count(*)
             from   BKTMEM t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOBM = t2.NOBM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKTMEM" does not exist. Cannot modify child in "RBMDETR".'
               goto error
            end
      end
      /*  Parent "PERSACC" must exist when updating a child in "RBMDETR"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "RBMDETR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RBMDETR] ENABLE TRIGGER [TU_RBMDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RBMDETRTL] on [dbo].[RBMDETRTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "RBMDETRTL"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "RBMDETRTL".'
             goto error
          end
    end
    /*  Parent "BKTMEM" must exist when inserting a child in "RBMDETRTL"  */
    if update(UNITKEY) or
       update(NOBM)
    begin
       if (select count(*)
           from   BKTMEM t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOBM = t2.NOBM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKTMEM". Cannot create child in "RBMDETRTL".'
             goto error
          end
    end
    /*  Parent "PERSACC" must exist when inserting a child in "RBMDETRTL"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "RBMDETRTL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RBMDETRTL] ENABLE TRIGGER [TI_RBMDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RBMDETRTL] on [dbo].[RBMDETRTL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "RBMDETRTL"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "RBMDETRTL".'
               goto error
            end
      end
      /*  Parent "BKTMEM" must exist when updating a child in "RBMDETRTL"  */
      if update(UNITKEY) or
         update(NOBM)
      begin
         if (select count(*)
             from   BKTMEM t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOBM = t2.NOBM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKTMEM" does not exist. Cannot modify child in "RBMDETRTL".'
               goto error
            end
      end
      /*  Parent "PERSACC" must exist when updating a child in "RBMDETRTL"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "RBMDETRTL".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RBMDETRTL] ENABLE TRIGGER [TU_RBMDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[TU_REAL_BLUD] ON [dbo].[REAL_BLUD] FOR UPDATE AS
BEGIN
	DECLARE @NUMROWS INT, @ERRNO INT, @ERRMSG VARCHAR(255)
    SELECT @NUMROWS = @@ROWCOUNT
    IF @NUMROWS = 0
       RETURN 

	IF  UPDATE(TGLVALID)
	BEGIN
		DECLARE  @NOBUKTI VARCHAR(50), @TGLVALID DATETIME
		DECLARE CJURNAL CURSOR FOR SELECT I.NOBUKTI, I.TGLVALID FROM INSERTED I
		OPEN CJURNAL
		FETCH NEXT FROM CJURNAL INTO  @NOBUKTI, @TGLVALID
		
		WHILE @@FETCH_STATUS=0
		BEGIN
			IF @TGLVALID IS NULL
			BEGIN
				DELETE FROM jurnal WHERE  nobukti = @NOBUKTI AND jbku = '99'
			END
			ELSE
			BEGIN
				EXEC WSP_JURNALBLUD @NOBUKTI
				UPDATE JURNAL SET TGL_VALID = @TGLVALID WHERE nobukti = @NOBUKTI AND jbku = '99'				
			END
			FETCH NEXT FROM CJURNAL INTO @NOBUKTI, @TGLVALID
		END
		CLOSE CJURNAL
		DEALLOCATE CJURNAL
	END
	RETURN
END
GO
ALTER TABLE [dbo].[REAL_BLUD] ENABLE TRIGGER [TU_REAL_BLUD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_REKAKAS] on [dbo].[REKAKAS] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGNRC" must exist when inserting a child in "REKAKAS"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGNRC t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGNRC". Cannot create child in "REKAKAS".'
             goto error
          end
    end
    /*  Parent "JAKAS" must exist when inserting a child in "REKAKAS"  */
    if update(KDAKAS)
    begin
       if (select count(*)
           from   JAKAS t1, inserted t2
           where  t1.KDAKAS = t2.KDAKAS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JAKAS". Cannot create child in "REKAKAS".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[REKAKAS] ENABLE TRIGGER [TI_REKAKAS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_REKAKAS] on [dbo].[REKAKAS] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGNRC" must exist when updating a child in "REKAKAS"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGNRC t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGNRC" does not exist. Cannot modify child in "REKAKAS".'
               goto error
            end
      end
      /*  Parent "JAKAS" must exist when updating a child in "REKAKAS"  */
      if update(KDAKAS)
      begin
         if (select count(*)
             from   JAKAS t1, inserted t2
             where  t1.KDAKAS = t2.KDAKAS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JAKAS" does not exist. Cannot modify child in "REKAKAS".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[REKAKAS] ENABLE TRIGGER [TU_REKAKAS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_REKONSET] on [dbo].[REKONSET] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGNRC" must exist when inserting a child in "REKONSET"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGNRC t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGNRC". Cannot create child in "REKONSET".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[REKONSET] ENABLE TRIGGER [TI_REKONSET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_REKONSET] on [dbo].[REKONSET] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGNRC" must exist when updating a child in "REKONSET"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGNRC t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGNRC" does not exist. Cannot modify child in "REKONSET".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[REKONSET] ENABLE TRIGGER [TU_REKONSET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE TRIGGER [dbo].[TD_RKASAH] on [dbo].[RKASAH] for delete as
---JS

        DECLARE @groupawal VARCHAR(10)
		DECLARE @groupubah VARCHAR(10)
		DECLARE @unitkey VARCHAR (10)
		SET @groupawal = '110_'
		SET @groupubah = '100_'
		SET @unitkey = ISNULL((SELECT unitkey FROM deleted),'')

		UPDATE WEBUSER SET GROUPID = @groupubah WHERE GROUPID = @groupawal AND UNITKEY = @unitkey
    
    return
GO
ALTER TABLE [dbo].[RKASAH] ENABLE TRIGGER [TD_RKASAH]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE TRIGGER [dbo].[TI_RKASAH] on [dbo].[RKASAH] for insert as

--JS
        DECLARE @groupawal VARCHAR(10)
		DECLARE @groupubah VARCHAR(10)
		DECLARE @unitkey VARCHAR (10)
		SET @groupawal = '100_'
		SET @groupubah = '110_'
		SET @unitkey = ISNULL((SELECT unitkey FROM inserted),'')

		UPDATE WEBUSER SET GROUPID = @groupubah WHERE GROUPID = @groupawal AND UNITKEY = @unitkey
    
    return
GO
ALTER TABLE [dbo].[RKASAH] ENABLE TRIGGER [TI_RKASAH]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RKMDETB] on [dbo].[RKMDETB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGB" must exist when inserting a child in "RKMDETB"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGB". Cannot create child in "RKMDETB".'
             goto error
          end
    end
    /*  Parent "STS" must exist when inserting a child in "RKMDETB"  */
    if update(UNITKEY) or
       update(NOSTS)
    begin
       if (select count(*)
           from   STS t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSTS = t2.NOSTS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STS". Cannot create child in "RKMDETB".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "RKMDETB"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "RKMDETB".'
             goto error
          end
    end
    /*  Parent "JDANA" must exist when inserting a child in "RKMDETB"  */
    if update(KDDANA)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KDDANA is null)
       if @numnull != @numrows
          if (select count(*)
              from   JDANA t1, inserted t2
              where  t1.KDDANA = t2.KDDANA) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JDANA". Cannot create child in "RKMDETB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RKMDETB] ENABLE TRIGGER [TI_RKMDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RKMDETB] on [dbo].[RKMDETB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGB" must exist when updating a child in "RKMDETB"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGB" does not exist. Cannot modify child in "RKMDETB".'
               goto error
            end
      end
      /*  Parent "STS" must exist when updating a child in "RKMDETB"  */
      if update(UNITKEY) or
         update(NOSTS)
      begin
         if (select count(*)
             from   STS t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSTS = t2.NOSTS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STS" does not exist. Cannot modify child in "RKMDETB".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "RKMDETB"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "RKMDETB".'
               goto error
            end
      end
      /*  Parent "JDANA" must exist when updating a child in "RKMDETB"  */
      if update(KDDANA)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KDDANA is null)
         if @numnull != @numrows
            if (select count(*)
                from   JDANA t1, inserted t2
                where  t1.KDDANA = t2.KDDANA) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JDANA" does not exist. Cannot modify child in "RKMDETB".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RKMDETB] ENABLE TRIGGER [TU_RKMDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TD_RKMDETD] on [dbo].[RKMDETD] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "STS" if children still exist in "BKUD"  */
    if exists (select 1
               from   BKUD t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSTS = t1.NOSTS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUD". Cannot delete parent "STS".'
          goto error
       end

   
    /*  Cannot delete parent "STS" if children still exist in "BKUSTS"  */
    if exists (select 1
               from   BKUSTS t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSTS = t1.NOSTS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUSTS". Cannot delete parent "STS".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[RKMDETD] ENABLE TRIGGER [TD_RKMDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RKMDETD] on [dbo].[RKMDETD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGD" must exist when inserting a child in "RKMDETD"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGD". Cannot create child in "RKMDETD".'
             goto error
          end
    end
    /*  Parent "STS" must exist when inserting a child in "RKMDETD"  */
    if update(UNITKEY) or
       update(NOSTS)
    begin
       if (select count(*)
           from   STS t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSTS = t2.NOSTS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STS". Cannot create child in "RKMDETD".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "RKMDETD"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "RKMDETD".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RKMDETD] ENABLE TRIGGER [TI_RKMDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RKMDETD] on [dbo].[RKMDETD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGD" must exist when updating a child in "RKMDETD"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGD" does not exist. Cannot modify child in "RKMDETD".'
               goto error
            end
      end
      /*  Parent "STS" must exist when updating a child in "RKMDETD"  */
      if update(UNITKEY) or
         update(NOSTS)
      begin
         if (select count(*)
             from   STS t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSTS = t2.NOSTS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STS" does not exist. Cannot modify child in "RKMDETD".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "RKMDETD"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "RKMDETD".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RKMDETD] ENABLE TRIGGER [TU_RKMDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RKMDETR] on [dbo].[RKMDETR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MKEGIATAN" must exist when inserting a child in "RKMDETR"  */
    if update(KDKEGUNIT)
    begin
       if (select count(*)
           from   MKEGIATAN t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "RKMDETR".'
             goto error
          end
    end
    /*  Parent "MATANGR" must exist when inserting a child in "RKMDETR"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "RKMDETR".'
             goto error
          end
    end
    /*  Parent "STS" must exist when inserting a child in "RKMDETR"  */
    if update(UNITKEY) or
       update(NOSTS)
    begin
       if (select count(*)
           from   STS t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSTS = t2.NOSTS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STS". Cannot create child in "RKMDETR".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "RKMDETR"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "RKMDETR".'
             goto error
          end
    end
    /*  Parent "JDANA" must exist when inserting a child in "RKMDETR"  */
    if update(KDDANA)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KDDANA is null)
       if @numnull != @numrows
          if (select count(*)
              from   JDANA t1, inserted t2
              where  t1.KDDANA = t2.KDDANA) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JDANA". Cannot create child in "RKMDETR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RKMDETR] ENABLE TRIGGER [TI_RKMDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RKMDETR] on [dbo].[RKMDETR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MKEGIATAN" must exist when updating a child in "RKMDETR"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "RKMDETR".'
               goto error
            end
      end
      /*  Parent "MATANGR" must exist when updating a child in "RKMDETR"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "RKMDETR".'
               goto error
            end
      end
      /*  Parent "STS" must exist when updating a child in "RKMDETR"  */
      if update(UNITKEY) or
         update(NOSTS)
      begin
         if (select count(*)
             from   STS t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSTS = t2.NOSTS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STS" does not exist. Cannot modify child in "RKMDETR".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "RKMDETR"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "RKMDETR".'
               goto error
            end
      end
      /*  Parent "JDANA" must exist when updating a child in "RKMDETR"  */
      if update(KDDANA)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KDDANA is null)
         if @numnull != @numrows
            if (select count(*)
                from   JDANA t1, inserted t2
                where  t1.KDDANA = t2.KDDANA) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JDANA" does not exist. Cannot modify child in "RKMDETR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RKMDETR] ENABLE TRIGGER [TU_RKMDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RKMDETRTL] on [dbo].[RKMDETRTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "RKMDETRTL"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "RKMDETRTL".'
             goto error
          end
    end
    /*  Parent "STS" must exist when inserting a child in "RKMDETRTL"  */
    if update(UNITKEY) or
       update(NOSTS)
    begin
       if (select count(*)
           from   STS t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSTS = t2.NOSTS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STS". Cannot create child in "RKMDETRTL".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "RKMDETRTL"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "RKMDETRTL".'
             goto error
          end
    end
    /*  Parent "JDANA" must exist when inserting a child in "RKMDETRTL"  */
    if update(KDDANA)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KDDANA is null)
       if @numnull != @numrows
          if (select count(*)
              from   JDANA t1, inserted t2
              where  t1.KDDANA = t2.KDDANA) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JDANA". Cannot create child in "RKMDETRTL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RKMDETRTL] ENABLE TRIGGER [TI_RKMDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RKMDETRTL] on [dbo].[RKMDETRTL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "RKMDETRTL"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "RKMDETRTL".'
               goto error
            end
      end
      /*  Parent "STS" must exist when updating a child in "RKMDETRTL"  */
      if update(UNITKEY) or
         update(NOSTS)
      begin
         if (select count(*)
             from   STS t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSTS = t2.NOSTS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STS" does not exist. Cannot modify child in "RKMDETRTL".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "RKMDETRTL"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "RKMDETRTL".'
               goto error
            end
      end
      /*  Parent "JDANA" must exist when updating a child in "RKMDETRTL"  */
      if update(KDDANA)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KDDANA is null)
         if @numnull != @numrows
            if (select count(*)
                from   JDANA t1, inserted t2
                where  t1.KDDANA = t2.KDDANA) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JDANA" does not exist. Cannot modify child in "RKMDETRTL".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RKMDETRTL] ENABLE TRIGGER [TU_RKMDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_RKMDETT] on [dbo].[RKMDETT] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "BKBKAS" must exist when inserting a child in "RKMDETT"  */
    if update(NOBBANTU)
    begin
       if (select count(*)
           from   BKBKAS t1, inserted t2
           where  t1.NOBBANTU = t2.NOBBANTU) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKBKAS". Cannot create child in "RKMDETT".'
             goto error
          end
    end
    /*  Parent "STS" must exist when inserting a child in "RKMDETT"  */
    if update(UNITKEY) or
       update(NOSTS)
    begin
       if (select count(*)
           from   STS t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSTS = t2.NOSTS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STS". Cannot create child in "RKMDETT".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "RKMDETT"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "RKMDETT".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RKMDETT] ENABLE TRIGGER [TI_RKMDETT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_RKMDETT] on [dbo].[RKMDETT] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "BKBKAS" must exist when updating a child in "RKMDETT"  */
      if update(NOBBANTU)
      begin
         if (select count(*)
             from   BKBKAS t1, inserted t2
             where  t1.NOBBANTU = t2.NOBBANTU) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKBKAS" does not exist. Cannot modify child in "RKMDETT".'
               goto error
            end
      end
      /*  Parent "STS" must exist when updating a child in "RKMDETT"  */
      if update(UNITKEY) or
         update(NOSTS)
      begin
         if (select count(*)
             from   STS t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSTS = t2.NOSTS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STS" does not exist. Cannot modify child in "RKMDETT".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "RKMDETT"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "RKMDETT".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[RKMDETT] ENABLE TRIGGER [TU_RKMDETT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SALDODETB] on [dbo].[SALDODETB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "SALDOLRAB" must exist when inserting a child in "SALDODETB"  */
    if update(MTGKEY) or
       update(UNITKEY) or
       update(KD_BULAN)
    begin
       if (select count(*)
           from   SALDOLRAB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY
            and   t1.UNITKEY = t2.UNITKEY
            and   t1.KD_BULAN = t2.KD_BULAN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SALDOLRAB". Cannot create child in "SALDODETB".'
             goto error
          end
    end
    /*  Parent "STDHARGA" must exist when inserting a child in "SALDODETB"  */
    if update(IDSTDHARGA)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  IDSTDHARGA is null)
       if @numnull != @numrows
          if (select count(*)
              from   STDHARGA t1, inserted t2
              where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STDHARGA". Cannot create child in "SALDODETB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SALDODETB] ENABLE TRIGGER [TI_SALDODETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SALDODETB] on [dbo].[SALDODETB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "SALDOLRAB" must exist when updating a child in "SALDODETB"  */
      if update(MTGKEY) or
         update(UNITKEY) or
         update(KD_BULAN)
      begin
         if (select count(*)
             from   SALDOLRAB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY
              and   t1.UNITKEY = t2.UNITKEY
              and   t1.KD_BULAN = t2.KD_BULAN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SALDOLRAB" does not exist. Cannot modify child in "SALDODETB".'
               goto error
            end
      end
      /*  Parent "STDHARGA" must exist when updating a child in "SALDODETB"  */
      if update(IDSTDHARGA)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  IDSTDHARGA is null)
         if @numnull != @numrows
            if (select count(*)
                from   STDHARGA t1, inserted t2
                where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'STDHARGA" does not exist. Cannot modify child in "SALDODETB".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SALDODETB] ENABLE TRIGGER [TU_SALDODETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SALDODETD] on [dbo].[SALDODETD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "SALDOLRAD" must exist when inserting a child in "SALDODETD"  */
    if update(MTGKEY) or
       update(UNITKEY) or
       update(KD_BULAN)
    begin
       if (select count(*)
           from   SALDOLRAD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY
            and   t1.UNITKEY = t2.UNITKEY
            and   t1.KD_BULAN = t2.KD_BULAN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SALDOLRAD". Cannot create child in "SALDODETD".'
             goto error
          end
    end
    /*  Parent "STDHARGA" must exist when inserting a child in "SALDODETD"  */
    if update(IDSTDHARGA)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  IDSTDHARGA is null)
       if @numnull != @numrows
          if (select count(*)
              from   STDHARGA t1, inserted t2
              where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STDHARGA". Cannot create child in "SALDODETD".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SALDODETD] ENABLE TRIGGER [TI_SALDODETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SALDODETD] on [dbo].[SALDODETD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "SALDOLRAD" must exist when updating a child in "SALDODETD"  */
      if update(MTGKEY) or
         update(UNITKEY) or
         update(KD_BULAN)
      begin
         if (select count(*)
             from   SALDOLRAD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY
              and   t1.UNITKEY = t2.UNITKEY
              and   t1.KD_BULAN = t2.KD_BULAN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SALDOLRAD" does not exist. Cannot modify child in "SALDODETD".'
               goto error
            end
      end
      /*  Parent "STDHARGA" must exist when updating a child in "SALDODETD"  */
      if update(IDSTDHARGA)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  IDSTDHARGA is null)
         if @numnull != @numrows
            if (select count(*)
                from   STDHARGA t1, inserted t2
                where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'STDHARGA" does not exist. Cannot modify child in "SALDODETD".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SALDODETD] ENABLE TRIGGER [TU_SALDODETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SALDODETR] on [dbo].[SALDODETR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "SALDOLRAR" must exist when inserting a child in "SALDODETR"  */
    if update(KDKEGUNIT) or
       update(MTGKEY) or
       update(UNITKEY) or
       update(KD_BULAN)
    begin
       if (select count(*)
           from   SALDOLRAR t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT
            and   t1.MTGKEY = t2.MTGKEY
            and   t1.UNITKEY = t2.UNITKEY
            and   t1.KD_BULAN = t2.KD_BULAN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SALDOLRAR". Cannot create child in "SALDODETR".'
             goto error
          end
    end
    /*  Parent "STDHARGA" must exist when inserting a child in "SALDODETR"  */
    if update(IDSTDHARGA)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  IDSTDHARGA is null)
       if @numnull != @numrows
          if (select count(*)
              from   STDHARGA t1, inserted t2
              where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STDHARGA". Cannot create child in "SALDODETR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SALDODETR] ENABLE TRIGGER [TI_SALDODETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SALDODETR] on [dbo].[SALDODETR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "SALDOLRAR" must exist when updating a child in "SALDODETR"  */
      if update(KDKEGUNIT) or
         update(MTGKEY) or
         update(UNITKEY) or
         update(KD_BULAN)
      begin
         if (select count(*)
             from   SALDOLRAR t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT
              and   t1.MTGKEY = t2.MTGKEY
              and   t1.UNITKEY = t2.UNITKEY
              and   t1.KD_BULAN = t2.KD_BULAN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SALDOLRAR" does not exist. Cannot modify child in "SALDODETR".'
               goto error
            end
      end
      /*  Parent "STDHARGA" must exist when updating a child in "SALDODETR"  */
      if update(IDSTDHARGA)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  IDSTDHARGA is null)
         if @numnull != @numrows
            if (select count(*)
                from   STDHARGA t1, inserted t2
                where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'STDHARGA" does not exist. Cannot modify child in "SALDODETR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SALDODETR] ENABLE TRIGGER [TU_SALDODETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SALDODETRTL] on [dbo].[SALDODETRTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "SALDOLRARTL" must exist when inserting a child in "SALDODETRTL"  */
    if update(MTGKEY) or
       update(UNITKEY) or
       update(KD_BULAN)
    begin
       if (select count(*)
           from   SALDOLRARTL t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY
            and   t1.UNITKEY = t2.UNITKEY
            and   t1.KD_BULAN = t2.KD_BULAN) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SALDOLRARTL". Cannot create child in "SALDODETRTL".'
             goto error
          end
    end
    /*  Parent "STDHARGA" must exist when inserting a child in "SALDODETRTL"  */
    if update(IDSTDHARGA)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  IDSTDHARGA is null)
       if @numnull != @numrows
          if (select count(*)
              from   STDHARGA t1, inserted t2
              where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STDHARGA". Cannot create child in "SALDODETRTL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SALDODETRTL] ENABLE TRIGGER [TI_SALDODETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SALDODETRTL] on [dbo].[SALDODETRTL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "SALDOLRARTL" must exist when updating a child in "SALDODETRTL"  */
      if update(MTGKEY) or
         update(UNITKEY) or
         update(KD_BULAN)
      begin
         if (select count(*)
             from   SALDOLRARTL t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY
              and   t1.UNITKEY = t2.UNITKEY
              and   t1.KD_BULAN = t2.KD_BULAN) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SALDOLRARTL" does not exist. Cannot modify child in "SALDODETRTL".'
               goto error
            end
      end
      /*  Parent "STDHARGA" must exist when updating a child in "SALDODETRTL"  */
      if update(IDSTDHARGA)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  IDSTDHARGA is null)
         if @numnull != @numrows
            if (select count(*)
                from   STDHARGA t1, inserted t2
                where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'STDHARGA" does not exist. Cannot modify child in "SALDODETRTL".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SALDODETRTL] ENABLE TRIGGER [TU_SALDODETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[TD_SANGGAH] on [dbo].[SANGGAH] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "SANGGAH" if children still exist in "PAKETDET"  */
    if exists (select 1
               from   PAKETDET t2, deleted t1
               where  t2.KDSANGGAH = t1.KDSANGGAH)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PAKETDET". Cannot delete parent "SANGGAH".'
          goto error
       end
        
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[SANGGAH] ENABLE TRIGGER [TD_SANGGAH]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SBDANAB] on [dbo].[SBDANAB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "RASKB" must exist when inserting a child in "SBDANAB"  */
    if update(MTGKEY) or
       update(KDTAHAP) or
       update(UNITKEY)
    begin
       if (select count(*)
           from   RASKB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY
            and   t1.KDTAHAP = t2.KDTAHAP
            and   t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "RASKB". Cannot create child in "SBDANAB".'
             goto error
          end
    end
    /*  Parent "JDANA" must exist when inserting a child in "SBDANAB"  */
    if update(KDDANA)
    begin
       if (select count(*)
           from   JDANA t1, inserted t2
           where  t1.KDDANA = t2.KDDANA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JDANA". Cannot create child in "SBDANAB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SBDANAB] ENABLE TRIGGER [TI_SBDANAB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SBDANAB] on [dbo].[SBDANAB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "RASKB" must exist when updating a child in "SBDANAB"  */
      if update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if (select count(*)
             from   RASKB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY
              and   t1.KDTAHAP = t2.KDTAHAP
              and   t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'RASKB" does not exist. Cannot modify child in "SBDANAB".'
               goto error
            end
      end
      /*  Parent "JDANA" must exist when updating a child in "SBDANAB"  */
      if update(KDDANA)
      begin
         if (select count(*)
             from   JDANA t1, inserted t2
             where  t1.KDDANA = t2.KDDANA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JDANA" does not exist. Cannot modify child in "SBDANAB".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SBDANAB] ENABLE TRIGGER [TU_SBDANAB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SBDANAKEG] on [dbo].[SBDANAKEG] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MKEGIATAN" must exist when inserting a child in "SBDANAKEG"  */
    if update(KDKEGUNIT)
    begin
       if (select count(*)
           from   MKEGIATAN t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "SBDANAKEG".'
             goto error
          end
    end
    /*  Parent "JDANA" must exist when inserting a child in "SBDANAKEG"  */
    if update(KDDANA)
    begin
       if (select count(*)
           from   JDANA t1, inserted t2
           where  t1.KDDANA = t2.KDDANA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JDANA". Cannot create child in "SBDANAKEG".'
             goto error
          end
    end
    /*  Parent "TAHAP" must exist when inserting a child in "SBDANAKEG"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "SBDANAKEG".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "SBDANAKEG"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "SBDANAKEG".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SBDANAKEG] ENABLE TRIGGER [TI_SBDANAKEG]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SBDANAKEG] on [dbo].[SBDANAKEG] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MKEGIATAN" must exist when updating a child in "SBDANAKEG"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "SBDANAKEG".'
               goto error
            end
      end
      /*  Parent "JDANA" must exist when updating a child in "SBDANAKEG"  */
      if update(KDDANA)
      begin
         if (select count(*)
             from   JDANA t1, inserted t2
             where  t1.KDDANA = t2.KDDANA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JDANA" does not exist. Cannot modify child in "SBDANAKEG".'
               goto error
            end
      end
      /*  Parent "TAHAP" must exist when updating a child in "SBDANAKEG"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "SBDANAKEG".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "SBDANAKEG"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "SBDANAKEG".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SBDANAKEG] ENABLE TRIGGER [TU_SBDANAKEG]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SBDANAR] on [dbo].[SBDANAR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "RASKR" must exist when inserting a child in "SBDANAR"  */
    if update(KDKEGUNIT) or
       update(MTGKEY) or
       update(KDTAHAP) or
       update(UNITKEY)
    begin
       if (select count(*)
           from   RASKR t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT
            and   t1.MTGKEY = t2.MTGKEY
            and   t1.KDTAHAP = t2.KDTAHAP
            and   t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "RASKR". Cannot create child in "SBDANAR".'
             goto error
          end
    end
    /*  Parent "JDANA" must exist when inserting a child in "SBDANAR"  */
   

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SBDANAR] ENABLE TRIGGER [TI_SBDANAR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SBDANAR] on [dbo].[SBDANAR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "RASKR" must exist when updating a child in "SBDANAR"  */
      if update(KDKEGUNIT) or
         update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if (select count(*)
             from   RASKR t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT
              and   t1.MTGKEY = t2.MTGKEY
              and   t1.KDTAHAP = t2.KDTAHAP
              and   t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'RASKR" does not exist. Cannot modify child in "SBDANAR".'
               goto error
            end
      end
      
      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SBDANAR] ENABLE TRIGGER [TU_SBDANAR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SBDANARTL] on [dbo].[SBDANARTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "RASKRTL" must exist when inserting a child in "SBDANARTL"  */
    if update(MTGKEY) or
       update(KDTAHAP) or
       update(UNITKEY)
    begin
       if (select count(*)
           from   RASKRTL t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY
            and   t1.KDTAHAP = t2.KDTAHAP
            and   t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "RASKRTL". Cannot create child in "SBDANARTL".'
             goto error
          end
    end
    /*  Parent "JDANA" must exist when inserting a child in "SBDANARTL"  */
    if update(KDDANA)
    begin
       if (select count(*)
           from   JDANA t1, inserted t2
           where  t1.KDDANA = t2.KDDANA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JDANA". Cannot create child in "SBDANARTL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SBDANARTL] ENABLE TRIGGER [TI_SBDANARTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SBDANARTL] on [dbo].[SBDANARTL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "RASKRTL" must exist when updating a child in "SBDANARTL"  */
      if update(MTGKEY) or
         update(KDTAHAP) or
         update(UNITKEY)
      begin
         if (select count(*)
             from   RASKRTL t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY
              and   t1.KDTAHAP = t2.KDTAHAP
              and   t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'RASKRTL" does not exist. Cannot modify child in "SBDANARTL".'
               goto error
            end
      end
      /*  Parent "JDANA" must exist when updating a child in "SBDANARTL"  */
      if update(KDDANA)
      begin
         if (select count(*)
             from   JDANA t1, inserted t2
             where  t1.KDDANA = t2.KDDANA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JDANA" does not exist. Cannot modify child in "SBDANARTL".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SBDANARTL] ENABLE TRIGGER [TU_SBDANARTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SETBLAK] on [dbo].[SETBLAK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGBLAK" must exist when inserting a child in "SETBLAK"  */
    if update(MTGKEYLAK)
    begin
       if (select count(*)
           from   MATANGBLAK t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEYLAK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGBLAK". Cannot create child in "SETBLAK".'
             goto error
          end
    end
    /*  Parent "MATANGB" must exist when inserting a child in "SETBLAK"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGB". Cannot create child in "SETBLAK".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SETBLAK] ENABLE TRIGGER [TI_SETBLAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SETBLAK] on [dbo].[SETBLAK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGBLAK" must exist when updating a child in "SETBLAK"  */
      if update(MTGKEYLAK)
      begin
         if (select count(*)
             from   MATANGBLAK t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEYLAK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGBLAK" does not exist. Cannot modify child in "SETBLAK".'
               goto error
            end
      end
      /*  Parent "MATANGB" must exist when updating a child in "SETBLAK"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGB" does not exist. Cannot modify child in "SETBLAK".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SETBLAK] ENABLE TRIGGER [TU_SETBLAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SETBLRA] on [dbo].[SETBLRA] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGBLRA" must exist when inserting a child in "SETBLRA"  */
    if update(MTGKEYLRA)
    begin
       if (select count(*)
           from   MATANGBLRA t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEYLRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGBLRA". Cannot create child in "SETBLRA".'
             goto error
          end
    end
    /*  Parent "MATANGB" must exist when inserting a child in "SETBLRA"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGB". Cannot create child in "SETBLRA".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SETBLRA] ENABLE TRIGGER [TI_SETBLRA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SETBLRA] on [dbo].[SETBLRA] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGBLRA" must exist when updating a child in "SETBLRA"  */
      if update(MTGKEYLRA)
      begin
         if (select count(*)
             from   MATANGBLRA t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEYLRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGBLRA" does not exist. Cannot modify child in "SETBLRA".'
               goto error
            end
      end
      /*  Parent "MATANGB" must exist when updating a child in "SETBLRA"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGB" does not exist. Cannot modify child in "SETBLRA".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SETBLRA] ENABLE TRIGGER [TU_SETBLRA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SETDLAK] on [dbo].[SETDLAK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGDLAK" must exist when inserting a child in "SETDLAK"  */
    if update(MTGKEYLAK)
    begin
       if (select count(*)
           from   MATANGDLAK t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEYLAK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGDLAK". Cannot create child in "SETDLAK".'
             goto error
          end
    end
    /*  Parent "MATANGD" must exist when inserting a child in "SETDLAK"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGD". Cannot create child in "SETDLAK".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SETDLAK] ENABLE TRIGGER [TI_SETDLAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SETDLAK] on [dbo].[SETDLAK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGDLAK" must exist when updating a child in "SETDLAK"  */
      if update(MTGKEYLAK)
      begin
         if (select count(*)
             from   MATANGDLAK t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEYLAK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGDLAK" does not exist. Cannot modify child in "SETDLAK".'
               goto error
            end
      end
      /*  Parent "MATANGD" must exist when updating a child in "SETDLAK"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGD" does not exist. Cannot modify child in "SETDLAK".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SETDLAK] ENABLE TRIGGER [TU_SETDLAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SETDLRA] on [dbo].[SETDLRA] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGDLRA" must exist when inserting a child in "SETDLRA"  */
    if update(MTGKEYLRA)
    begin
       if (select count(*)
           from   MATANGDLRA t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEYLRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGDLRA". Cannot create child in "SETDLRA".'
             goto error
          end
    end
    /*  Parent "MATANGD" must exist when inserting a child in "SETDLRA"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGD". Cannot create child in "SETDLRA".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SETDLRA] ENABLE TRIGGER [TI_SETDLRA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SETDLRA] on [dbo].[SETDLRA] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGDLRA" must exist when updating a child in "SETDLRA"  */
      if update(MTGKEYLRA)
      begin
         if (select count(*)
             from   MATANGDLRA t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEYLRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGDLRA" does not exist. Cannot modify child in "SETDLRA".'
               goto error
            end
      end
      /*  Parent "MATANGD" must exist when updating a child in "SETDLRA"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGD" does not exist. Cannot modify child in "SETDLRA".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SETDLRA] ENABLE TRIGGER [TU_SETDLRA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SETPFK] on [dbo].[SETPFK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "JPAJAK" must exist when inserting a child in "SETPFK"  */
    if update(PJKKEY)
    begin
       if (select count(*)
           from   JPAJAK t1, inserted t2
           where  t1.PJKKEY = t2.PJKKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JPAJAK". Cannot create child in "SETPFK".'
             goto error
          end
    end
    /*  Parent "MATANGB" must exist when inserting a child in "SETPFK"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGB". Cannot create child in "SETPFK".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SETPFK] ENABLE TRIGGER [TI_SETPFK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SETPFK] on [dbo].[SETPFK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "JPAJAK" must exist when updating a child in "SETPFK"  */
      if update(PJKKEY)
      begin
         if (select count(*)
             from   JPAJAK t1, inserted t2
             where  t1.PJKKEY = t2.PJKKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JPAJAK" does not exist. Cannot modify child in "SETPFK".'
               goto error
            end
      end
      /*  Parent "MATANGB" must exist when updating a child in "SETPFK"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGB" does not exist. Cannot modify child in "SETPFK".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SETPFK] ENABLE TRIGGER [TU_SETPFK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SETRLAK] on [dbo].[SETRLAK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGRLAK" must exist when inserting a child in "SETRLAK"  */
    if update(MTGKEYLAK)
    begin
       if (select count(*)
           from   MATANGRLAK t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEYLAK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGRLAK". Cannot create child in "SETRLAK".'
             goto error
          end
    end
    /*  Parent "MATANGR" must exist when inserting a child in "SETRLAK"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "SETRLAK".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SETRLAK] ENABLE TRIGGER [TI_SETRLAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SETRLAK] on [dbo].[SETRLAK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGRLAK" must exist when updating a child in "SETRLAK"  */
      if update(MTGKEYLAK)
      begin
         if (select count(*)
             from   MATANGRLAK t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEYLAK) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGRLAK" does not exist. Cannot modify child in "SETRLAK".'
               goto error
            end
      end
      /*  Parent "MATANGR" must exist when updating a child in "SETRLAK"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "SETRLAK".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SETRLAK] ENABLE TRIGGER [TU_SETRLAK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SETRLRA] on [dbo].[SETRLRA] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGRLRA" must exist when inserting a child in "SETRLRA"  */
    if update(MTGKEYLRA)
    begin
       if (select count(*)
           from   MATANGRLRA t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEYLRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGRLRA". Cannot create child in "SETRLRA".'
             goto error
          end
    end
    /*  Parent "MATANGR" must exist when inserting a child in "SETRLRA"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "SETRLRA".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SETRLRA] ENABLE TRIGGER [TI_SETRLRA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SETRLRA] on [dbo].[SETRLRA] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGRLRA" must exist when updating a child in "SETRLRA"  */
      if update(MTGKEYLRA)
      begin
         if (select count(*)
             from   MATANGRLRA t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEYLRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGRLRA" does not exist. Cannot modify child in "SETRLRA".'
               goto error
            end
      end
      /*  Parent "MATANGR" must exist when updating a child in "SETRLRA"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "SETRLRA".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SETRLRA] ENABLE TRIGGER [TU_SETRLRA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_SIFATKEG] on [dbo].[SIFATKEG] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "SIFATKEG" if children still exist in "KEGUNIT"  */
    if exists (select 1
               from   KEGUNIT t2, deleted t1
               where  t2.KDSIFAT = t1.KDSIFAT)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KEGUNIT". Cannot delete parent "SIFATKEG".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SIFATKEG] ENABLE TRIGGER [TD_SIFATKEG]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SIFATKEG] on [dbo].[SIFATKEG] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "SIFATKEG" if children still exist in "KEGUNIT"  */
      if update(KDSIFAT)
      begin
         if exists (select 1
                    from   KEGUNIT t2, inserted i1, deleted d1
                    where  t2.KDSIFAT = d1.KDSIFAT
                     and  (i1.KDSIFAT != d1.KDSIFAT))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "KEGUNIT". Cannot modify parent code in "SIFATKEG".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SIFATKEG] ENABLE TRIGGER [TU_SIFATKEG]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_SKDASK] on [dbo].[SKDASK] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "SKDASK" if children still exist in "DASKR"  */
    if exists (select 1
               from   DASKR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.IDXDASK = t1.IDXDASK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKR". Cannot delete parent "SKDASK".'
          goto error
       end

    /*  Cannot delete parent "SKDASK" if children still exist in "DASKD"  */
    if exists (select 1
               from   DASKD t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.IDXDASK = t1.IDXDASK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKD". Cannot delete parent "SKDASK".'
          goto error
       end

    /*  Cannot delete parent "SKDASK" if children still exist in "DASKB"  */
    if exists (select 1
               from   DASKB t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.IDXDASK = t1.IDXDASK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKB". Cannot delete parent "SKDASK".'
          goto error
       end

    /*  Cannot delete parent "SKDASK" if children still exist in "DASKRTL"  */
    if exists (select 1
               from   DASKRTL t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.IDXDASK = t1.IDXDASK)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKRTL". Cannot delete parent "SKDASK".'
          goto error
       end

    /*  Cannot delete parent "SKDASK" if children still exist in "SKO"  */
    --if exists (select 1
    --           from   SKO t2, deleted t1
    --           where  t2.UNITKEY = t1.UNITKEY
    --            and   t2.IDXDASK = t1.IDXDASK)
    --   begin
    --      select @errno  = 50006,
    --             @errmsg = 'Children still exist in "SKO". Cannot delete parent "SKDASK".'
    --      goto error
    --   end

    /*  Cannot delete parent "SKDASK" if children still exist in "DASKL"  */
    --if exists (select 1
    --           from   DASKL t2, deleted t1
    --           where  t2.UNITKEY = t1.UNITKEY
    --            and   t2.IDXDASK = t1.IDXDASK)
    --   begin
    --      select @errno  = 50006,
    --             @errmsg = 'Children still exist in "DASKL". Cannot delete parent "SKDASK".'
    --      goto error
    --   end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SKDASK] ENABLE TRIGGER [TD_SKDASK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_SKDASK] on [dbo].[SKDASK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "SKDASK"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "SKDASK".'
             goto error
          end
    end
    /*  Parent "TAHAP" must exist when inserting a child in "SKDASK"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "SKDASK".'
             goto error
          end
    end
    /*  Parent "ZKODE" must exist when inserting a child in "SKDASK"  */
    if update(IDXKODE)
    begin
       if (select count(*)
           from   ZKODE t1, inserted t2
           where  t1.IDXKODE = t2.IDXKODE) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "ZKODE". Cannot create child in "SKDASK".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "SKDASK"  */
--    if update(IDXTTD1)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD1 is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD1) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "SKDASK".'
--             goto error
--          end
--    end
    /*  Parent "JABTTD" must exist when inserting a child in "SKDASK"  */
--    if update(IDXTTD2)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD2 is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD2) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "SKDASK".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[SKDASK] ENABLE TRIGGER [TI_SKDASK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TU_SKDASK] on [dbo].[SKDASK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "SKDASK"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "SKDASK".'
               goto error
            end
      end
      /*  Parent "TAHAP" must exist when updating a child in "SKDASK"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "SKDASK".'
               goto error
            end
      end
      /*  Parent "ZKODE" must exist when updating a child in "SKDASK"  */
      if update(IDXKODE)
      begin
         if (select count(*)
             from   ZKODE t1, inserted t2
             where  t1.IDXKODE = t2.IDXKODE) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ZKODE" does not exist. Cannot modify child in "SKDASK".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "SKDASK"  */
--      if update(IDXTTD1)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDXTTD1 is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   JABTTD t1, inserted t2
--                where  t1.IDXTTD = t2.IDXTTD1) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "SKDASK".'
--               goto error
--            end
--      end
      /*  Parent "JABTTD" must exist when updating a child in "SKDASK"  */
--      if update(IDXTTD2)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDXTTD2 is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   JABTTD t1, inserted t2
--                where  t1.IDXTTD = t2.IDXTTD2) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "SKDASK".'
--               goto error
--            end
--      end
      /*  Cannot modify parent code in "SKDASK" if children still exist in "DASKR"  */
      if update(UNITKEY) or
         update(IDXDASK)
      begin
         if exists (select 1
                    from   DASKR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.IDXDASK = d1.IDXDASK
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.IDXDASK != d1.IDXDASK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKR". Cannot modify parent code in "SKDASK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SKDASK" if children still exist in "DASKD"  */
      if update(UNITKEY) or
         update(IDXDASK)
      begin
         if exists (select 1
                    from   DASKD t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.IDXDASK = d1.IDXDASK
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.IDXDASK != d1.IDXDASK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKD". Cannot modify parent code in "SKDASK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SKDASK" if children still exist in "DASKB"  */
      if update(UNITKEY) or
         update(IDXDASK)
      begin
         if exists (select 1
                    from   DASKB t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.IDXDASK = d1.IDXDASK
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.IDXDASK != d1.IDXDASK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKB". Cannot modify parent code in "SKDASK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SKDASK" if children still exist in "DASKRTL"  */
      if update(UNITKEY) or
         update(IDXDASK)
      begin
         if exists (select 1
                    from   DASKRTL t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.IDXDASK = d1.IDXDASK
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.IDXDASK != d1.IDXDASK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKRTL". Cannot modify parent code in "SKDASK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SKDASK" if children still exist in "SKO"  */
      if update(UNITKEY) or
         update(IDXDASK)
      begin
         if exists (select 1
                    from   SKO t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.IDXDASK = d1.IDXDASK
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.IDXDASK != d1.IDXDASK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKO". Cannot modify parent code in "SKDASK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SKDASK" if children still exist in "DASKL"  */
      if update(UNITKEY) or
         update(IDXDASK)
      begin
         if exists (select 1
                    from   DASKL t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.IDXDASK = d1.IDXDASK
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.IDXDASK != d1.IDXDASK))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKL". Cannot modify parent code in "SKDASK".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[SKDASK] ENABLE TRIGGER [TU_SKDASK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_SKO] on [dbo].[SKO] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "SKO" if children still exist in "SKORDET"  */
    if exists (select 1
               from   SKORDET t2, deleted t1
               where  t2.IDXSKO = t1.IDXSKO)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKORDET". Cannot delete parent "SKO".'
          goto error
       end

    /*  Cannot delete parent "SKO" if children still exist in "SKORTLDET"  */
    if exists (select 1
               from   SKORTLDET t2, deleted t1
               where  t2.IDXSKO = t1.IDXSKO)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKORTLDET". Cannot delete parent "SKO".'
          goto error
       end

    /*  Cannot delete parent "SKO" if children still exist in "SKOBDET"  */
    if exists (select 1
               from   SKOBDET t2, deleted t1
               where  t2.IDXSKO = t1.IDXSKO)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKOBDET". Cannot delete parent "SKO".'
          goto error
       end

    /*  Cannot delete parent "SKO" if children still exist in "SKODDET"  */
    if exists (select 1
               from   SKODDET t2, deleted t1
               where  t2.IDXSKO = t1.IDXSKO)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKODDET". Cannot delete parent "SKO".'
          goto error
       end

    /*  Cannot delete parent "SKO" if children still exist in "SPP"  */
    if exists (select 1
               from   SPP t2, deleted t1
               where  t2.IDXSKO = t1.IDXSKO)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPP". Cannot delete parent "SKO".'
          goto error
       end

    /*  Cannot delete parent "SKO" if children still exist in "ANTARBYR"  */
    if exists (select 1
               from   ANTARBYR t2, deleted t1
               where  t2.IDXSKO = t1.IDXSKO)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "ANTARBYR". Cannot delete parent "SKO".'
          goto error
       end

    /*  Cannot delete parent "SKO" if children still exist in "SP2D"  */
    if exists (select 1
               from   SP2D t2, deleted t1
               where  t2.IDXSKO = t1.IDXSKO)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2D". Cannot delete parent "SKO".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SKO] ENABLE TRIGGER [TD_SKO]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_SKO] on [dbo].[SKO] for insert as
begin
    declare @numrows  int, @numnull  int, @errno int, @errmsg   varchar(255)
    select  @numrows = @@rowcount
    if @numrows = 0
       return
    if update(IDXKODE)
    begin
       if (select count(*)
           from   ZKODE t1, inserted t2
           where  t1.IDXKODE = t2.IDXKODE) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "ZKODE". Cannot create child in "SKO".'
             goto error
          end
    end
    if ((update(UNITKEY) or
       update(IDXDASK))and (select top 1 IDXDASK from inserted) <> '')
    begin
       if (select count(*)
           from   SKDASK t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.IDXDASK = t2.IDXDASK) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SKDASK". Cannot create child in "SKO".'
             goto error
          end
    end
    if update(KDDSR)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KDDSR is null)
       if @numnull != @numrows
          if (select count(*)
              from   JDSRSKO t1, inserted t2
              where  t1.KDDSR = t2.KDDSR) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JDSRSKO". Cannot create child in "SKO".'
             goto error
          end
    end
    if update(IDXTTD)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  IDXTTD is null)
       if @numnull != @numrows
          if (select count(*)
              from   JABTTD t1, inserted t2
              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "SKO".'
             goto error
          end
    end
    if update(KD_BULAN2)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KD_BULAN2 is null)
       if @numnull != @numrows
          if (select count(*)
              from   BULAN t1, inserted t2
              where  t1.KD_BULAN = t2.KD_BULAN2) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BULAN". Cannot create child in "SKO".'
             goto error
          end
    end
    if update(KD_BULAN1)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KD_BULAN1 is null)
       if @numnull != @numrows
          if (select count(*)
              from   BULAN t1, inserted t2
              where  t1.KD_BULAN = t2.KD_BULAN1) != @numrows - @numnull
          begin
             select @errno  = 50002, @errmsg = 'Parent does not exist in "BULAN". Cannot create child in "SKO".'
             goto error
          end
    end    
    if update(KEYBEND)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND is null)
       if @numnull != @numrows
          if (select count(*) from   BEND t1, inserted t2 where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
          begin
             select @errno  = 50002, @errmsg = 'Parent does not exist in "BEND". Cannot create child in "SKO".'
             goto error
          end
    end
    return
error: 
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SKO] ENABLE TRIGGER [TI_SKO]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE trigger [dbo].[TU_SKO] on [dbo].[SKO] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "ZKODE" must exist when updating a child in "SKO"  */
    if update(IDXKODE)
      begin
         if (select count(*)
             from   ZKODE t1, inserted t2
             where  t1.IDXKODE = t2.IDXKODE) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ZKODE" does not exist. Cannot modify child in "SKO".'
               goto error
            end
      end
      /*  Parent "SKDASK" must exist when updating a child in "SKO"  */
    --if ((update(UNITKEY) or
    --   update(IDXDASK))and (select top 1 IDXDASK from inserted) <> '')
    --  begin
    --     if (select count(*)
    --         from   SKDASK t1, inserted t2
    --         where  t1.UNITKEY = t2.UNITKEY
    --          and   t1.IDXDASK = t2.IDXDASK  and t2.IDXDASK is not null) != @numrows
    --        begin
    --           select @errno  = 50003,
    --                  @errmsg = 'SKDASK" does not exist. Cannot modify child in "SKO".'
    --           goto error
    --        end
    --  end
      /*  Parent "JDSRSKO" must exist when updating a child in "SKO"  */
      if update(KDDSR)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KDDSR is null)
         if @numnull != @numrows
            if (select count(*)
                from   JDSRSKO t1, inserted t2
                where  t1.KDDSR = t2.KDDSR) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JDSRSKO" does not exist. Cannot modify child in "SKO".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "SKO"  */
      if update(IDXTTD)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  IDXTTD is null)
         if @numnull != @numrows
            if (select count(*)
                from   JABTTD t1, inserted t2
                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "SKO".'
               goto error
            end
      end
      /*  Parent "BULAN" must exist when updating a child in "SKO"  */
      if update(KD_BULAN2)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KD_BULAN2 is null)
         if @numnull != @numrows
            if (select count(*)
                from   BULAN t1, inserted t2
                where  t1.KD_BULAN = t2.KD_BULAN2) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BULAN" does not exist. Cannot modify child in "SKO".'
               goto error
            end
      end
      /*  Parent "BULAN" must exist when updating a child in "SKO"  */
      if update(KD_BULAN1)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KD_BULAN1 is null)
         if @numnull != @numrows
            if (select count(*)
                from   BULAN t1, inserted t2
                where  t1.KD_BULAN = t2.KD_BULAN1) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BULAN" does not exist. Cannot modify child in "SKO".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "SKO"  */
      if update(KEYBEND)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "SKO".'
               goto error
            end
      end
      /*  Cannot modify parent code in "SKO" if children still exist in "SKORDET"  */
      if update(IDXSKO)
      begin
         if exists (select 1
                    from   SKORDET t2, inserted i1, deleted d1
                    where  t2.IDXSKO = d1.IDXSKO
                     and  (i1.IDXSKO != d1.IDXSKO))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKORDET". Cannot modify parent code in "SKO".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SKO" if children still exist in "SKORTLDET"  */
      if update(IDXSKO)
      begin
         if exists (select 1
                    from   SKORTLDET t2, inserted i1, deleted d1
                    where  t2.IDXSKO = d1.IDXSKO
                     and  (i1.IDXSKO != d1.IDXSKO))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKORTLDET". Cannot modify parent code in "SKO".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SKO" if children still exist in "SKOBDET"  */
      if update(IDXSKO)
      begin
         if exists (select 1
                    from   SKOBDET t2, inserted i1, deleted d1
                    where  t2.IDXSKO = d1.IDXSKO
                     and  (i1.IDXSKO != d1.IDXSKO))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKOBDET". Cannot modify parent code in "SKO".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SKO" if children still exist in "SKODDET"  */
      if update(IDXSKO)
      begin
         if exists (select 1
                    from   SKODDET t2, inserted i1, deleted d1
                    where  t2.IDXSKO = d1.IDXSKO
                     and  (i1.IDXSKO != d1.IDXSKO))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKODDET". Cannot modify parent code in "SKO".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SKO" if children still exist in "SPP"  */
      if update(IDXSKO)
      begin
         if exists (select 1
                    from   SPP t2, inserted i1, deleted d1
                    where  t2.IDXSKO = d1.IDXSKO
                     and  (i1.IDXSKO != d1.IDXSKO))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPP". Cannot modify parent code in "SKO".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SKO" if children still exist in "ANTARBYR"  */
      if update(IDXSKO)
      begin
         if exists (select 1
                    from   ANTARBYR t2, inserted i1, deleted d1
                    where  t2.IDXSKO = d1.IDXSKO
                     and  (i1.IDXSKO != d1.IDXSKO))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "ANTARBYR". Cannot modify parent code in "SKO".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SKO" if children still exist in "SP2D"  */
      if update(IDXSKO)
      begin
         if exists (select 1
                    from   SP2D t2, inserted i1, deleted d1
                    where  t2.IDXSKO = d1.IDXSKO
                     and  (i1.IDXSKO != d1.IDXSKO))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2D". Cannot modify parent code in "SKO".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end



GO
ALTER TABLE [dbo].[SKO] ENABLE TRIGGER [TU_SKO]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SKOBDET] on [dbo].[SKOBDET] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGB" must exist when inserting a child in "SKOBDET"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGB". Cannot create child in "SKOBDET".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "SKOBDET"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "SKOBDET".'
             goto error
          end
    end
    /*  Parent "SKO" must exist when inserting a child in "SKOBDET"  */
    if update(IDXSKO)
    begin
       if (select count(*)
           from   SKO t1, inserted t2
           where  t1.IDXSKO = t2.IDXSKO) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SKO". Cannot create child in "SKOBDET".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SKOBDET] ENABLE TRIGGER [TI_SKOBDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SKOBDET] on [dbo].[SKOBDET] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGB" must exist when updating a child in "SKOBDET"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGB" does not exist. Cannot modify child in "SKOBDET".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "SKOBDET"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "SKOBDET".'
               goto error
            end
      end
      /*  Parent "SKO" must exist when updating a child in "SKOBDET"  */
      if update(IDXSKO)
      begin
         if (select count(*)
             from   SKO t1, inserted t2
             where  t1.IDXSKO = t2.IDXSKO) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SKO" does not exist. Cannot modify child in "SKOBDET".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SKOBDET] ENABLE TRIGGER [TU_SKOBDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SKODDET] on [dbo].[SKODDET] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGD" must exist when inserting a child in "SKODDET"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGD". Cannot create child in "SKODDET".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "SKODDET"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "SKODDET".'
             goto error
          end
    end
    /*  Parent "SKO" must exist when inserting a child in "SKODDET"  */
    if update(IDXSKO)
    begin
       if (select count(*)
           from   SKO t1, inserted t2
           where  t1.IDXSKO = t2.IDXSKO) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SKO". Cannot create child in "SKODDET".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SKODDET] ENABLE TRIGGER [TI_SKODDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SKODDET] on [dbo].[SKODDET] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGD" must exist when updating a child in "SKODDET"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGD" does not exist. Cannot modify child in "SKODDET".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "SKODDET"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "SKODDET".'
               goto error
            end
      end
      /*  Parent "SKO" must exist when updating a child in "SKODDET"  */
      if update(IDXSKO)
      begin
         if (select count(*)
             from   SKO t1, inserted t2
             where  t1.IDXSKO = t2.IDXSKO) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SKO" does not exist. Cannot modify child in "SKODDET".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SKODDET] ENABLE TRIGGER [TU_SKODDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SKORDET] on [dbo].[SKORDET] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MKEGIATAN" must exist when inserting a child in "SKORDET"  */
    if update(KDKEGUNIT)
    begin
       if (select count(*)
           from   MKEGIATAN t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "SKORDET".'
             goto error
          end
    end
    /*  Parent "MATANGR" must exist when inserting a child in "SKORDET"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "SKORDET".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "SKORDET"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "SKORDET".'
             goto error
          end
    end
    /*  Parent "SKO" must exist when inserting a child in "SKORDET"  */
    if update(IDXSKO)
    begin
       if (select count(*)
           from   SKO t1, inserted t2
           where  t1.IDXSKO = t2.IDXSKO) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SKO". Cannot create child in "SKORDET".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SKORDET] ENABLE TRIGGER [TI_SKORDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SKORDET] on [dbo].[SKORDET] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MKEGIATAN" must exist when updating a child in "SKORDET"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "SKORDET".'
               goto error
            end
      end
      /*  Parent "MATANGR" must exist when updating a child in "SKORDET"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "SKORDET".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "SKORDET"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "SKORDET".'
               goto error
            end
      end
      /*  Parent "SKO" must exist when updating a child in "SKORDET"  */
      if update(IDXSKO)
      begin
         if (select count(*)
             from   SKO t1, inserted t2
             where  t1.IDXSKO = t2.IDXSKO) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SKO" does not exist. Cannot modify child in "SKORDET".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SKORDET] ENABLE TRIGGER [TU_SKORDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SKORTLDET] on [dbo].[SKORTLDET] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "SKORTLDET"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "SKORTLDET".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "SKORTLDET"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "SKORTLDET".'
             goto error
          end
    end
    /*  Parent "SKO" must exist when inserting a child in "SKORTLDET"  */
    if update(IDXSKO)
    begin
       if (select count(*)
           from   SKO t1, inserted t2
           where  t1.IDXSKO = t2.IDXSKO) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SKO". Cannot create child in "SKORTLDET".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SKORTLDET] ENABLE TRIGGER [TI_SKORTLDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SKORTLDET] on [dbo].[SKORTLDET] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "SKORTLDET"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "SKORTLDET".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "SKORTLDET"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "SKORTLDET".'
               goto error
            end
      end
      /*  Parent "SKO" must exist when updating a child in "SKORTLDET"  */
      if update(IDXSKO)
      begin
         if (select count(*)
             from   SKO t1, inserted t2
             where  t1.IDXSKO = t2.IDXSKO) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SKO" does not exist. Cannot modify child in "SKORTLDET".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SKORTLDET] ENABLE TRIGGER [TU_SKORTLDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TD_SKP] on [dbo].[SKP] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
        if @numrows = 0
       RETURN
       
	    /*  Cannot delete parent "SKP" if children still exist in "SKPDET"  */
    if exists (select 1
               from   SKPDET t2, deleted t1
               where  t2.NOSKP = t1.NOSKP AND t2.UNITKEY = t1.UNITKEY )
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKPDET". Cannot delete parent "SKP".'
          goto error
       end       
    
    DECLARE @NOBKU VARCHAR(100), @UNITKEY VARCHAR(10), @KDSTATUS VARCHAR(10)
    BEGIN 
		declare cjurnal cursor for
			SELECT I.NOSKP, I.UNITKEY,T.KDSTATUS FROM DELETED I INNER JOIN SKP T ON I.UNITKEY=I.UNITKEY AND I.NOSKP=T.NOSKP
		open cjurnal
		fetch next from cjurnal into @NOBKU, @UNITKEY,@KDSTATUS
		while @@FETCH_STATUS = 0
		begin	
			DELETE FROM jurnal WHERE nobkuskpd = @NOBKU AND unitkey = @UNITKEY AND kdstatus =@KDSTATUS --UPDATE BY RE MAR 2014
			fetch next from cjurnal into @NOBKU, @UNITKEY,@KDSTATUS
		end
		close cjurnal
		deallocate cjurnal
	END


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SKP] ENABLE TRIGGER [TD_SKP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TI_SKP] on [dbo].[SKP] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

 DECLARE @NOSKP VARCHAR(100), @UNITKEY VARCHAR(20), @KDSTATUS VARCHAR(2), @IDXKODE INT, @tglskp DATETIME
       
			declare cjurnal cursor for
				SELECT I.UNITKEY,I.NOSKP,I.KDSTATUS,I.IDXKODE,I.tglskp from INSERTED I INNER JOIN SKP T ON T.UNITKEY = I.UNITKEY AND T.NOSKP = I.NOSKP WHERE T.KDSTATUS='76'
			open cjurnal
			fetch next from cjurnal into @UNITKEY, @NOSKP, @KDSTATUS,@IDXKODE,@tglskp
			while @@FETCH_STATUS=0
			begin	
				
				UPDATE SKP SET tglskp=DATEADD(YEAR, -1, @tglskp) FROM SKP WHERE UNITKEY=@UNITKEY AND NOSKP=@NOSKP AND KDSTATUS='76' AND YEAR(tglskp)=(SELECT CAST(CONFIGVAL AS INT) FROM PEMDA  WHERE CONFIGID='cur_thang ')
				
				
				
				fetch next from cjurnal into  @UNITKEY, @NOSKP, @KDSTATUS,@IDXKODE,@tglskp
			end
			close cjurnal
			deallocate cjurnal
	


    return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SKP] ENABLE TRIGGER [TI_SKP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*

PIC RE 04 JUNI 2014   

*/




create trigger [dbo].[TU_SKP] on [dbo].[SKP] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "SKP"  */----UPDATE 01 JUNI 2014
    if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "SKP".'
               goto error
            end
      END
      
      
      
      
      /*  Parent "ZKODE" must exist when updating a child in "SKP"  */
    if update(IDXKODE)
      begin
         if (select count(*)
             from   ZKODE t1, inserted t2
             where  t1.IDXKODE = t2.IDXKODE) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ZKODE" does not exist. Cannot modify child in "SKP".'
               goto error
            end
      END

      /*  Parent "BEND" must exist when updating a child in "SKP"  */
      if update(KEYBEND)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "SKP".'
               goto error
            end
      end      
 
      /*  Cannot modify parent code in "SKP" if children still exist in "SKPDET"  */
      if update(UNITKEY) or
         update(NOSKP)
      begin
         if exists (select 1
                    from   SKPDET t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSKP = d1.NOSKP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSKP != d1.NOSKP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKPDET". Cannot modify parent code in "SKP".'
               goto error
            end
      end    
      
            /*  Cannot modify parent code in "SKP" if children still exist in "SKPTBP"  */
      if update(UNITKEY) or
         update(NOSKP)
      begin
         if exists (select 1
                    from   SKPTBP t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSKP = d1.NOSKP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSKP != d1.NOSKP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKPTBP". Cannot modify parent code in "SKP".'
               goto error
            end
      end 
      
      

      DECLARE @NOBKU VARCHAR(100), @TABLENAME VARCHAR(20), @UNITKEY VARCHAR(10), @KDSTATUS VARCHAR(2), @IDXKODE INT, @TGLVALID DATETIME
      if update(TGLVALID)    
		BEGIN 
			declare cjurnal cursor for
				SELECT I.NOSKP, 'SKP' TABLENAME, I.UNITKEY, I.KDSTATUS, I.IDXKODE, I.TGLVALID from INSERTED I INNER JOIN SKP T ON T.UNITKEY = I.UNITKEY AND T.NOSKP = I.NOSKP 
			open cjurnal
			fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE, @TGLVALID
			while @@FETCH_STATUS=0
			begin	
				IF @TGLVALID IS NOT NULL
				BEGIN
					DELETE FROM jurnal WHERE unitkey = @UNITKEY AND NOBUKTI = @NOBKU AND kdstatus  = @KDSTATUS--UPDATE BY RE JAN 2014

					exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
					UPDATE jurnal SET tgl_valid = @TGLVALID  WHERE unitkey = @UNITKEY AND NOBUKTI = @NOBKU AND kdstatus  = @KDSTATUS--UPDATE BY RE JAN 2014
				END
				ELSE
				BEGIN
					--DEL
					DELETE FROM jurnal WHERE unitkey = @UNITKEY AND NOBUKTI = @NOBKU AND kdstatus  = @KDSTATUS--UPDATE BY RE JAN 2014
				END				
				fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE,@TGLVALID 
			end
			close cjurnal
			deallocate cjurnal
		END 
      
      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SKP] ENABLE TRIGGER [TU_SKP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE trigger [dbo].[TD_SKPDET] on [dbo].[SKPDET] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
        if @numrows = 0
       RETURN
       
	    /*  Cannot delete parent "SKP" if children still exist in "SKPDET"  */
    if exists (select 1
               from   SKPSTS t2, deleted t1
               where  t2.NOSKP = t1.NOSKP AND t2.UNITKEY = t1.UNITKEY )
       begin
          select @errno  = 50006,
                 @errmsg = 'DATA MASIH ADA DI STS PENETAPAN in "SKPSTS". Cannot delete parent "SKPDET".'
          goto error
       end   
       
        if exists (select 1
               from   SKPTBP t2, deleted t1
               where  t2.NOSKP = t1.NOSKP AND t2.UNITKEY = t1.UNITKEY )
       begin
          select @errno  = 50006,
                 @errmsg = 'DATA MASIH ADA DI TBP PENETAPAN in "SKPTBP". Cannot delete parent "SKPDET".'
          goto error
       end  


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end


GO
ALTER TABLE [dbo].[SKPDET] ENABLE TRIGGER [TD_SKPDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*

PIC RE 04 JUNI 2014   

*/




CREATE trigger [dbo].[TU_SKPDET] on [dbo].[SKPDET] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "SKP"  */----UPDATE 01 JUNI 2014
    if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "SKP".'
               goto error
            end
      END
      
      
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "SKP".'
               goto error
            end
      END
      
    
      

      if update(UNITKEY) or
         update(NOSKP)
      begin
         if exists (select 1
                    from   SKPTBP t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSKP = d1.NOSKP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSKP != d1.NOSKP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKPTBP". Cannot modify parent code in "SKPDET".'
               goto error
            end
      end 
      
      if update(UNITKEY) or
         update(NOSKP)
      begin
         if exists (select 1
                    from   SKPSTS t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSKP = d1.NOSKP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSKP != d1.NOSKP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKPSTS". Cannot modify parent code in "SKPDET".'
               goto error
            end
      end 



if update(NILAI) 
      begin
         if exists (select 1
                    from   SKPTBP t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSKP = d1.NOSKP
                     )
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKPTBP". Cannot modify parent code in "SKPDET".'
               goto error
            end
      end 
         if update(NILAI) 
      begin
         if exists (select 1
                    from   SKPSTS t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSKP = d1.NOSKP
                     )
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKPSTS". Cannot modify parent code in "SKPDET".'
               goto error
            end
      end    
      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end



GO
ALTER TABLE [dbo].[SKPDET] ENABLE TRIGGER [TU_SKPDET]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_SKPPKD] on [dbo].[SKPPKD] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    DECLARE @NOBKU VARCHAR(100), @UNITKEY VARCHAR(10)
    BEGIN 
		declare cjurnal cursor for
			SELECT I.NOSK, I.UNITKEY FROM DELETED I
		open cjurnal
		fetch next from cjurnal into @NOBKU, @UNITKEY
		while @@FETCH_STATUS = 0
		begin	
			DELETE FROM jurnal WHERE nobkuskpd = @NOBKU AND unitkey = @UNITKEY
			fetch next from cjurnal into @NOBKU, @UNITKEY
		end
		close cjurnal
		deallocate cjurnal
	END


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SKPPKD] ENABLE TRIGGER [TD_SKPPKD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SKPPKD] on [dbo].[SKPPKD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      DECLARE @NOBKU VARCHAR(100), @TABLENAME VARCHAR(20), @UNITKEY VARCHAR(10), @KDSTATUS VARCHAR(2), @IDXKODE INT, @TGLVALID DATETIME
      if update(TGLVALID)    
		BEGIN 
			declare cjurnal cursor for
				SELECT I.NOSK, 'SKPPKD' TABLENAME, I.UNITKEY, '72' KDSTATUS, 3 IDXKODE, I.TGLVALID from INSERTED I --INNER JOIN TBP T ON T.UNITKEY = I.UNITKEY AND T.NOTBP = I.NOTBP 
			open cjurnal
			fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE, @TGLVALID
			while @@FETCH_STATUS=0
			begin	
				IF @TGLVALID IS NOT NULL
				BEGIN
					exec WSP_JURNAL_R6 @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE
					UPDATE jurnal SET tgl_valid = @TGLVALID  WHERE unitkey = @UNITKEY AND nobkuskpd = @NOBKU
				END
				ELSE
				BEGIN
					--DEL
					DELETE FROM jurnal WHERE unitkey = @UNITKEY AND nobkuskpd = @NOBKU
				END				
				fetch next from cjurnal into @NOBKU, @TABLENAME, @UNITKEY, @KDSTATUS, @IDXKODE, @TGLVALID
			end
			close cjurnal
			deallocate cjurnal
		END 
      
      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SKPPKD] ENABLE TRIGGER [TU_SKPPKD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TD_SP2B] on [dbo].[SP2B] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "TBP" if children still exist in "SP2BDET"  */
    if exists (select 1
               from   SP2BDET t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSP2B = t1.NOSP2B)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2BDET". Cannot delete parent "SP2B".'
          goto error
       end
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[SP2B] ENABLE TRIGGER [TD_SP2B]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[TU_SP2B] ON [dbo].[SP2B] FOR UPDATE AS
BEGIN
	DECLARE @NUMROWS INT, @ERRNO INT, @ERRMSG VARCHAR(255)
    SELECT @NUMROWS = @@ROWCOUNT
    IF @NUMROWS = 0
       RETURN 

	IF  UPDATE(TGLVALID)
	BEGIN
		DECLARE @UNITKEY AS VARCHAR(10), @NOSP2B VARCHAR(50), @TGLVALID DATETIME
		DECLARE CJURNAL CURSOR FOR SELECT I.UNITKEY, I.NOSP2B, I.TGLVALID FROM INSERTED I
		OPEN CJURNAL
		FETCH NEXT FROM CJURNAL INTO @UNITKEY, @NOSP2B, @TGLVALID
		
		WHILE @@FETCH_STATUS=0
		BEGIN
			IF @TGLVALID IS NULL
			BEGIN
				DELETE FROM jurnal WHERE unitkey = @UNITKEY AND nobkuskpd = @NOSP2B AND nobukti = @NOSP2B AND jbku = '61'
			END
			ELSE
			BEGIN
				EXEC WSP_JURNALFKTP @NOSP2B, @UNITKEY
			END
			FETCH NEXT FROM CJURNAL INTO @UNITKEY, @NOSP2B, @TGLVALID
		END
		CLOSE CJURNAL
		DEALLOCATE CJURNAL
	END
	RETURN
END
GO
ALTER TABLE [dbo].[SP2B] ENABLE TRIGGER [TU_SP2B]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_SP2D] on [dbo].[SP2D] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "SP2D" if children still exist in "SP2DPJK"  */
    if exists (select 1
               from   SP2DPJK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSP2D = t1.NOSP2D)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DPJK". Cannot delete parent "SP2D".'
          goto error
       end

    /*  Cannot delete parent "SP2D" if children still exist in "SP2DDETR"  */
    if exists (select 1
               from   SP2DDETR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSP2D = t1.NOSP2D)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DDETR". Cannot delete parent "SP2D".'
          goto error
       end

    /*  Cannot delete parent "SP2D" if children still exist in "SP2DDETRTL"  */
    if exists (select 1
               from   SP2DDETRTL t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSP2D = t1.NOSP2D)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DDETRTL". Cannot delete parent "SP2D".'
          goto error
       end

    /*  Cannot delete parent "SP2D" if children still exist in "SP2DDETB"  */
    if exists (select 1
               from   SP2DDETB t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSP2D = t1.NOSP2D)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DDETB". Cannot delete parent "SP2D".'
          goto error
       end

    /*  Cannot delete parent "SP2D" if children still exist in "SP2DDETD"  */
    if exists (select 1
               from   SP2DDETD t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSP2D = t1.NOSP2D)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2DDETD". Cannot delete parent "SP2D".'
          goto error
       end

    /*  Cannot delete parent "SP2D" if children still exist in "BKUK"  */
    if exists (select 1
               from   BKUK t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSP2D = t1.NOSP2D)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUK". Cannot delete parent "SP2D".'
          goto error
       end

    /*  Cannot delete parent "SP2D" if children still exist in "DPDET"  */
    if exists (select 1
               from   DPDET t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSP2D = t1.NOSP2D)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DPDET". Cannot delete parent "SP2D".'
          goto error
       end

    /*  Cannot delete parent "SP2D" if children still exist in "BKUSP2D"  */
    if exists (select 1
               from   BKUSP2D t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSP2D = t1.NOSP2D)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUSP2D". Cannot delete parent "SP2D".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SP2D] ENABLE TRIGGER [TD_SP2D]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SP2D] on [dbo].[SP2D] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "SP2D"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "SP2D".'
             goto error
          end
    end
    /*  Parent "SKO" must exist when inserting a child in "SP2D"  
    if update(IDXSKO)
    begin
       if (select count(*)
           from   SKO t1, inserted t2
           where  t1.IDXSKO = t2.IDXSKO) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SKO". Cannot create child in "SP2D".'
             goto error
          end
    end*/
    /*  Parent "ZKODE" must exist when inserting a child in "SP2D"  */
    if update(IDXKODE)
    begin
       if (select count(*)
           from   ZKODE t1, inserted t2
           where  t1.IDXKODE = t2.IDXKODE) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "ZKODE". Cannot create child in "SP2D".'
             goto error
          end
    end
    /*  Parent "STATTRS" must exist when inserting a child in "SP2D"  */
    if update(KDSTATUS)
    begin
       if (select count(*)
           from   STATTRS t1, inserted t2
           where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STATTRS". Cannot create child in "SP2D".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "SP2D"  */
    if update(KEYBEND)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "SP2D".'
             goto error
          end
    end
    /*  Parent "DAFTPHK3" must exist when inserting a child in "SP2D"  */
    if update(KDP3)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KDP3 is null)
       if @numnull != @numrows
          if (select count(*)
              from   DAFTPHK3 t1, inserted t2
              where  t1.KDP3 = t2.KDP3) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTPHK3". Cannot create child in "SP2D".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "SP2D"  */
    if update(IDXTTD)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  IDXTTD is null)
       if @numnull != @numrows
          if (select count(*)
              from   JABTTD t1, inserted t2
              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "SP2D".'
             goto error
          end
    end
    /*  Parent "ANTARBYR" must exist when inserting a child in "SP2D"  */
--    if update(UNITKEY) or
--       update(NOSPM)
--   begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  UNITKEY is null
--                           and   NOSPM is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   ANTARBYR t1, inserted t2
--              where  t1.UNITKEY = t2.UNITKEY
--               and   t1.NOSPM = t2.NOSPM) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "ANTARBYR". Cannot create child in "SP2D".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end





set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
ALTER TABLE [dbo].[SP2D] ENABLE TRIGGER [TI_SP2D]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SP2D] on [dbo].[SP2D] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "SP2D"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "SP2D".'
               goto error
            end
      end
      /*  Parent "SKO" must exist when updating a child in "SP2D"  
      if update(IDXSKO)
      begin
         if (select count(*)
             from   SKO t1, inserted t2
             where  t1.IDXSKO = t2.IDXSKO) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SKO" does not exist. Cannot modify child in "SP2D".'
               goto error
            end
      end*/
      /*  Parent "ZKODE" must exist when updating a child in "SP2D"  */
      if update(IDXKODE)
      begin
         if (select count(*)
             from   ZKODE t1, inserted t2
             where  t1.IDXKODE = t2.IDXKODE) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ZKODE" does not exist. Cannot modify child in "SP2D".'
               goto error
            end
      end
      /*  Parent "STATTRS" must exist when updating a child in "SP2D"  */
      if update(KDSTATUS)
      begin
         if (select count(*)
             from   STATTRS t1, inserted t2
             where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STATTRS" does not exist. Cannot modify child in "SP2D".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "SP2D"  */
      if update(KEYBEND)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "SP2D".'
               goto error
            end
      end
      /*  Parent "DAFTPHK3" must exist when updating a child in "SP2D"  */
      if update(KDP3)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KDP3 is null)
         if @numnull != @numrows
            if (select count(*)
                from   DAFTPHK3 t1, inserted t2
                where  t1.KDP3 = t2.KDP3) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTPHK3" does not exist. Cannot modify child in "SP2D".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "SP2D"  */
      if update(IDXTTD)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  IDXTTD is null)
         if @numnull != @numrows
            if (select count(*)
                from   JABTTD t1, inserted t2
                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "SP2D".'
               goto error
            end
      end
      /*  Parent "ANTARBYR" must exist when updating a child in "SP2D"  */
      /* Untuk Offline*/
--      if update(UNITKEY) or
--         update(NOSPM)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  UNITKEY is null
--                             and   NOSPM is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   ANTARBYR t1, inserted t2
--                where  t1.UNITKEY = t2.UNITKEY
--                 and   t1.NOSPM = t2.NOSPM) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'ANTARBYR" does not exist. Cannot modify child in "SP2D".'
--               goto error
--            end
--      end
      /*  Cannot modify parent code in "SP2D" if children still exist in "SP2DPJK"  */
      if update(UNITKEY) or
         update(NOSP2D)
      begin
         if exists (select 1
                    from   SP2DPJK t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSP2D = d1.NOSP2D
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSP2D != d1.NOSP2D))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DPJK". Cannot modify parent code in "SP2D".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SP2D" if children still exist in "SP2DDETR"  */
      if update(UNITKEY) or
         update(NOSP2D)
      begin
         if exists (select 1
                    from   SP2DDETR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSP2D = d1.NOSP2D
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSP2D != d1.NOSP2D))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DDETR". Cannot modify parent code in "SP2D".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SP2D" if children still exist in "SP2DDETRTL"  */
      if update(UNITKEY) or
         update(NOSP2D)
      begin
         if exists (select 1
                    from   SP2DDETRTL t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSP2D = d1.NOSP2D
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSP2D != d1.NOSP2D))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DDETRTL". Cannot modify parent code in "SP2D".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SP2D" if children still exist in "SP2DDETB"  */
      if update(UNITKEY) or
         update(NOSP2D)
      begin
         if exists (select 1
                    from   SP2DDETB t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSP2D = d1.NOSP2D
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSP2D != d1.NOSP2D))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DDETB". Cannot modify parent code in "SP2D".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SP2D" if children still exist in "SP2DDETD"  */
      if update(UNITKEY) or
         update(NOSP2D)
      begin
         if exists (select 1
                    from   SP2DDETD t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSP2D = d1.NOSP2D
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSP2D != d1.NOSP2D))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2DDETD". Cannot modify parent code in "SP2D".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SP2D" if children still exist in "BKUK"  */
      if update(UNITKEY) or
         update(NOSP2D)
      begin
         if exists (select 1
                    from   BKUK t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSP2D = d1.NOSP2D
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSP2D != d1.NOSP2D))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUK". Cannot modify parent code in "SP2D".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SP2D" if children still exist in "DPDET"  */
      if update(UNITKEY) or
         update(NOSP2D)
      begin
         if exists (select 1
                    from   DPDET t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSP2D = d1.NOSP2D
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSP2D != d1.NOSP2D))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DPDET". Cannot modify parent code in "SP2D".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SP2D" if children still exist in "BKUSP2D"  */
      if update(UNITKEY) or
         update(NOSP2D)
      begin
         if exists (select 1
                    from   BKUSP2D t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSP2D = d1.NOSP2D
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSP2D != d1.NOSP2D))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUSP2D". Cannot modify parent code in "SP2D".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SP2D] ENABLE TRIGGER [TU_SP2D]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SP2DDETB] on [dbo].[SP2DDETB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGB" must exist when inserting a child in "SP2DDETB"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGB". Cannot create child in "SP2DDETB".'
             goto error
          end
    end
    /*  Parent "SP2D" must exist when inserting a child in "SP2DDETB"  */
    if update(UNITKEY) or
       update(NOSP2D)
    begin
       if (select count(*)
           from   SP2D t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSP2D = t2.NOSP2D) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SP2D". Cannot create child in "SP2DDETB".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "SP2DDETB"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "SP2DDETB".'
             goto error
          end
    end
    /*  Parent "JDANA" must exist when inserting a child in "SP2DDETB"  */
    if update(KDDANA)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KDDANA is null)
       if @numnull != @numrows
          if (select count(*)
              from   JDANA t1, inserted t2
              where  t1.KDDANA = t2.KDDANA) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JDANA". Cannot create child in "SP2DDETB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SP2DDETB] ENABLE TRIGGER [TI_SP2DDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SP2DDETB] on [dbo].[SP2DDETB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGB" must exist when updating a child in "SP2DDETB"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGB" does not exist. Cannot modify child in "SP2DDETB".'
               goto error
            end
      end
      /*  Parent "SP2D" must exist when updating a child in "SP2DDETB"  */
      if update(UNITKEY) or
         update(NOSP2D)
      begin
         if (select count(*)
             from   SP2D t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSP2D = t2.NOSP2D) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SP2D" does not exist. Cannot modify child in "SP2DDETB".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "SP2DDETB"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "SP2DDETB".'
               goto error
            end
      end
      /*  Parent "JDANA" must exist when updating a child in "SP2DDETB"  */
      if update(KDDANA)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KDDANA is null)
         if @numnull != @numrows
            if (select count(*)
                from   JDANA t1, inserted t2
                where  t1.KDDANA = t2.KDDANA) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JDANA" does not exist. Cannot modify child in "SP2DDETB".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SP2DDETB] ENABLE TRIGGER [TU_SP2DDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SP2DDETD] on [dbo].[SP2DDETD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGD" must exist when inserting a child in "SP2DDETD"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGD". Cannot create child in "SP2DDETD".'
             goto error
          end
    end
    /*  Parent "SP2D" must exist when inserting a child in "SP2DDETD"  */
    if update(UNITKEY) or
       update(NOSP2D)
    begin
       if (select count(*)
           from   SP2D t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSP2D = t2.NOSP2D) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SP2D". Cannot create child in "SP2DDETD".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "SP2DDETD"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "SP2DDETD".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SP2DDETD] ENABLE TRIGGER [TI_SP2DDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SP2DDETD] on [dbo].[SP2DDETD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGD" must exist when updating a child in "SP2DDETD"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGD" does not exist. Cannot modify child in "SP2DDETD".'
               goto error
            end
      end
      /*  Parent "SP2D" must exist when updating a child in "SP2DDETD"  */
      if update(UNITKEY) or
         update(NOSP2D)
      begin
         if (select count(*)
             from   SP2D t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSP2D = t2.NOSP2D) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SP2D" does not exist. Cannot modify child in "SP2DDETD".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "SP2DDETD"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "SP2DDETD".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SP2DDETD] ENABLE TRIGGER [TU_SP2DDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SP2DDETR] on [dbo].[SP2DDETR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MKEGIATAN" must exist when inserting a child in "SP2DDETR"  */
    if update(KDKEGUNIT)
    begin
       if (select count(*)
           from   MKEGIATAN t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "SP2DDETR".'
             goto error
          end
    end
    /*  Parent "MATANGR" must exist when inserting a child in "SP2DDETR"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "SP2DDETR".'
             goto error
          end
    end
    /*  Parent "SP2D" must exist when inserting a child in "SP2DDETR"  */
    if update(UNITKEY) or
       update(NOSP2D)
    begin
       if (select count(*)
           from   SP2D t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSP2D = t2.NOSP2D) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SP2D". Cannot create child in "SP2DDETR".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "SP2DDETR"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "SP2DDETR".'
             goto error
          end
    end
    /*  Parent "JDANA" must exist when inserting a child in "SP2DDETR"  */
    if update(KDDANA)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KDDANA is null)
       if @numnull != @numrows
          if (select count(*)
              from   JDANA t1, inserted t2
              where  t1.KDDANA = t2.KDDANA) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JDANA". Cannot create child in "SP2DDETR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SP2DDETR] ENABLE TRIGGER [TI_SP2DDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SP2DDETR] on [dbo].[SP2DDETR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MKEGIATAN" must exist when updating a child in "SP2DDETR"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "SP2DDETR".'
               goto error
            end
      end
      /*  Parent "MATANGR" must exist when updating a child in "SP2DDETR"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "SP2DDETR".'
               goto error
            end
      end
      /*  Parent "SP2D" must exist when updating a child in "SP2DDETR"  */
      if update(UNITKEY) or
         update(NOSP2D)
      begin
         if (select count(*)
             from   SP2D t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSP2D = t2.NOSP2D) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SP2D" does not exist. Cannot modify child in "SP2DDETR".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "SP2DDETR"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "SP2DDETR".'
               goto error
            end
      end
      /*  Parent "JDANA" must exist when updating a child in "SP2DDETR"  */
      if update(KDDANA)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KDDANA is null)
         if @numnull != @numrows
            if (select count(*)
                from   JDANA t1, inserted t2
                where  t1.KDDANA = t2.KDDANA) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JDANA" does not exist. Cannot modify child in "SP2DDETR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SP2DDETR] ENABLE TRIGGER [TU_SP2DDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SP2DDETRTL] on [dbo].[SP2DDETRTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "SP2DDETRTL"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "SP2DDETRTL".'
             goto error
          end
    end
    /*  Parent "SP2D" must exist when inserting a child in "SP2DDETRTL"  */
    if update(UNITKEY) or
       update(NOSP2D)
    begin
       if (select count(*)
           from   SP2D t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSP2D = t2.NOSP2D) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SP2D". Cannot create child in "SP2DDETRTL".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "SP2DDETRTL"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "SP2DDETRTL".'
             goto error
          end
    end
    /*  Parent "JDANA" must exist when inserting a child in "SP2DDETRTL"  */
    if update(KDDANA)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KDDANA is null)
       if @numnull != @numrows
          if (select count(*)
              from   JDANA t1, inserted t2
              where  t1.KDDANA = t2.KDDANA) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JDANA". Cannot create child in "SP2DDETRTL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SP2DDETRTL] ENABLE TRIGGER [TI_SP2DDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SP2DDETRTL] on [dbo].[SP2DDETRTL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "SP2DDETRTL"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "SP2DDETRTL".'
               goto error
            end
      end
      /*  Parent "SP2D" must exist when updating a child in "SP2DDETRTL"  */
      if update(UNITKEY) or
         update(NOSP2D)
      begin
         if (select count(*)
             from   SP2D t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSP2D = t2.NOSP2D) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SP2D" does not exist. Cannot modify child in "SP2DDETRTL".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "SP2DDETRTL"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "SP2DDETRTL".'
               goto error
            end
      end
      /*  Parent "JDANA" must exist when updating a child in "SP2DDETRTL"  */
      if update(KDDANA)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KDDANA is null)
         if @numnull != @numrows
            if (select count(*)
                from   JDANA t1, inserted t2
                where  t1.KDDANA = t2.KDDANA) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JDANA" does not exist. Cannot modify child in "SP2DDETRTL".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SP2DDETRTL] ENABLE TRIGGER [TU_SP2DDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SP2DPJK] on [dbo].[SP2DPJK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "SP2D" must exist when inserting a child in "SP2DPJK"  */
    if update(UNITKEY) or
       update(NOSP2D)
    begin
       if (select count(*)
           from   SP2D t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSP2D = t2.NOSP2D) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SP2D". Cannot create child in "SP2DPJK".'
             goto error
          end
    end
    /*  Parent "JPAJAK" must exist when inserting a child in "SP2DPJK"  */
    if update(PJKKEY)
    begin
       if (select count(*)
           from   JPAJAK t1, inserted t2
           where  t1.PJKKEY = t2.PJKKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JPAJAK". Cannot create child in "SP2DPJK".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SP2DPJK] ENABLE TRIGGER [TI_SP2DPJK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SP2DPJK] on [dbo].[SP2DPJK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "SP2D" must exist when updating a child in "SP2DPJK"  */
      if update(UNITKEY) or
         update(NOSP2D)
      begin
         if (select count(*)
             from   SP2D t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSP2D = t2.NOSP2D) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SP2D" does not exist. Cannot modify child in "SP2DPJK".'
               goto error
            end
      end
      /*  Parent "JPAJAK" must exist when updating a child in "SP2DPJK"  */
      if update(PJKKEY)
      begin
         if (select count(*)
             from   JPAJAK t1, inserted t2
             where  t1.PJKKEY = t2.PJKKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JPAJAK" does not exist. Cannot modify child in "SP2DPJK".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SP2DPJK] ENABLE TRIGGER [TU_SP2DPJK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_SP2DSALUR] on [dbo].[SP2DSALUR] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "SP2DSALUR" if children still exist in "SP2DSALURDET"  */
    if exists (select 1
               from   SP2DSALURDET t2, deleted t1
               where  t2.NOSALUR = t1.NOSALUR)
       begin
          select @errno  = 50006,
                 @errmsg = 'Data masih ada di "Penyaluran Rincian SP2D". Tidak bisa hapus "Penyaluran SP2D".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end


GO
ALTER TABLE [dbo].[SP2DSALUR] ENABLE TRIGGER [TD_SP2DSALUR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SP2DSALUR] on [dbo].[SP2DSALUR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "NOSALUR" if children still exist in "NOSALURDET"  */
      if update(NOSALUR)
      begin
         if exists (select 1
                    from   SP2DSALURDET t2, inserted i1, deleted d1
                    where  t2.NOSALUR = d1.NOSALUR
                     and  (i1.NOSALUR != d1.NOSALUR))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "NOSALURDET". Cannot modify parent code in "NOSALUR".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end





GO
ALTER TABLE [dbo].[SP2DSALUR] ENABLE TRIGGER [TU_SP2DSALUR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TD_SP3B] on [dbo].[SP3B] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "TBP" if children still exist in "SP3BDET"  */
    if exists (select 1
               from   SP3BDET t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSP3B = t1.NOSP3B)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP3BDET". Cannot delete parent "SP3B".'
          goto error
       end
    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[SP3B] ENABLE TRIGGER [TD_SP3B]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_SPJDETB] on [dbo].[SPJDETB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "JDANA" must exist when inserting a child in "SPJDETB"  */
    if update(KDDANA)
    BEGIN
    	select @numnull = (select count(*)
                            from   inserted
                            where  KDDANA is null)
         if @numnull != @numrows
       if (select count(*)
           from   JDANA t1, inserted t2
           where  t1.KDDANA = t2.KDDANA) != @numrows-@numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JDANA". Cannot create child in "SPJDETB".'
             goto error
          end
    end
    /*  Parent "MATANGB" must exist when inserting a child in "SPJDETB"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGB". Cannot create child in "SPJDETB".'
             goto error
          end
    end
    /*  Parent "PSPJ" must exist when inserting a child in "SPJDETB"  */
    if update(UNITKEY) or
       update(NOSPJ)
    begin
       if (select count(*)
           from   PSPJ t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPJ = t2.NOSPJ) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PSPJ". Cannot create child in "SPJDETB".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "SPJDETB"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "SPJDETB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPJDETB] ENABLE TRIGGER [TI_SPJDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TU_SPJDETB] on [dbo].[SPJDETB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "JDANA" must exist when updating a child in "SPJDETB"  */
      if update(KDDANA)
      BEGIN
      	select @numnull = (select count(*)
                            from   inserted
                            where  KDDANA is null)
         if @numnull != @numrows
         if (select count(*)
             from   JDANA t1, inserted t2
             where  t1.KDDANA = t2.KDDANA) != @numrows -@numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JDANA" does not exist. Cannot modify child in "SPJDETB".'
               goto error
            end
      end
      /*  Parent "MATANGB" must exist when updating a child in "SPJDETB"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGB" does not exist. Cannot modify child in "SPJDETB".'
               goto error
            end
      end
      /*  Parent "PSPJ" must exist when updating a child in "SPJDETB"  */
      if update(UNITKEY) or
         update(NOSPJ)
      begin
         if (select count(*)
             from   PSPJ t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPJ = t2.NOSPJ) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PSPJ" does not exist. Cannot modify child in "SPJDETB".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "SPJDETB"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "SPJDETB".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPJDETB] ENABLE TRIGGER [TU_SPJDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SPJDETD] on [dbo].[SPJDETD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGD" must exist when inserting a child in "SPJDETD"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGD". Cannot create child in "SPJDETD".'
             goto error
          end
    end
    /*  Parent "PSPJ" must exist when inserting a child in "SPJDETD"  */
    if update(UNITKEY) or
       update(NOSPJ)
    begin
       if (select count(*)
           from   PSPJ t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPJ = t2.NOSPJ) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PSPJ". Cannot create child in "SPJDETD".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "SPJDETD"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "SPJDETD".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPJDETD] ENABLE TRIGGER [TI_SPJDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SPJDETD] on [dbo].[SPJDETD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGD" must exist when updating a child in "SPJDETD"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGD" does not exist. Cannot modify child in "SPJDETD".'
               goto error
            end
      end
      /*  Parent "PSPJ" must exist when updating a child in "SPJDETD"  */
      if update(UNITKEY) or
         update(NOSPJ)
      begin
         if (select count(*)
             from   PSPJ t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPJ = t2.NOSPJ) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PSPJ" does not exist. Cannot modify child in "SPJDETD".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "SPJDETD"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "SPJDETD".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPJDETD] ENABLE TRIGGER [TU_SPJDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SPJDETP] on [dbo].[SPJDETP] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "PSPJ" must exist when inserting a child in "SPJDETP"  */
    if update(UNITKEY) or
       update(NOSPJ)
    begin
       if (select count(*)
           from   PSPJ t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPJ = t2.NOSPJ) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PSPJ". Cannot create child in "SPJDETP".'
             goto error
          end
    end
    /*  Parent "JPAJAK" must exist when inserting a child in "SPJDETP"  */
    if update(PJKKEY)
    begin
       if (select count(*)
           from   JPAJAK t1, inserted t2
           where  t1.PJKKEY = t2.PJKKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JPAJAK". Cannot create child in "SPJDETP".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPJDETP] ENABLE TRIGGER [TI_SPJDETP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SPJDETP] on [dbo].[SPJDETP] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "PSPJ" must exist when updating a child in "SPJDETP"  */
      if update(UNITKEY) or
         update(NOSPJ)
      begin
         if (select count(*)
             from   PSPJ t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPJ = t2.NOSPJ) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PSPJ" does not exist. Cannot modify child in "SPJDETP".'
               goto error
            end
      end
      /*  Parent "JPAJAK" must exist when updating a child in "SPJDETP"  */
      if update(PJKKEY)
      begin
         if (select count(*)
             from   JPAJAK t1, inserted t2
             where  t1.PJKKEY = t2.PJKKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JPAJAK" does not exist. Cannot modify child in "SPJDETP".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPJDETP] ENABLE TRIGGER [TU_SPJDETP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_SPJDETR] on [dbo].[SPJDETR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "JDANA" must exist when inserting a child in "SPJDETR"  */
    --if update(KDDANA)
    --BEGIN
    --	select @numnull = (select count(*)
    --                        from   inserted
    --                        where  KDDANA is null)
    --     if @numnull != @numrows
    --   if (select count(*)
    --       from   JDANA t1, inserted t2
    --       where  t1.KDDANA = t2.KDDANA) != @numrows-@numnull
    --      begin
    --         select @errno  = 50002,
    --                @errmsg = 'Parent does not exist in "JDANA". Cannot create child in "SPJDETR".'
    --         goto error
    --      end
    --end
    /*  Parent "MKEGIATAN" must exist when inserting a child in "SPJDETR"  */
    if update(KDKEGUNIT)
    begin
       if (select count(*)
           from   MKEGIATAN t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "SPJDETR".'
             goto error
          end
    end
    /*  Parent "MATANGR" must exist when inserting a child in "SPJDETR"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "SPJDETR".'
             goto error
          end
    end
    /*  Parent "PSPJ" must exist when inserting a child in "SPJDETR"  */
    if update(UNITKEY) or
       update(NOSPJ)
    begin
       if (select count(*)
           from   PSPJ t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPJ = t2.NOSPJ) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PSPJ". Cannot create child in "SPJDETR".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "SPJDETR"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "SPJDETR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPJDETR] ENABLE TRIGGER [TI_SPJDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TU_SPJDETR] on [dbo].[SPJDETR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "JDANA" must exist when updating a child in "SPJDETR"  */
      if update(KDDANA)
      BEGIN
      	select @numnull = (select count(*)
                            from   inserted
                            where  KDDANA is null)
         if @numnull != @numrows
         if (select count(*)
             from   JDANA t1, inserted t2
             where  t1.KDDANA = t2.KDDANA) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JDANA" does not exist. Cannot modify child in "SPJDETR".'
               goto error
            end
      END    
             
      /*  Parent "MKEGIATAN" must exist when updating a child in "SPJDETR"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "SPJDETR".'
               goto error
            end
      end
      /*  Parent "MATANGR" must exist when updating a child in "SPJDETR"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "SPJDETR".'
               goto error
            end
      end
      /*  Parent "PSPJ" must exist when updating a child in "SPJDETR"  */
      if update(UNITKEY) or
         update(NOSPJ)
      begin
         if (select count(*)
             from   PSPJ t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPJ = t2.NOSPJ) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PSPJ" does not exist. Cannot modify child in "SPJDETR".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "SPJDETR"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "SPJDETR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPJDETR] ENABLE TRIGGER [TU_SPJDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_SPJDETRTL] on [dbo].[SPJDETRTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "JDANA" must exist when inserting a child in "SPJDETRTL"  */
    if update(KDDANA)
    BEGIN
    	select @numnull = (select count(*)
                            from   inserted
                            where  KDDANA is null)
         if @numnull != @numrows
       if (select count(*)
           from   JDANA t1, inserted t2
           where  t1.KDDANA = t2.KDDANA) != @numrows-@numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JDANA". Cannot create child in "SPJDETRTL".'
             goto error
          end
    end
    /*  Parent "MATANGR" must exist when inserting a child in "SPJDETRTL"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "SPJDETRTL".'
             goto error
          end
    end
    /*  Parent "PSPJ" must exist when inserting a child in "SPJDETRTL"  */
    if update(UNITKEY) or
       update(NOSPJ)
    begin
       if (select count(*)
           from   PSPJ t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPJ = t2.NOSPJ) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PSPJ". Cannot create child in "SPJDETRTL".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "SPJDETRTL"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "SPJDETRTL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPJDETRTL] ENABLE TRIGGER [TI_SPJDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TU_SPJDETRTL] on [dbo].[SPJDETRTL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "JDANA" must exist when updating a child in "SPJDETRTL"  */
      if update(KDDANA)
      BEGIN
      	select @numnull = (select count(*)
                            from   inserted
                            where  KDDANA is null)
         if @numnull != @numrows
         if (select count(*)
             from   JDANA t1, inserted t2
             where  t1.KDDANA = t2.KDDANA) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JDANA" does not exist. Cannot modify child in "SPJDETRTL".'
               goto error
            end
      end
      /*  Parent "MATANGR" must exist when updating a child in "SPJDETRTL"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "SPJDETRTL".'
               goto error
            end
      end
      /*  Parent "PSPJ" must exist when updating a child in "SPJDETRTL"  */
      if update(UNITKEY) or
         update(NOSPJ)
      begin
         if (select count(*)
             from   PSPJ t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPJ = t2.NOSPJ) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PSPJ" does not exist. Cannot modify child in "SPJDETRTL".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "SPJDETRTL"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "SPJDETRTL".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPJDETRTL] ENABLE TRIGGER [TU_SPJDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SPJSPP] on [dbo].[SPJSPP] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "SPP" must exist when inserting a child in "SPJSPP"  */
    if update(UNITKEY) or
       update(NOSPP)
    begin
       if (select count(*)
           from   SPP t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPP = t2.NOSPP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SPP". Cannot create child in "SPJSPP".'
             goto error
          end
    end
    /*  Parent "PSPJ" must exist when inserting a child in "SPJSPP"  */
    if update(UNITKEY) or
       update(NOSPJ)
    begin
       if (select count(*)
           from   PSPJ t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPJ = t2.NOSPJ) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PSPJ". Cannot create child in "SPJSPP".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPJSPP] ENABLE TRIGGER [TI_SPJSPP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SPJSPP] on [dbo].[SPJSPP] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "SPP" must exist when updating a child in "SPJSPP"  */
      if update(UNITKEY) or
         update(NOSPP)
      begin
         if (select count(*)
             from   SPP t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPP = t2.NOSPP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SPP" does not exist. Cannot modify child in "SPJSPP".'
               goto error
            end
      end
      /*  Parent "PSPJ" must exist when updating a child in "SPJSPP"  */
      if update(UNITKEY) or
         update(NOSPJ)
      begin
         if (select count(*)
             from   PSPJ t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPJ = t2.NOSPJ) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PSPJ" does not exist. Cannot modify child in "SPJSPP".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPJSPP] ENABLE TRIGGER [TU_SPJSPP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SPMDETB] on [dbo].[SPMDETB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGB" must exist when inserting a child in "SPMDETB"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGB". Cannot create child in "SPMDETB".'
             goto error
          end
    end
    /*  Parent "ANTARBYR" must exist when inserting a child in "SPMDETB"  */
    if update(UNITKEY) or
       update(NOSPM)
    begin
       if (select count(*)
           from   ANTARBYR t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPM = t2.NOSPM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "ANTARBYR". Cannot create child in "SPMDETB".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "SPMDETB"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "SPMDETB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPMDETB] ENABLE TRIGGER [TI_SPMDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SPMDETB] on [dbo].[SPMDETB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGB" must exist when updating a child in "SPMDETB"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGB" does not exist. Cannot modify child in "SPMDETB".'
               goto error
            end
      end
      /*  Parent "ANTARBYR" must exist when updating a child in "SPMDETB"  */
      if update(UNITKEY) or
         update(NOSPM)
      begin
         if (select count(*)
             from   ANTARBYR t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPM = t2.NOSPM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ANTARBYR" does not exist. Cannot modify child in "SPMDETB".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "SPMDETB"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "SPMDETB".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPMDETB] ENABLE TRIGGER [TU_SPMDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SPMDETD] on [dbo].[SPMDETD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGD" must exist when inserting a child in "SPMDETD"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGD". Cannot create child in "SPMDETD".'
             goto error
          end
    end
    /*  Parent "ANTARBYR" must exist when inserting a child in "SPMDETD"  */
    if update(UNITKEY) or
       update(NOSPM)
    begin
       if (select count(*)
           from   ANTARBYR t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPM = t2.NOSPM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "ANTARBYR". Cannot create child in "SPMDETD".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "SPMDETD"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "SPMDETD".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPMDETD] ENABLE TRIGGER [TI_SPMDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SPMDETD] on [dbo].[SPMDETD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGD" must exist when updating a child in "SPMDETD"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGD" does not exist. Cannot modify child in "SPMDETD".'
               goto error
            end
      end
      /*  Parent "ANTARBYR" must exist when updating a child in "SPMDETD"  */
      if update(UNITKEY) or
         update(NOSPM)
      begin
         if (select count(*)
             from   ANTARBYR t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPM = t2.NOSPM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ANTARBYR" does not exist. Cannot modify child in "SPMDETD".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "SPMDETD"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "SPMDETD".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPMDETD] ENABLE TRIGGER [TU_SPMDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SPMDETR] on [dbo].[SPMDETR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "SPMDETR"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "SPMDETR".'
             goto error
          end
    end
    /*  Parent "MKEGIATAN" must exist when inserting a child in "SPMDETR"  */
    if update(KDKEGUNIT)
    begin
       if (select count(*)
           from   MKEGIATAN t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "SPMDETR".'
             goto error
          end
    end
    /*  Parent "ANTARBYR" must exist when inserting a child in "SPMDETR"  */
    if update(UNITKEY) or
       update(NOSPM)
    begin
       if (select count(*)
           from   ANTARBYR t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPM = t2.NOSPM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "ANTARBYR". Cannot create child in "SPMDETR".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "SPMDETR"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "SPMDETR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPMDETR] ENABLE TRIGGER [TI_SPMDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SPMDETR] on [dbo].[SPMDETR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "SPMDETR"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "SPMDETR".'
               goto error
            end
      end
      /*  Parent "MKEGIATAN" must exist when updating a child in "SPMDETR"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "SPMDETR".'
               goto error
            end
      end
      /*  Parent "ANTARBYR" must exist when updating a child in "SPMDETR"  */
      if update(UNITKEY) or
         update(NOSPM)
      begin
         if (select count(*)
             from   ANTARBYR t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPM = t2.NOSPM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ANTARBYR" does not exist. Cannot modify child in "SPMDETR".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "SPMDETR"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "SPMDETR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPMDETR] ENABLE TRIGGER [TU_SPMDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SPMDETRTL] on [dbo].[SPMDETRTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "SPMDETRTL"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "SPMDETRTL".'
             goto error
          end
    end
    /*  Parent "ANTARBYR" must exist when inserting a child in "SPMDETRTL"  */
    if update(UNITKEY) or
       update(NOSPM)
    begin
       if (select count(*)
           from   ANTARBYR t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPM = t2.NOSPM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "ANTARBYR". Cannot create child in "SPMDETRTL".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "SPMDETRTL"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "SPMDETRTL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPMDETRTL] ENABLE TRIGGER [TI_SPMDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SPMDETRTL] on [dbo].[SPMDETRTL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "SPMDETRTL"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "SPMDETRTL".'
               goto error
            end
      end
      /*  Parent "ANTARBYR" must exist when updating a child in "SPMDETRTL"  */
      if update(UNITKEY) or
         update(NOSPM)
      begin
         if (select count(*)
             from   ANTARBYR t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPM = t2.NOSPM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ANTARBYR" does not exist. Cannot modify child in "SPMDETRTL".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "SPMDETRTL"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "SPMDETRTL".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPMDETRTL] ENABLE TRIGGER [TU_SPMDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TI_SPMPJK] on [dbo].[SPMPJK] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "ANTARBYR" must exist when inserting a child in "SPMPJK"  */
    if update(UNITKEY) or
       update(NOSPM)
    begin
       if (select count(*)
           from   ANTARBYR t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPM = t2.NOSPM) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "ANTARBYR". Cannot create child in "SPMPJK".'
             goto error
          end
    end
    /*  Parent "JPAJAK" must exist when inserting a child in "SPMPJK"  */
    if update(PJKKEY)
    begin
       if (select count(*)
           from   JPAJAK t1, inserted t2
           where  t1.PJKKEY = t2.PJKKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JPAJAK". Cannot create child in "SPMPJK".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPMPJK] ENABLE TRIGGER [TI_SPMPJK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_SPMPJK] on [dbo].[SPMPJK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "ANTARBYR" must exist when updating a child in "SPMPJK"  */
      if update(UNITKEY) or
         update(NOSPM)
      begin
         if (select count(*)
             from   ANTARBYR t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPM = t2.NOSPM) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ANTARBYR" does not exist. Cannot modify child in "SPMPJK".'
               goto error
            end
      end
      /*  Parent "JPAJAK" must exist when updating a child in "SPMPJK"  */
      if update(PJKKEY)
      begin
         if (select count(*)
             from   JPAJAK t1, inserted t2
             where  t1.PJKKEY = t2.PJKKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JPAJAK" does not exist. Cannot modify child in "SPMPJK".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
raiserror (@errno, @errmsg,1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPMPJK] ENABLE TRIGGER [TU_SPMPJK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_SPP] on [dbo].[SPP] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "SPP" if children still exist in "SPJSPP"  */
    if exists (select 1
               from   SPJSPP t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPP = t1.NOSPP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJSPP". Cannot delete parent "SPP".'
          goto error
       end

    /*  Cannot delete parent "SPP" if children still exist in "SPPDETRTL"  */
    if exists (select 1
               from   SPPDETRTL t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPP = t1.NOSPP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPPDETRTL". Cannot delete parent "SPP".'
          goto error
       end

    /*  Cannot delete parent "SPP" if children still exist in "SPPDETR"  */
    if exists (select 1
               from   SPPDETR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPP = t1.NOSPP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPPDETR". Cannot delete parent "SPP".'
          goto error
       end

    /*  Cannot delete parent "SPP" if children still exist in "SPPDETB"  */
    if exists (select 1
               from   SPPDETB t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPP = t1.NOSPP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPPDETB". Cannot delete parent "SPP".'
          goto error
       end

    /*  Cannot delete parent "SPP" if children still exist in "SPPDETD"  */
    if exists (select 1
               from   SPPDETD t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPP = t1.NOSPP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPPDETD". Cannot delete parent "SPP".'
          goto error
       end

    /*  Cannot delete parent "SPP" if children still exist in "ANTARBYR"  */
    if exists (select 1
               from   ANTARBYR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSPP = t1.NOSPP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "ANTARBYR". Cannot delete parent "SPP".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPP] ENABLE TRIGGER [TD_SPP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SPP] on [dbo].[SPP] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "SPP"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "SPP".'
             goto error
          end
    end
    /*  Parent "SKO" must exist when inserting a child in "SPP"  */
    if update(IDXSKO)
    begin
       if (select count(*)
           from   SKO t1, inserted t2
           where  t1.IDXSKO = t2.IDXSKO) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SKO". Cannot create child in "SPP".'
             goto error
          end
    end
    /*  Parent "ZKODE" must exist when inserting a child in "SPP"  */
    if update(IDXKODE)
    begin
       if (select count(*)
           from   ZKODE t1, inserted t2
           where  t1.IDXKODE = t2.IDXKODE) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "ZKODE". Cannot create child in "SPP".'
             goto error
          end
    end
    /*  Parent "STATTRS" must exist when inserting a child in "SPP"  */
    if update(KDSTATUS)
    begin
       if (select count(*)
           from   STATTRS t1, inserted t2
           where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STATTRS". Cannot create child in "SPP".'
             goto error
          end
    end
    /*  Parent "BULAN" must exist when inserting a child in "SPP"  */
    if update(KD_BULAN)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KD_BULAN is null)
       if @numnull != @numrows
          if (select count(*)
              from   BULAN t1, inserted t2
              where  t1.KD_BULAN = t2.KD_BULAN) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BULAN". Cannot create child in "SPP".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "SPP"  */
    if update(KEYBEND)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "SPP".'
             goto error
          end
    end
    /*  Parent "DAFTPHK3" must exist when inserting a child in "SPP"  */
    if update(KDP3)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KDP3 is null)
       if @numnull != @numrows
          if (select count(*)
              from   DAFTPHK3 t1, inserted t2
              where  t1.KDP3 = t2.KDP3) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTPHK3". Cannot create child in "SPP".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "SPP"  */
--    if update(IDXTTD)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "SPP".'
--             goto error
--          end
--    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPP] ENABLE TRIGGER [TI_SPP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SPP] on [dbo].[SPP] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "SPP"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "SPP".'
               goto error
            end
      end
      /*  Parent "SKO" must exist when updating a child in "SPP"  */
      if update(IDXSKO)
      begin
         if (select count(*)
             from   SKO t1, inserted t2
             where  t1.IDXSKO = t2.IDXSKO) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SKO" does not exist. Cannot modify child in "SPP".'
               goto error
            end
      end
      /*  Parent "ZKODE" must exist when updating a child in "SPP"  */
      if update(IDXKODE)
      begin
         if (select count(*)
             from   ZKODE t1, inserted t2
             where  t1.IDXKODE = t2.IDXKODE) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ZKODE" does not exist. Cannot modify child in "SPP".'
               goto error
            end
      end
      /*  Parent "STATTRS" must exist when updating a child in "SPP"  */
      if update(KDSTATUS)
      begin
         if (select count(*)
             from   STATTRS t1, inserted t2
             where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STATTRS" does not exist. Cannot modify child in "SPP".'
               goto error
            end
      end
      /*  Parent "BULAN" must exist when updating a child in "SPP"  */
      if update(KD_BULAN)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KD_BULAN is null)
         if @numnull != @numrows
            if (select count(*)
                from   BULAN t1, inserted t2
                where  t1.KD_BULAN = t2.KD_BULAN) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BULAN" does not exist. Cannot modify child in "SPP".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "SPP"  */
      if update(KEYBEND)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "SPP".'
               goto error
            end
      end
      /*  Parent "DAFTPHK3" must exist when updating a child in "SPP"  */
      if update(KDP3)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KDP3 is null)
         if @numnull != @numrows
            if (select count(*)
                from   DAFTPHK3 t1, inserted t2
                where  t1.KDP3 = t2.KDP3) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTPHK3" does not exist. Cannot modify child in "SPP".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "SPP"  */
--      if update(IDXTTD)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDXTTD is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   JABTTD t1, inserted t2
--                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "SPP".'
--               goto error
--            end
--      end
      /*  Cannot modify parent code in "SPP" if children still exist in "SPJSPP"  */
      if update(UNITKEY) or
         update(NOSPP)
      begin
         if exists (select 1
                    from   SPJSPP t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPP = d1.NOSPP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPP != d1.NOSPP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPJSPP". Cannot modify parent code in "SPP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SPP" if children still exist in "SPPDETRTL"  */
      if update(UNITKEY) or
         update(NOSPP)
      begin
         if exists (select 1
                    from   SPPDETRTL t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPP = d1.NOSPP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPP != d1.NOSPP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPPDETRTL". Cannot modify parent code in "SPP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SPP" if children still exist in "SPPDETR"  */
      if update(UNITKEY) or
         update(NOSPP)
      begin
         if exists (select 1
                    from   SPPDETR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPP = d1.NOSPP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPP != d1.NOSPP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPPDETR". Cannot modify parent code in "SPP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SPP" if children still exist in "SPPDETB"  */
      if update(UNITKEY) or
         update(NOSPP)
      begin
         if exists (select 1
                    from   SPPDETB t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPP = d1.NOSPP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPP != d1.NOSPP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPPDETB". Cannot modify parent code in "SPP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "SPP" if children still exist in "SPPDETD"  */
      if update(UNITKEY) or
         update(NOSPP)
      begin
         if exists (select 1
                    from   SPPDETD t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPP = d1.NOSPP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPP != d1.NOSPP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPPDETD". Cannot modify parent code in "SPP".'
               goto error
            end
      end

  /*  Cannot modify parent code in "SPP" if children still exist in "ANTARBYR"  */
      if update(UNITKEY) or
         update(NOSPP)
      begin
         if exists (select 1
                    from   ANTARBYR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSPP = d1.NOSPP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSPP != d1.NOSPP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "ANTARBYR". Cannot modify parent code in "SPP".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPP] ENABLE TRIGGER [TU_SPP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SPPDETB] on [dbo].[SPPDETB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGB" must exist when inserting a child in "SPPDETB"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGB". Cannot create child in "SPPDETB".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "SPPDETB"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "SPPDETB".'
             goto error
          end
    end
    /*  Parent "SPP" must exist when inserting a child in "SPPDETB"  */
    if update(UNITKEY) or
       update(NOSPP)
    begin
       if (select count(*)
           from   SPP t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPP = t2.NOSPP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SPP". Cannot create child in "SPPDETB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPPDETB] ENABLE TRIGGER [TI_SPPDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SPPDETB] on [dbo].[SPPDETB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGB" must exist when updating a child in "SPPDETB"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGB" does not exist. Cannot modify child in "SPPDETB".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "SPPDETB"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "SPPDETB".'
               goto error
            end
      end
      /*  Parent "SPP" must exist when updating a child in "SPPDETB"  */
      if update(UNITKEY) or
         update(NOSPP)
      begin
         if (select count(*)
             from   SPP t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPP = t2.NOSPP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SPP" does not exist. Cannot modify child in "SPPDETB".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPPDETB] ENABLE TRIGGER [TU_SPPDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SPPDETD] on [dbo].[SPPDETD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGD" must exist when inserting a child in "SPPDETD"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGD". Cannot create child in "SPPDETD".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "SPPDETD"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "SPPDETD".'
             goto error
          end
    end
    /*  Parent "SPP" must exist when inserting a child in "SPPDETD"  */
    if update(UNITKEY) or
       update(NOSPP)
    begin
       if (select count(*)
           from   SPP t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPP = t2.NOSPP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SPP". Cannot create child in "SPPDETD".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPPDETD] ENABLE TRIGGER [TI_SPPDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SPPDETD] on [dbo].[SPPDETD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGD" must exist when updating a child in "SPPDETD"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGD" does not exist. Cannot modify child in "SPPDETD".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "SPPDETD"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "SPPDETD".'
               goto error
            end
      end
      /*  Parent "SPP" must exist when updating a child in "SPPDETD"  */
      if update(UNITKEY) or
         update(NOSPP)
      begin
         if (select count(*)
             from   SPP t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPP = t2.NOSPP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SPP" does not exist. Cannot modify child in "SPPDETD".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPPDETD] ENABLE TRIGGER [TU_SPPDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SPPDETR] on [dbo].[SPPDETR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "SPPDETR"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "SPPDETR".'
             goto error
          end
    end
    /*  Parent "MKEGIATAN" must exist when inserting a child in "SPPDETR"  */
    if update(KDKEGUNIT)
    begin
       if (select count(*)
           from   MKEGIATAN t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "SPPDETR".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "SPPDETR"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "SPPDETR".'
             goto error
          end
    end
    /*  Parent "SPP" must exist when inserting a child in "SPPDETR"  */
    if update(UNITKEY) or
       update(NOSPP)
    begin
       if (select count(*)
           from   SPP t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPP = t2.NOSPP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SPP". Cannot create child in "SPPDETR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPPDETR] ENABLE TRIGGER [TI_SPPDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SPPDETR] on [dbo].[SPPDETR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "SPPDETR"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "SPPDETR".'
               goto error
            end
      end
      /*  Parent "MKEGIATAN" must exist when updating a child in "SPPDETR"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "SPPDETR".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "SPPDETR"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "SPPDETR".'
               goto error
            end
      end
      /*  Parent "SPP" must exist when updating a child in "SPPDETR"  */
      if update(UNITKEY) or
         update(NOSPP)
      begin
         if (select count(*)
             from   SPP t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPP = t2.NOSPP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SPP" does not exist. Cannot modify child in "SPPDETR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPPDETR] ENABLE TRIGGER [TU_SPPDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create trigger [dbo].[TD_SPPDETRDANA] on [dbo].[SPPDETRDANA] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return


		DECLARE   @UNITKEYS CHAR(30), @NOSPPS VARCHAR(100),@MTGKEYS CHAR(30),@KDDANA CHAR(20)
    BEGIN 
	  DECLARE @HIT INT
		declare cjurnalZB cursor for
			SELECT I.UNITKEY,I.NOSPP,I.MTGKEY ,I.KDDANA  from DELETED I
		open cjurnalZB
		fetch next from cjurnalZB INTO @UNITKEYS  , @NOSPPS ,@MTGKEYS ,@KDDANA
		while @@FETCH_STATUS=0
		begin	

		  IF (SELECT COUNT(*) FROM SPPDETRDANA WHERE  UNITKEY=@UNITKEYS   AND  NOSPP=@NOSPPS )=0
		  BEGIN
		 
			DELETE   FROM SPPDETR
			WHERE  UNITKEY=@UNITKEYS   AND  NOSPP=@NOSPPS AND MTGKEY=@MTGKEYS
		  END 
		

			fetch next from cjurnalZB into @UNITKEYS  , @NOSPPS ,@MTGKEYS ,@KDDANA
		end
		close cjurnalZB
		deallocate cjurnalZB
	END


    return

/*  Errors handling  */
error:
    raiserror (@errno, @errmsg,1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[SPPDETRDANA] DISABLE TRIGGER [TD_SPPDETRDANA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_SPPDETRTL] on [dbo].[SPPDETRTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "SPPDETRTL"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "SPPDETRTL".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "SPPDETRTL"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "SPPDETRTL".'
             goto error
          end
    end
    /*  Parent "SPP" must exist when inserting a child in "SPPDETRTL"  */
    if update(UNITKEY) or
       update(NOSPP)
    begin
       if (select count(*)
           from   SPP t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSPP = t2.NOSPP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "SPP". Cannot create child in "SPPDETRTL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPPDETRTL] ENABLE TRIGGER [TI_SPPDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_SPPDETRTL] on [dbo].[SPPDETRTL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "SPPDETRTL"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "SPPDETRTL".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "SPPDETRTL"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "SPPDETRTL".'
               goto error
            end
      end
      /*  Parent "SPP" must exist when updating a child in "SPPDETRTL"  */
      if update(UNITKEY) or
         update(NOSPP)
      begin
         if (select count(*)
             from   SPP t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSPP = t2.NOSPP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'SPP" does not exist. Cannot modify child in "SPPDETRTL".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[SPPDETRTL] ENABLE TRIGGER [TU_SPPDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TD_SPPDETRTLDANA] on [dbo].[SPPDETRTLDANA] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return


		DECLARE   @UNITKEYS CHAR(30), @NOSPPS VARCHAR(100),@MTGKEYS CHAR(30),@KDDANA CHAR(20)
    BEGIN 
	  DECLARE @HIT INT
		declare cjurnalZB cursor for
			SELECT I.UNITKEY,I.NOSPP,I.MTGKEY ,I.KDDANA  from DELETED I
		open cjurnalZB
		fetch next from cjurnalZB INTO @UNITKEYS  , @NOSPPS ,@MTGKEYS ,@KDDANA
		while @@FETCH_STATUS=0
		begin	

		  IF (SELECT COUNT(*) FROM SPPDETRTLDANA WHERE  UNITKEY=@UNITKEYS AND NOSPP=@NOSPPS and MTGKEY=@MTGKEYS)=0
		  BEGIN
		 
			DELETE   FROM SPPDETRTL
			WHERE  UNITKEY=@UNITKEYS   AND  NOSPP=@NOSPPS AND MTGKEY=@MTGKEYS
		  END 
		

			fetch next from cjurnalZB into @UNITKEYS  , @NOSPPS ,@MTGKEYS ,@KDDANA
		end
		close cjurnalZB
		deallocate cjurnalZB
	END


    return

/*  Errors handling  */
error:
    raiserror (@errno, @errmsg,1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[SPPDETRTLDANA] ENABLE TRIGGER [TD_SPPDETRTLDANA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_STATTRS] on [dbo].[STATTRS] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "STATTRS" if children still exist in "SPP"  */
    if exists (select 1
               from   SPP t2, deleted t1
               where  t2.KDSTATUS = t1.KDSTATUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPP". Cannot delete parent "STATTRS".'
          goto error
       end

    /*  Cannot delete parent "STATTRS" if children still exist in "PSPJ"  */
    if exists (select 1
               from   PSPJ t2, deleted t1
               where  t2.KDSTATUS = t1.KDSTATUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PSPJ". Cannot delete parent "STATTRS".'
          goto error
       end

    /*  Cannot delete parent "STATTRS" if children still exist in "ANTARBYR"  */
    if exists (select 1
               from   ANTARBYR t2, deleted t1
               where  t2.KDSTATUS = t1.KDSTATUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "ANTARBYR". Cannot delete parent "STATTRS".'
          goto error
       end

    /*  Cannot delete parent "STATTRS" if children still exist in "SP2D"  */
    if exists (select 1
               from   SP2D t2, deleted t1
               where  t2.KDSTATUS = t1.KDSTATUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2D". Cannot delete parent "STATTRS".'
          goto error
       end

    /*  Cannot delete parent "STATTRS" if children still exist in "STS"  */
    if exists (select 1
               from   STS t2, deleted t1
               where  t2.KDSTATUS = t1.KDSTATUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "STS". Cannot delete parent "STATTRS".'
          goto error
       end

    /*  Cannot delete parent "STATTRS" if children still exist in "TBP"  */
    if exists (select 1
               from   TBP t2, deleted t1
               where  t2.KDSTATUS = t1.KDSTATUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBP". Cannot delete parent "STATTRS".'
          goto error
       end

    /*  Cannot delete parent "STATTRS" if children still exist in "BPK"  */
    if exists (select 1
               from   BPK t2, deleted t1
               where  t2.KDSTATUS = t1.KDSTATUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPK". Cannot delete parent "STATTRS".'
          goto error
       end

    /*  Cannot delete parent "STATTRS" if children still exist in "PANJAR"  */
    if exists (select 1
               from   PANJAR t2, deleted t1
               where  t2.KDSTATUS = t1.KDSTATUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PANJAR". Cannot delete parent "STATTRS".'
          goto error
       end

    /*  Cannot delete parent "STATTRS" if children still exist in "BKBANK"  */
    if exists (select 1
               from   BKBANK t2, deleted t1
               where  t2.KDSTATUS = t1.KDSTATUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKBANK". Cannot delete parent "STATTRS".'
          goto error
       end

    /*  Cannot delete parent "STATTRS" if children still exist in "BKPAJAK"  */
    if exists (select 1
               from   BKPAJAK t2, deleted t1
               where  t2.KDSTATUS = t1.KDSTATUS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKPAJAK". Cannot delete parent "STATTRS".'
          goto error
    end


 return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[STATTRS] ENABLE TRIGGER [TD_STATTRS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_STATTRS] on [dbo].[STATTRS] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "STATTRS" if children still exist in "SPP"  */
      if update(KDSTATUS)
      begin
         if exists (select 1
                    from   SPP t2, inserted i1, deleted d1
                    where  t2.KDSTATUS = d1.KDSTATUS
                     and  (i1.KDSTATUS != d1.KDSTATUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPP". Cannot modify parent code in "STATTRS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STATTRS" if children still exist in "PSPJ"  */
      if update(KDSTATUS)
      begin
         if exists (select 1
                    from   PSPJ t2, inserted i1, deleted d1
                    where  t2.KDSTATUS = d1.KDSTATUS
                     and  (i1.KDSTATUS != d1.KDSTATUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PSPJ". Cannot modify parent code in "STATTRS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STATTRS" if children still exist in "ANTARBYR"  */
      if update(KDSTATUS)
      begin
         if exists (select 1
                    from   ANTARBYR t2, inserted i1, deleted d1
                    where  t2.KDSTATUS = d1.KDSTATUS
                     and  (i1.KDSTATUS != d1.KDSTATUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "ANTARBYR". Cannot modify parent code in "STATTRS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STATTRS" if children still exist in "SP2D"  */
      if update(KDSTATUS)
      begin
         if exists (select 1
                    from   SP2D t2, inserted i1, deleted d1
                    where  t2.KDSTATUS = d1.KDSTATUS
                     and  (i1.KDSTATUS != d1.KDSTATUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2D". Cannot modify parent code in "STATTRS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STATTRS" if children still exist in "STS"  */
      if update(KDSTATUS)
      begin
         if exists (select 1
                    from   STS t2, inserted i1, deleted d1
                    where  t2.KDSTATUS = d1.KDSTATUS
                     and  (i1.KDSTATUS != d1.KDSTATUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "STS". Cannot modify parent code in "STATTRS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STATTRS" if children still exist in "TBP"  */
      if update(KDSTATUS)
      begin
         if exists (select 1
                    from   TBP t2, inserted i1, deleted d1
                    where  t2.KDSTATUS = d1.KDSTATUS
                     and  (i1.KDSTATUS != d1.KDSTATUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBP". Cannot modify parent code in "STATTRS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STATTRS" if children still exist in "BPK"  */
      if update(KDSTATUS)
      begin
         if exists (select 1
                    from   BPK t2, inserted i1, deleted d1
                    where  t2.KDSTATUS = d1.KDSTATUS
                     and  (i1.KDSTATUS != d1.KDSTATUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPK". Cannot modify parent code in "STATTRS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STATTRS" if children still exist in "PANJAR"  */
      if update(KDSTATUS)
      begin
         if exists (select 1
                    from   PANJAR t2, inserted i1, deleted d1
                    where  t2.KDSTATUS = d1.KDSTATUS
                     and  (i1.KDSTATUS != d1.KDSTATUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PANJAR". Cannot modify parent code in "STATTRS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STATTRS" if children still exist in "BKBANK"  */
      if update(KDSTATUS)
      begin
         if exists (select 1
                    from   BKBANK t2, inserted i1, deleted d1
                    where  t2.KDSTATUS = d1.KDSTATUS
                     and  (i1.KDSTATUS != d1.KDSTATUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKBANK". Cannot modify parent code in "STATTRS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STATTRS" if children still exist in "BKPAJAK"  */
      if update(KDSTATUS)
      begin
         if exists (select 1
                    from   BKPAJAK t2, inserted i1, deleted d1
                    where  t2.KDSTATUS = d1.KDSTATUS
                     and  (i1.KDSTATUS != d1.KDSTATUS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKPAJAK". Cannot modify parent code in "STATTRS".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[STATTRS] ENABLE TRIGGER [TU_STATTRS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_STDHARGA] on [dbo].[STDHARGA] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "STDHARGA" if children still exist in "RASKDETD"  */
    if exists (select 1
               from   RASKDETD t2, deleted t1
               where  t2.IDSTDHARGA = t1.IDSTDHARGA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKDETD". Cannot delete parent "STDHARGA".'
          goto error
       end

    /*  Cannot delete parent "STDHARGA" if children still exist in "RASKDETB"  */
    if exists (select 1
               from   RASKDETB t2, deleted t1
               where  t2.IDSTDHARGA = t1.IDSTDHARGA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKDETB". Cannot delete parent "STDHARGA".'
          goto error
       end

    /*  Cannot delete parent "STDHARGA" if children still exist in "RASKDETRTL"  */
    if exists (select 1
               from   RASKDETRTL t2, deleted t1
               where  t2.IDSTDHARGA = t1.IDSTDHARGA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKDETRTL". Cannot delete parent "STDHARGA".'
          goto error
       end

    /*  Cannot delete parent "STDHARGA" if children still exist in "RASKDETR"  */
    if exists (select 1
               from   RASKDETR t2, deleted t1
               where  t2.IDSTDHARGA = t1.IDSTDHARGA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKDETR". Cannot delete parent "STDHARGA".'
          goto error
       end

    /*  Cannot delete parent "STDHARGA" if children still exist in "DASKDETD"  */
    if exists (select 1
               from   DASKDETD t2, deleted t1
               where  t2.IDSTDHARGA = t1.IDSTDHARGA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKDETD". Cannot delete parent "STDHARGA".'
          goto error
       end

    /*  Cannot delete parent "STDHARGA" if children still exist in "DASKDETB"  */
    if exists (select 1
               from   DASKDETB t2, deleted t1
               where  t2.IDSTDHARGA = t1.IDSTDHARGA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKDETB". Cannot delete parent "STDHARGA".'
          goto error
       end

    /*  Cannot delete parent "STDHARGA" if children still exist in "DASKDETRTL"  */
    if exists (select 1
               from   DASKDETRTL t2, deleted t1
               where  t2.IDSTDHARGA = t1.IDSTDHARGA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKDETRTL". Cannot delete parent "STDHARGA".'
          goto error
       end

    /*  Cannot delete parent "STDHARGA" if children still exist in "DASKDETR"  */
    if exists (select 1
               from   DASKDETR t2, deleted t1
               where  t2.IDSTDHARGA = t1.IDSTDHARGA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKDETR". Cannot delete parent "STDHARGA".'
          goto error
       end

    /*  Cannot delete parent "STDHARGA" if children still exist in "SALDODETD"  */
    if exists (select 1
               from   SALDODETD t2, deleted t1
               where  t2.IDSTDHARGA = t1.IDSTDHARGA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDODETD". Cannot delete parent "STDHARGA".'
          goto error
       end

    /*  Cannot delete parent "STDHARGA" if children still exist in "SALDODETB"  */
    if exists (select 1
               from   SALDODETB t2, deleted t1
               where  t2.IDSTDHARGA = t1.IDSTDHARGA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDODETB". Cannot delete parent "STDHARGA".'
          goto error
       end

    /*  Cannot delete parent "STDHARGA" if children still exist in "SALDODETRTL"  */
    if exists (select 1
               from   SALDODETRTL t2, deleted t1
               where  t2.IDSTDHARGA = t1.IDSTDHARGA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDODETRTL". Cannot delete parent "STDHARGA".'
          goto error
       end

    /*  Cannot delete parent "STDHARGA" if children still exist in "SALDODETR"  */
    if exists (select 1
               from   SALDODETR t2, deleted t1
               where  t2.IDSTDHARGA = t1.IDSTDHARGA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SALDODETR". Cannot delete parent "STDHARGA".'
          goto error
       end

    /*  Cannot delete parent "STDHARGA" if children still exist in "STDHARGAR"  */
    if exists (select 1
               from   STDHARGAR t2, deleted t1
               where  t2.IDSTDHARGA = t1.IDSTDHARGA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "STDHARGAR". Cannot delete parent "STDHARGA".'
          goto error
       end

    /*  Cannot delete parent "STDHARGA" if children still exist in "STDHARGAD"  */
    if exists (select 1
               from   STDHARGAD t2, deleted t1
               where  t2.IDSTDHARGA = t1.IDSTDHARGA)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "STDHARGAD". Cannot delete parent "STDHARGA".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[STDHARGA] ENABLE TRIGGER [TD_STDHARGA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_STDHARGA] on [dbo].[STDHARGA] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "JSTANDAR" must exist when inserting a child in "STDHARGA"  */
    if update(KDJNSSTD)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KDJNSSTD is null)
       if @numnull != @numrows
          if (select count(*)
              from   JSTANDAR t1, inserted t2
              where  t1.KDJNSSTD = t2.KDJNSSTD) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JSTANDAR". Cannot create child in "STDHARGA".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[STDHARGA] ENABLE TRIGGER [TI_STDHARGA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_STDHARGA] on [dbo].[STDHARGA] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "JSTANDAR" must exist when updating a child in "STDHARGA"  */
      if update(KDJNSSTD)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KDJNSSTD is null)
         if @numnull != @numrows
            if (select count(*)
                from   JSTANDAR t1, inserted t2
                where  t1.KDJNSSTD = t2.KDJNSSTD) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'JSTANDAR" does not exist. Cannot modify child in "STDHARGA".'
               goto error
            end
      end
      /*  Cannot modify parent code in "STDHARGA" if children still exist in "RASKDETD"  */
      if update(IDSTDHARGA)
      begin
         if exists (select 1
                    from   RASKDETD t2, inserted i1, deleted d1
                    where  t2.IDSTDHARGA = d1.IDSTDHARGA
                     and  (i1.IDSTDHARGA != d1.IDSTDHARGA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKDETD". Cannot modify parent code in "STDHARGA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STDHARGA" if children still exist in "RASKDETB"  */
      if update(IDSTDHARGA)
      begin
         if exists (select 1
                    from   RASKDETB t2, inserted i1, deleted d1
                    where  t2.IDSTDHARGA = d1.IDSTDHARGA
                     and  (i1.IDSTDHARGA != d1.IDSTDHARGA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKDETB". Cannot modify parent code in "STDHARGA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STDHARGA" if children still exist in "RASKDETRTL"  */
      if update(IDSTDHARGA)
      begin
         if exists (select 1
                    from   RASKDETRTL t2, inserted i1, deleted d1
                    where  t2.IDSTDHARGA = d1.IDSTDHARGA
                     and  (i1.IDSTDHARGA != d1.IDSTDHARGA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKDETRTL". Cannot modify parent code in "STDHARGA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STDHARGA" if children still exist in "RASKDETR"  */
      if update(IDSTDHARGA)
      begin
         if exists (select 1
                    from   RASKDETR t2, inserted i1, deleted d1
                    where  t2.IDSTDHARGA = d1.IDSTDHARGA
                     and  (i1.IDSTDHARGA != d1.IDSTDHARGA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKDETR". Cannot modify parent code in "STDHARGA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STDHARGA" if children still exist in "DASKDETD"  */
      if update(IDSTDHARGA)
      begin
         if exists (select 1
                    from   DASKDETD t2, inserted i1, deleted d1
                    where  t2.IDSTDHARGA = d1.IDSTDHARGA
                     and  (i1.IDSTDHARGA != d1.IDSTDHARGA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKDETD". Cannot modify parent code in "STDHARGA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STDHARGA" if children still exist in "DASKDETB"  */
      if update(IDSTDHARGA)
      begin
         if exists (select 1
                    from   DASKDETB t2, inserted i1, deleted d1
                    where  t2.IDSTDHARGA = d1.IDSTDHARGA
                     and  (i1.IDSTDHARGA != d1.IDSTDHARGA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKDETB". Cannot modify parent code in "STDHARGA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STDHARGA" if children still exist in "DASKDETRTL"  */
      if update(IDSTDHARGA)
      begin
         if exists (select 1
                    from   DASKDETRTL t2, inserted i1, deleted d1
                    where  t2.IDSTDHARGA = d1.IDSTDHARGA
                     and  (i1.IDSTDHARGA != d1.IDSTDHARGA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKDETRTL". Cannot modify parent code in "STDHARGA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STDHARGA" if children still exist in "DASKDETR"  */
      if update(IDSTDHARGA)
      begin
         if exists (select 1
                    from   DASKDETR t2, inserted i1, deleted d1
                    where  t2.IDSTDHARGA = d1.IDSTDHARGA
                     and  (i1.IDSTDHARGA != d1.IDSTDHARGA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKDETR". Cannot modify parent code in "STDHARGA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STDHARGA" if children still exist in "SALDODETD"  */
      if update(IDSTDHARGA)
      begin
         if exists (select 1
                    from   SALDODETD t2, inserted i1, deleted d1
                    where  t2.IDSTDHARGA = d1.IDSTDHARGA
                     and  (i1.IDSTDHARGA != d1.IDSTDHARGA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDODETD". Cannot modify parent code in "STDHARGA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STDHARGA" if children still exist in "SALDODETB"  */
      if update(IDSTDHARGA)
      begin
         if exists (select 1
                    from   SALDODETB t2, inserted i1, deleted d1
                    where  t2.IDSTDHARGA = d1.IDSTDHARGA
                     and  (i1.IDSTDHARGA != d1.IDSTDHARGA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDODETB". Cannot modify parent code in "STDHARGA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STDHARGA" if children still exist in "SALDODETRTL"  */
      if update(IDSTDHARGA)
      begin
         if exists (select 1
                    from   SALDODETRTL t2, inserted i1, deleted d1
                    where  t2.IDSTDHARGA = d1.IDSTDHARGA
                     and  (i1.IDSTDHARGA != d1.IDSTDHARGA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDODETRTL". Cannot modify parent code in "STDHARGA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STDHARGA" if children still exist in "SALDODETR"  */
      if update(IDSTDHARGA)
      begin
         if exists (select 1
                    from   SALDODETR t2, inserted i1, deleted d1
                    where  t2.IDSTDHARGA = d1.IDSTDHARGA
                     and  (i1.IDSTDHARGA != d1.IDSTDHARGA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SALDODETR". Cannot modify parent code in "STDHARGA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STDHARGA" if children still exist in "STDHARGAR"  */
      if update(IDSTDHARGA)
      begin
         if exists (select 1
                    from   STDHARGAR t2, inserted i1, deleted d1
                    where  t2.IDSTDHARGA = d1.IDSTDHARGA
                     and  (i1.IDSTDHARGA != d1.IDSTDHARGA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "STDHARGAR". Cannot modify parent code in "STDHARGA".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STDHARGA" if children still exist in "STDHARGAD"  */
      if update(IDSTDHARGA)
      begin
         if exists (select 1
                    from   STDHARGAD t2, inserted i1, deleted d1
                    where  t2.IDSTDHARGA = d1.IDSTDHARGA
                     and  (i1.IDSTDHARGA != d1.IDSTDHARGA))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "STDHARGAD". Cannot modify parent code in "STDHARGA".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[STDHARGA] ENABLE TRIGGER [TU_STDHARGA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_STDHARGAD] on [dbo].[STDHARGAD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "STDHARGA" must exist when inserting a child in "STDHARGAD"  */
    if update(IDSTDHARGA)
    begin
       if (select count(*)
           from   STDHARGA t1, inserted t2
           where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STDHARGA". Cannot create child in "STDHARGAD".'
             goto error
          end
    end
    /*  Parent "MATANGD" must exist when inserting a child in "STDHARGAD"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGD". Cannot create child in "STDHARGAD".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[STDHARGAD] ENABLE TRIGGER [TI_STDHARGAD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_STDHARGAD] on [dbo].[STDHARGAD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "STDHARGA" must exist when updating a child in "STDHARGAD"  */
      if update(IDSTDHARGA)
      begin
         if (select count(*)
             from   STDHARGA t1, inserted t2
             where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STDHARGA" does not exist. Cannot modify child in "STDHARGAD".'
               goto error
            end
      end
      /*  Parent "MATANGD" must exist when updating a child in "STDHARGAD"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGD" does not exist. Cannot modify child in "STDHARGAD".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[STDHARGAD] ENABLE TRIGGER [TU_STDHARGAD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_STDHARGAR] on [dbo].[STDHARGAR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "STDHARGA" must exist when inserting a child in "STDHARGAR"  */
    if update(IDSTDHARGA)
    begin
       if (select count(*)
           from   STDHARGA t1, inserted t2
           where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STDHARGA". Cannot create child in "STDHARGAR".'
             goto error
          end
    end
    /*  Parent "MATANGR" must exist when inserting a child in "STDHARGAR"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "STDHARGAR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[STDHARGAR] ENABLE TRIGGER [TI_STDHARGAR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_STDHARGAR] on [dbo].[STDHARGAR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "STDHARGA" must exist when updating a child in "STDHARGAR"  */
      if update(IDSTDHARGA)
      begin
         if (select count(*)
             from   STDHARGA t1, inserted t2
             where  t1.IDSTDHARGA = t2.IDSTDHARGA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STDHARGA" does not exist. Cannot modify child in "STDHARGAR".'
               goto error
            end
      end
      /*  Parent "MATANGR" must exist when updating a child in "STDHARGAR"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "STDHARGAR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[STDHARGAR] ENABLE TRIGGER [TU_STDHARGAR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_STRUREK] on [dbo].[STRUREK] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "STRUREK" if children still exist in "MATANGD"  */
    if exists (select 1
               from   MATANGD t2, deleted t1
               where  t2.MTGLEVEL = t1.MTGLEVEL)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGD". Cannot delete parent "STRUREK".'
          goto error
       end

    /*  Cannot delete parent "STRUREK" if children still exist in "MATANGR"  */
    if exists (select 1
               from   MATANGR t2, deleted t1
               where  t2.MTGLEVEL = t1.MTGLEVEL)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGR". Cannot delete parent "STRUREK".'
          goto error
       end

    /*  Cannot delete parent "STRUREK" if children still exist in "MATANGNRC"  */
    if exists (select 1
               from   MATANGNRC t2, deleted t1
               where  t2.MTGLEVEL = t1.MTGLEVEL)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGNRC". Cannot delete parent "STRUREK".'
          goto error
       end

    /*  Cannot delete parent "STRUREK" if children still exist in "MATANGB"  */
    if exists (select 1
               from   MATANGB t2, deleted t1
               where  t2.MTGLEVEL = t1.MTGLEVEL)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGB". Cannot delete parent "STRUREK".'
          goto error
       end

    /*  Cannot delete parent "STRUREK" if children still exist in "MATANGDLRA"  */
    if exists (select 1
               from   MATANGDLRA t2, deleted t1
               where  t2.MTGLEVEL = t1.MTGLEVEL)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGDLRA". Cannot delete parent "STRUREK".'
          goto error
       end

    /*  Cannot delete parent "STRUREK" if children still exist in "MATANGRLRA"  */
    if exists (select 1
               from   MATANGRLRA t2, deleted t1
               where  t2.MTGLEVEL = t1.MTGLEVEL)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGRLRA". Cannot delete parent "STRUREK".'
          goto error
       end

    /*  Cannot delete parent "STRUREK" if children still exist in "MATANGBLRA"  */
    if exists (select 1
               from   MATANGBLRA t2, deleted t1
               where  t2.MTGLEVEL = t1.MTGLEVEL)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGBLRA". Cannot delete parent "STRUREK".'
          goto error
       end

    /*  Cannot delete parent "STRUREK" if children still exist in "MATANGDLAK"  */
    if exists (select 1
               from   MATANGDLAK t2, deleted t1
               where  t2.MTGLEVEL = t1.MTGLEVEL)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGDLAK". Cannot delete parent "STRUREK".'
          goto error
       end

    /*  Cannot delete parent "STRUREK" if children still exist in "MATANGRLAK"  */
    if exists (select 1
               from   MATANGRLAK t2, deleted t1
               where  t2.MTGLEVEL = t1.MTGLEVEL)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGRLAK". Cannot delete parent "STRUREK".'
          goto error
       end

    /*  Cannot delete parent "STRUREK" if children still exist in "MATANGBLAK"  */
    if exists (select 1
               from   MATANGBLAK t2, deleted t1
               where  t2.MTGLEVEL = t1.MTGLEVEL)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "MATANGBLAK". Cannot delete parent "STRUREK".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[STRUREK] ENABLE TRIGGER [TD_STRUREK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_STRUREK] on [dbo].[STRUREK] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "STRUREK" if children still exist in "MATANGD"  */
      if update(MTGLEVEL)
      begin
         if exists (select 1
                    from   MATANGD t2, inserted i1, deleted d1
                    where  t2.MTGLEVEL = d1.MTGLEVEL
                     and  (i1.MTGLEVEL != d1.MTGLEVEL))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGD". Cannot modify parent code in "STRUREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STRUREK" if children still exist in "MATANGR"  */
      if update(MTGLEVEL)
      begin
         if exists (select 1
                    from   MATANGR t2, inserted i1, deleted d1
                    where  t2.MTGLEVEL = d1.MTGLEVEL
                     and  (i1.MTGLEVEL != d1.MTGLEVEL))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGR". Cannot modify parent code in "STRUREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STRUREK" if children still exist in "MATANGNRC"  */
      if update(MTGLEVEL)
      begin
         if exists (select 1
                    from   MATANGNRC t2, inserted i1, deleted d1
                    where  t2.MTGLEVEL = d1.MTGLEVEL
                     and  (i1.MTGLEVEL != d1.MTGLEVEL))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGNRC". Cannot modify parent code in "STRUREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STRUREK" if children still exist in "MATANGB"  */
      if update(MTGLEVEL)
      begin
         if exists (select 1
                    from   MATANGB t2, inserted i1, deleted d1
                    where  t2.MTGLEVEL = d1.MTGLEVEL
                     and  (i1.MTGLEVEL != d1.MTGLEVEL))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGB". Cannot modify parent code in "STRUREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STRUREK" if children still exist in "MATANGDLRA"  */
      if update(MTGLEVEL)
      begin
         if exists (select 1
                    from   MATANGDLRA t2, inserted i1, deleted d1
                    where  t2.MTGLEVEL = d1.MTGLEVEL
                     and  (i1.MTGLEVEL != d1.MTGLEVEL))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGDLRA". Cannot modify parent code in "STRUREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STRUREK" if children still exist in "MATANGRLRA"  */
      if update(MTGLEVEL)
      begin
         if exists (select 1
                    from   MATANGRLRA t2, inserted i1, deleted d1
                    where  t2.MTGLEVEL = d1.MTGLEVEL
                     and  (i1.MTGLEVEL != d1.MTGLEVEL))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGRLRA". Cannot modify parent code in "STRUREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STRUREK" if children still exist in "MATANGBLRA"  */
      if update(MTGLEVEL)
      begin
         if exists (select 1
                    from   MATANGBLRA t2, inserted i1, deleted d1
                    where  t2.MTGLEVEL = d1.MTGLEVEL
                     and  (i1.MTGLEVEL != d1.MTGLEVEL))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGBLRA". Cannot modify parent code in "STRUREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STRUREK" if children still exist in "MATANGDLAK"  */
      if update(MTGLEVEL)
      begin
         if exists (select 1
                    from   MATANGDLAK t2, inserted i1, deleted d1
                    where  t2.MTGLEVEL = d1.MTGLEVEL
                     and  (i1.MTGLEVEL != d1.MTGLEVEL))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGDLAK". Cannot modify parent code in "STRUREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STRUREK" if children still exist in "MATANGRLAK"  */
      if update(MTGLEVEL)
      begin
         if exists (select 1
                    from   MATANGRLAK t2, inserted i1, deleted d1
                    where  t2.MTGLEVEL = d1.MTGLEVEL
                     and  (i1.MTGLEVEL != d1.MTGLEVEL))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGRLAK". Cannot modify parent code in "STRUREK".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STRUREK" if children still exist in "MATANGBLAK"  */
      if update(MTGLEVEL)
      begin
         if exists (select 1
                    from   MATANGBLAK t2, inserted i1, deleted d1
                    where  t2.MTGLEVEL = d1.MTGLEVEL
                     and  (i1.MTGLEVEL != d1.MTGLEVEL))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "MATANGBLAK". Cannot modify parent code in "STRUREK".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[STRUREK] ENABLE TRIGGER [TU_STRUREK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_STRUUNIT] on [dbo].[STRUUNIT] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "STRUUNIT" if children still exist in "DAFTUNIT"  */
    if exists (select 1
               from   DAFTUNIT t2, deleted t1
               where  t2.KDLEVEL = t1.KDLEVEL)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DAFTUNIT". Cannot delete parent "STRUUNIT".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[STRUUNIT] ENABLE TRIGGER [TD_STRUUNIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_STRUUNIT] on [dbo].[STRUUNIT] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "STRUUNIT" if children still exist in "DAFTUNIT"  */
      if update(KDLEVEL)
      begin
         if exists (select 1
                    from   DAFTUNIT t2, inserted i1, deleted d1
                    where  t2.KDLEVEL = d1.KDLEVEL
                     and  (i1.KDLEVEL != d1.KDLEVEL))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DAFTUNIT". Cannot modify parent code in "STRUUNIT".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[STRUUNIT] ENABLE TRIGGER [TU_STRUUNIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_STS] on [dbo].[STS] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "STS" if children still exist in "BKUD"  */
    if exists (select 1
               from   BKUD t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSTS = t1.NOSTS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUD". Cannot delete parent "STS".'
          goto error
       end

    /*  Cannot delete parent "STS" if children still exist in "TBPSTS"  */
    if exists (select 1
               from   TBPSTS t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSTS = t1.NOSTS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPSTS". Cannot delete parent "STS".'
          goto error
       end

    /*  Cannot delete parent "STS" if children still exist in "RKMDETR"  */
    if exists (select 1
               from   RKMDETR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSTS = t1.NOSTS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETR". Cannot delete parent "STS".'
          goto error
       end

    /*  Cannot delete parent "STS" if children still exist in "RKMDETRTL"  */
    if exists (select 1
               from   RKMDETRTL t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSTS = t1.NOSTS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETRTL". Cannot delete parent "STS".'
          goto error
       end

    /*  Cannot delete parent "STS" if children still exist in "RKMDETB"  */
    if exists (select 1
               from   RKMDETB t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSTS = t1.NOSTS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETB". Cannot delete parent "STS".'
          goto error
       end

    /*  Cannot delete parent "STS" if children still exist in "RKMDETD"  */
    if exists (select 1
               from   RKMDETD t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSTS = t1.NOSTS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETD". Cannot delete parent "STS".'
          goto error
       end

    /*  Cannot delete parent "STS" if children still exist in "RKMDETT"  */
    if exists (select 1
               from   RKMDETT t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSTS = t1.NOSTS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RKMDETT". Cannot delete parent "STS".'
          goto error
       end

    /*  Cannot delete parent "STS" if children still exist in "SPJSTS"  */
    if exists (select 1
               from   SPJSTS t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSTS = t1.NOSTS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPJSTS". Cannot delete parent "STS".'
          goto error
       end

    /*  Cannot delete parent "STS" if children still exist in "BKUSTS"  */
    if exists (select 1
               from   BKUSTS t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOSTS = t1.NOSTS)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUSTS". Cannot delete parent "STS".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[STS] ENABLE TRIGGER [TD_STS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_STS] on [dbo].[STS] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "ZKODE" must exist when inserting a child in "STS"  */
    if update(IDXKODE)
    begin
       if (select count(*)
           from   ZKODE t1, inserted t2
           where  t1.IDXKODE = t2.IDXKODE) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "ZKODE". Cannot create child in "STS".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "STS"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "STS".'
             goto error
          end
    end
    /*  Parent "BKBKAS" must exist when inserting a child in "STS"  */
    if update(NOBBANTU)
    begin
       if (select count(*)
           from   BKBKAS t1, inserted t2
           where  t1.NOBBANTU = t2.NOBBANTU) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BKBKAS". Cannot create child in "STS".'
             goto error
          end
    end
    /*  Parent "STATTRS" must exist when inserting a child in "STS"  */
    if update(KDSTATUS)
    begin
       if (select count(*)
           from   STATTRS t1, inserted t2
           where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STATTRS". Cannot create child in "STS".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "STS"  */
    if update(KEYBEND1)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND1 is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND1) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "STS".'
             goto error
          end
    end
    /*  Parent "JABTTD" must exist when inserting a child in "STS"  */
--    if update(IDXTTD)
--    begin
--       select @numnull = (select count(*)
--                          from   inserted
--                          where  IDXTTD is null)
--       if @numnull != @numrows
--          if (select count(*)
--              from   JABTTD t1, inserted t2
--              where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--          begin
--             select @errno  = 50002,
--                    @errmsg = 'Parent does not exist in "JABTTD". Cannot create child in "STS".'
--             goto error
--          end
--    end
    /*  Parent "BEND" must exist when inserting a child in "STS"  */
    if update(KEYBEND2)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND2 is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND2) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "STS".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback transaction
end
GO
ALTER TABLE [dbo].[STS] ENABLE TRIGGER [TI_STS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_STS] on [dbo].[STS] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "ZKODE" must exist when updating a child in "STS"  */
      if update(IDXKODE)
      begin
         if (select count(*)
             from   ZKODE t1, inserted t2
             where  t1.IDXKODE = t2.IDXKODE) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ZKODE" does not exist. Cannot modify child in "STS".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "STS"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "STS".'
               goto error
            end
      end
      /*  Parent "BKBKAS" must exist when updating a child in "STS"  */
      if update(NOBBANTU)
      begin
         if (select count(*)
             from   BKBKAS t1, inserted t2
             where  t1.NOBBANTU = t2.NOBBANTU) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BKBKAS" does not exist. Cannot modify child in "STS".'
               goto error
            end
      end
      /*  Parent "STATTRS" must exist when updating a child in "STS"  */
      if update(KDSTATUS)
      begin
         if (select count(*)
             from   STATTRS t1, inserted t2
             where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STATTRS" does not exist. Cannot modify child in "STS".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "STS"  */
      if update(KEYBEND1)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND1 is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND1) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "STS".'
               goto error
            end
      end
      /*  Parent "JABTTD" must exist when updating a child in "STS"  */
--      if update(IDXTTD)
--      begin
--         select @numnull = (select count(*)
--                            from   inserted
--                            where  IDXTTD is null)
--         if @numnull != @numrows
--            if (select count(*)
--                from   JABTTD t1, inserted t2
--                where  t1.IDXTTD = t2.IDXTTD) != @numrows - @numnull
--            begin
--               select @errno  = 50003,
--                      @errmsg = 'JABTTD" does not exist. Cannot modify child in "STS".'
--               goto error
--            end
--      end
      /*  Parent "BEND" must exist when updating a child in "STS"  */
      if update(KEYBEND2)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND2 is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND2) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "STS".'
               goto error
            end
      end
      /*  Cannot modify parent code in "STS" if children still exist in "BKUD"  */
      if update(UNITKEY) or
         update(NOSTS)
      begin
         if exists (select 1
                    from   BKUD t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSTS = d1.NOSTS
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSTS != d1.NOSTS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUD". Cannot modify parent code in "STS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STS" if children still exist in "TBPSTS"  */
      if update(UNITKEY) or
         update(NOSTS)
      begin
         if exists (select 1
                    from   TBPSTS t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSTS = d1.NOSTS
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSTS != d1.NOSTS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPSTS". Cannot modify parent code in "STS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STS" if children still exist in "RKMDETR"  */
      if update(UNITKEY) or
         update(NOSTS)
      begin
         if exists (select 1
                    from   RKMDETR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSTS = d1.NOSTS
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSTS != d1.NOSTS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETR". Cannot modify parent code in "STS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STS" if children still exist in "RKMDETRTL"  */
      if update(UNITKEY) or
         update(NOSTS)
      begin
         if exists (select 1
                    from   RKMDETRTL t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSTS = d1.NOSTS
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSTS != d1.NOSTS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETRTL". Cannot modify parent code in "STS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STS" if children still exist in "RKMDETB"  */
      if update(UNITKEY) or
         update(NOSTS)
      begin
         if exists (select 1
                    from   RKMDETB t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSTS = d1.NOSTS
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSTS != d1.NOSTS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETB". Cannot modify parent code in "STS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STS" if children still exist in "RKMDETD"  */
      if update(UNITKEY) or
         update(NOSTS)
      begin
         if exists (select 1
                    from   RKMDETD t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSTS = d1.NOSTS
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSTS != d1.NOSTS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETD". Cannot modify parent code in "STS".'
  goto error
            end
      end

      /*  Cannot modify parent code in "STS" if children still exist in "RKMDETT"  */
      if update(UNITKEY) or
         update(NOSTS)
      begin
         if exists (select 1
                    from   RKMDETT t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSTS = d1.NOSTS
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSTS != d1.NOSTS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RKMDETT". Cannot modify parent code in "STS".'
               goto error
            end
      end

      /*  Cannot modify parent code in "STS" if children still exist in "BKUSTS"  */
      if update(UNITKEY) or
         update(NOSTS)
      begin
         if exists (select 1
                    from   BKUSTS t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOSTS = d1.NOSTS
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOSTS != d1.NOSTS))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUSTS". Cannot modify parent code in "STS".'
               goto error
            end
      end

	   if update(TGLVALID)
      declare @unitkey char(10), @NOTRANSAKSI varchar(100),@tglvalid DATETIME, @TABLENAME VARCHAR(20), @KDSTATUS VARCHAR(5), @IDXKODE INT
       
      begin
		declare CJURNAL1 cursor for
			select unitkey,NOSTS ,tglvalid,'STS' TABLENAME ,@KDSTATUS,@IDXKODE from inserted
		open CJURNAL1
		fetch next from CJURNAL1 into @unitkey,@NOTRANSAKSI,@tglvalid,@TABLENAME,@KDSTATUS,@IDXKODE
		while @@FETCH_STATUS=0
		begin	
			if @tglvalid is not null
			begin
				exec WSPZ_BKUAUTO @unitkey,@NOTRANSAKSI,@tglvalid,@TABLENAME,@KDSTATUS,@IDXKODE
			end  else
			if @tglvalid is null
			BEGIN
				DELETE FROM BKUD WHERE UNITKEY= @unitkey AND NOSTS=@NOTRANSAKSI
			END 
			
			fetch next from CJURNAL1 into @unitkey,@NOTRANSAKSI,@tglvalid,@TABLENAME,@KDSTATUS,@IDXKODE
		end
		close CJURNAL1
		deallocate CJURNAL1
      END
      







      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[STS] ENABLE TRIGGER [TU_STS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_TAHAP] on [dbo].[TAHAP] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "TAHAP" if children still exist in "TTAPD"  */
    if exists (select 1
               from   TTAPD t2, deleted t1
               where  t2.KDTAHAP = t1.KDTAHAP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TTAPD". Cannot delete parent "TAHAP".'
          goto error
       end

    /*  Cannot delete parent "TAHAP" if children still exist in "PGRMUNIT"  */
    if exists (select 1
               from   PGRMUNIT t2, deleted t1
               where  t2.KDTAHAP = t1.KDTAHAP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PGRMUNIT". Cannot delete parent "TAHAP".'
          goto error
       end

    /*  Cannot delete parent "TAHAP" if children still exist in "KINKEG"  */
    if exists (select 1
               from   KINKEG t2, deleted t1
               where  t2.KDTAHAP = t1.KDTAHAP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KINKEG". Cannot delete parent "TAHAP".'
          goto error
       end

    /*  Cannot delete parent "TAHAP" if children still exist in "RASKR"  */
    if exists (select 1
               from   RASKR t2, deleted t1
               where  t2.KDTAHAP = t1.KDTAHAP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKR". Cannot delete parent "TAHAP".'
          goto error
       end

    /*  Cannot delete parent "TAHAP" if children still exist in "RASKD"  */
    if exists (select 1
               from   RASKD t2, deleted t1
               where  t2.KDTAHAP = t1.KDTAHAP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKD". Cannot delete parent "TAHAP".'
          goto error
       end

    /*  Cannot delete parent "TAHAP" if children still exist in "RASKRTL"  */
    if exists (select 1
               from   RASKRTL t2, deleted t1
               where  t2.KDTAHAP = t1.KDTAHAP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKRTL". Cannot delete parent "TAHAP".'
          goto error
       end

    /*  Cannot delete parent "TAHAP" if children still exist in "RASKB"  */
    if exists (select 1
               from   RASKB t2, deleted t1
               where  t2.KDTAHAP = t1.KDTAHAP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "RASKB". Cannot delete parent "TAHAP".'
          goto error
       end

    /*  Cannot delete parent "TAHAP" if children still exist in "SKDASK"  */
    if exists (select 1
               from   SKDASK t2, deleted t1
               where  t2.KDTAHAP = t1.KDTAHAP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKDASK". Cannot delete parent "TAHAP".'
          goto error
       end

    /*  Cannot delete parent "TAHAP" if children still exist in "WEBUSER"  */
    if exists (select 1
               from   WEBUSER t2, deleted t1
               where  t2.KDTAHAP = t1.KDTAHAP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "WEBUSER". Cannot delete parent "TAHAP".'
          goto error
       end

    /*  Cannot delete parent "TAHAP" if children still exist in "TAHAPSAH"  */
    if exists (select 1
               from   TAHAPSAH t2, deleted t1
               where  t2.KDTAHAP = t1.KDTAHAP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TAHAPSAH". Cannot delete parent "TAHAP".'
          goto error
       end

    /*  Cannot delete parent "TAHAP" if children still exist in "KASKEG"  */
    if exists (select 1
               from   KASKEG t2, deleted t1
               where  t2.KDTAHAP = t1.KDTAHAP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "KASKEG". Cannot delete parent "TAHAP".'
          goto error
       end

    /*  Cannot delete parent "TAHAP" if children still exist in "SBDANAKEG"  */
    if exists (select 1
               from   SBDANAKEG t2, deleted t1
               where  t2.KDTAHAP = t1.KDTAHAP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SBDANAKEG". Cannot delete parent "TAHAP".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TAHAP] ENABLE TRIGGER [TD_TAHAP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_TAHAP] on [dbo].[TAHAP] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "TAHAP" if children still exist in "TTAPD"  */
      if update(KDTAHAP)
      begin
         if exists (select 1
                    from   TTAPD t2, inserted i1, deleted d1
                    where  t2.KDTAHAP = d1.KDTAHAP
                     and  (i1.KDTAHAP != d1.KDTAHAP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TTAPD". Cannot modify parent code in "TAHAP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "TAHAP" if children still exist in "PGRMUNIT"  */
      if update(KDTAHAP)
      begin
         if exists (select 1
                    from   PGRMUNIT t2, inserted i1, deleted d1
                    where  t2.KDTAHAP = d1.KDTAHAP
                     and  (i1.KDTAHAP != d1.KDTAHAP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PGRMUNIT". Cannot modify parent code in "TAHAP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "TAHAP" if children still exist in "KINKEG"  */
      if update(KDTAHAP)
      begin
         if exists (select 1
                    from   KINKEG t2, inserted i1, deleted d1
                    where  t2.KDTAHAP = d1.KDTAHAP
                     and  (i1.KDTAHAP != d1.KDTAHAP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "KINKEG". Cannot modify parent code in "TAHAP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "TAHAP" if children still exist in "RASKR"  */
      if update(KDTAHAP)
      begin
         if exists (select 1
                    from   RASKR t2, inserted i1, deleted d1
                    where  t2.KDTAHAP = d1.KDTAHAP
                     and  (i1.KDTAHAP != d1.KDTAHAP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKR". Cannot modify parent code in "TAHAP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "TAHAP" if children still exist in "RASKD"  */
      if update(KDTAHAP)
      begin
         if exists (select 1
                    from   RASKD t2, inserted i1, deleted d1
                    where  t2.KDTAHAP = d1.KDTAHAP
                     and  (i1.KDTAHAP != d1.KDTAHAP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKD". Cannot modify parent code in "TAHAP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "TAHAP" if children still exist in "RASKRTL"  */
      if update(KDTAHAP)
      begin
         if exists (select 1
                    from   RASKRTL t2, inserted i1, deleted d1
                    where  t2.KDTAHAP = d1.KDTAHAP
                     and  (i1.KDTAHAP != d1.KDTAHAP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKRTL". Cannot modify parent code in "TAHAP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "TAHAP" if children still exist in "RASKB"  */
      if update(KDTAHAP)
      begin
         if exists (select 1
                    from   RASKB t2, inserted i1, deleted d1
                    where  t2.KDTAHAP = d1.KDTAHAP
                     and  (i1.KDTAHAP != d1.KDTAHAP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "RASKB". Cannot modify parent code in "TAHAP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "TAHAP" if children still exist in "SKDASK"  */
      if update(KDTAHAP)
      begin
         if exists (select 1
                    from   SKDASK t2, inserted i1, deleted d1
                    where  t2.KDTAHAP = d1.KDTAHAP
                     and  (i1.KDTAHAP != d1.KDTAHAP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKDASK". Cannot modify parent code in "TAHAP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "TAHAP" if children still exist in "WEBUSER"  */
      if update(KDTAHAP)
      begin
         if exists (select 1
                    from   WEBUSER t2, inserted i1, deleted d1
                    where  t2.KDTAHAP = d1.KDTAHAP
                     and  (i1.KDTAHAP != d1.KDTAHAP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "WEBUSER". Cannot modify parent code in "TAHAP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "TAHAP" if children still exist in "TAHAPSAH"  */
      if update(KDTAHAP)
      begin
         if exists (select 1
                    from   TAHAPSAH t2, inserted i1, deleted d1
                    where  t2.KDTAHAP = d1.KDTAHAP
                     and  (i1.KDTAHAP != d1.KDTAHAP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TAHAPSAH". Cannot modify parent code in "TAHAP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "TAHAP" if children still exist in "KASKEG"  */
      if update(KDTAHAP)
      begin
         if exists (select 1
                    from   KASKEG t2, inserted i1, deleted d1
                    where  t2.KDTAHAP = d1.KDTAHAP
                     and  (i1.KDTAHAP != d1.KDTAHAP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "KASKEG". Cannot modify parent code in "TAHAP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "TAHAP" if children still exist in "SBDANAKEG"  */
      if update(KDTAHAP)
      begin
         if exists (select 1
                    from   SBDANAKEG t2, inserted i1, deleted d1
                    where  t2.KDTAHAP = d1.KDTAHAP
                     and  (i1.KDTAHAP != d1.KDTAHAP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SBDANAKEG". Cannot modify parent code in "TAHAP".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TAHAP] ENABLE TRIGGER [TU_TAHAP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_TAHAPSAH] on [dbo].[TAHAPSAH] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "TAHAP" must exist when inserting a child in "TAHAPSAH"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "TAHAPSAH".'
             goto error
          end
    end
    /*  Parent "DOKSAH" must exist when inserting a child in "TAHAPSAH"  */
    if update(KDDOKSAH)
    begin
       if (select count(*)
           from   DOKSAH t1, inserted t2
           where  t1.KDDOKSAH = t2.KDDOKSAH) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DOKSAH". Cannot create child in "TAHAPSAH".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TAHAPSAH] ENABLE TRIGGER [TI_TAHAPSAH]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_TAHAPSAH] on [dbo].[TAHAPSAH] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "TAHAP" must exist when updating a child in "TAHAPSAH"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "TAHAPSAH".'
               goto error
            end
      end
      /*  Parent "DOKSAH" must exist when updating a child in "TAHAPSAH"  */
      if update(KDDOKSAH)
      begin
         if (select count(*)
             from   DOKSAH t1, inserted t2
             where  t1.KDDOKSAH = t2.KDDOKSAH) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DOKSAH" does not exist. Cannot modify child in "TAHAPSAH".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TAHAPSAH] ENABLE TRIGGER [TU_TAHAPSAH]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TD_TAHUN] on [dbo].[TAHUN] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "TAHUN" if children still exist in "DASKL"  */
    if exists (select 1
               from   DASKL t2, deleted t1
               where  t2.KDTAHUN = t1.KDTAHUN)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DASKL". Cannot delete parent "TAHUN".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
END
GO
ALTER TABLE [dbo].[TAHUN] ENABLE TRIGGER [TD_TAHUN]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[TU_TAHUN] on [dbo].[TAHUN] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "TAHUN" if children still exist in "DASKL"  */
      if update(KDTAHUN)
      begin
         if exists (select 1
                    from   DASKL t2, inserted i1, deleted d1
                    where  t2.KDTAHUN = d1.KDTAHUN
                     and  (i1.KDTAHUN != d1.KDTAHUN))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DASKL". Cannot modify parent code in "TAHUN".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TAHUN] ENABLE TRIGGER [TU_TAHUN]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TD_TBP] on [dbo].[TBP] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "TBP" if children still exist in "TBPSTS"  */
    if exists (select 1
               from   TBPSTS t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOTBP = t1.NOTBP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPSTS". Cannot delete parent "TBP".'
          goto error
       end

    /*  Cannot delete parent "TBP" if children still exist in "TBPDETR"  */
    if exists (select 1
               from   TBPDETR t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOTBP = t1.NOTBP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPDETR". Cannot delete parent "TBP".'
          goto error
       end

    /*  Cannot delete parent "TBP" if children still exist in "TBPDETRTL"  */
    if exists (select 1
               from   TBPDETRTL t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOTBP = t1.NOTBP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPDETRTL". Cannot delete parent "TBP".'
          goto error
       end

    /*  Cannot delete parent "TBP" if children still exist in "TBPDETB"  */
    if exists (select 1
               from   TBPDETB t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOTBP = t1.NOTBP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPDETB". Cannot delete parent "TBP".'
          goto error
       end

    /*  Cannot delete parent "TBP" if children still exist in "TBPDETD"  */
    if exists (select 1
               from   TBPDETD t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOTBP = t1.NOTBP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPDETD". Cannot delete parent "TBP".'
          goto error
       end

    /*  Cannot delete parent "TBP" if children still exist in "TBPDETT"  */
    if exists (select 1
               from   TBPDETT t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOTBP = t1.NOTBP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPDETT". Cannot delete parent "TBP".'
          goto error
       END
       
         /*  Cannot delete parent "TBP" if children still exist in "TBPDETTKEG"  */
    if exists (select 1
               from   TBPDETTKEG t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOTBP = t1.NOTBP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBPDETTKEG". Cannot delete parent "TBP".'
          goto error
       end  
       

    /*  Cannot delete parent "TBP" if children still exist in "BKUTBP"  */
    if exists (select 1
               from   BKUTBP t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOTBP = t1.NOTBP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUTBP". Cannot delete parent "TBP".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[TBP] ENABLE TRIGGER [TD_TBP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_TBP] on [dbo].[TBP] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "TBP"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "TBP".'
             goto error
          end
    end
    /*  Parent "ZKODE" must exist when inserting a child in "TBP"  */
    if update(IDXKODE)
    begin
       if (select count(*)
           from   ZKODE t1, inserted t2
           where  t1.IDXKODE = t2.IDXKODE) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "ZKODE". Cannot create child in "TBP".'
             goto error
          end
    end
    /*  Parent "STATTRS" must exist when inserting a child in "TBP"  */
    if update(KDSTATUS)
    begin
       if (select count(*)
           from   STATTRS t1, inserted t2
           where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STATTRS". Cannot create child in "TBP".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "TBP"  */
    if update(KEYBEND2)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND2 is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND2) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "TBP".'
             goto error
          end
    end
    /*  Parent "BEND" must exist when inserting a child in "TBP"  */
    if update(KEYBEND1)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  KEYBEND1 is null)
       if @numnull != @numrows
          if (select count(*)
              from   BEND t1, inserted t2
              where  t1.KEYBEND = t2.KEYBEND1) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "TBP".'
             goto error
          end
    end

    return


/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TBP] ENABLE TRIGGER [TI_TBP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE trigger [dbo].[TU_TBP] on [dbo].[TBP] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "TBP"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "TBP".'
               goto error
            end
      end
      /*  Parent "ZKODE" must exist when updating a child in "TBP"  */
      if update(IDXKODE)
      begin
         if (select count(*)
             from   ZKODE t1, inserted t2
             where  t1.IDXKODE = t2.IDXKODE) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'ZKODE" does not exist. Cannot modify child in "TBP".'
               goto error
            end
      end
      /*  Parent "STATTRS" must exist when updating a child in "TBP"  */
      if update(KDSTATUS)
      begin
         if (select count(*)
             from   STATTRS t1, inserted t2
             where  t1.KDSTATUS = t2.KDSTATUS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STATTRS" does not exist. Cannot modify child in "TBP".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "TBP"  */
      if update(KEYBEND2)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND2 is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND2) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "TBP".'
               goto error
            end
      end
      /*  Parent "BEND" must exist when updating a child in "TBP"  */
      if update(KEYBEND1)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  KEYBEND1 is null)
         if @numnull != @numrows
            if (select count(*)
                from   BEND t1, inserted t2
                where  t1.KEYBEND = t2.KEYBEND1) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "TBP".'
               goto error
            end
      end
      /*  Cannot modify parent code in "TBP" if children still exist in "TBPSTS"  */
      if update(UNITKEY) or
         update(NOTBP)
      begin
         if exists (select 1
                    from   TBPSTS t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOTBP = d1.NOTBP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOTBP != d1.NOTBP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPSTS". Cannot modify parent code in "TBP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "TBP" if children still exist in "TBPDETR"  */
      if update(UNITKEY) or
         update(NOTBP)
      begin
         if exists (select 1
                    from   TBPDETR t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOTBP = d1.NOTBP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOTBP != d1.NOTBP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPDETR". Cannot modify parent code in "TBP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "TBP" if children still exist in "TBPDETRTL"  */
      if update(UNITKEY) or
         update(NOTBP)
      begin
         if exists (select 1
                    from   TBPDETRTL t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOTBP = d1.NOTBP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOTBP != d1.NOTBP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPDETRTL". Cannot modify parent code in "TBP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "TBP" if children still exist in "TBPDETB"  */
      if update(UNITKEY) or
         update(NOTBP)
      begin
         if exists (select 1
                    from   TBPDETB t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOTBP = d1.NOTBP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOTBP != d1.NOTBP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPDETB". Cannot modify parent code in "TBP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "TBP" if children still exist in "TBPDETD"  */
      if update(UNITKEY) or
         update(NOTBP)
      begin
         if exists (select 1
                    from   TBPDETD t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOTBP = d1.NOTBP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOTBP != d1.NOTBP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPDETD". Cannot modify parent code in "TBP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "TBP" if children still exist in "TBPDETT"  */
      if update(UNITKEY) or
         update(NOTBP)
      begin
         if exists (select 1
                    from   TBPDETT t2, inserted i1, deleted d1
                    where  t2.UNITKEY = d1.UNITKEY
                     and   t2.NOTBP = d1.NOTBP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOTBP != d1.NOTBP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBPDETT". Cannot modify parent code in "TBP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "TBP" if children still exist in "BKUTBP"  */
      if update(UNITKEY) or
         update(NOTBP)
      begin
         if exists (select 1
                    from   BKUTBP t2, inserted i1, deleted d1
                    where  t2.NOTBP = d1.NOTBP
                     and  (i1.UNITKEY != d1.UNITKEY
                      or   i1.NOTBP != d1.NOTBP))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BKUTBP". Cannot modify parent code in "TBP".'
               goto error
            end
      end

	  if update(TGLVALID)
      declare @unitkey char(10), @NOTRANSAKSI varchar(100),@tglvalid DATETIME, @TABLENAME VARCHAR(20), @KDSTATUS VARCHAR(5), @IDXKODE INT
       
      begin
		declare CJURNALz cursor for
			select unitkey,NOTBP ,tglvalid,'TBP' TABLENAME ,@KDSTATUS,@IDXKODE from inserted WHERE IDXKODE NOT IN (6)
		open CJURNALz
		fetch next from CJURNALz into @unitkey,@NOTRANSAKSI,@tglvalid,@TABLENAME,@KDSTATUS,@IDXKODE
		while @@FETCH_STATUS=0
		begin	
			if @tglvalid is not null  
			begin
				exec WSPZ_BKUAUTO @unitkey,@NOTRANSAKSI,@tglvalid,@TABLENAME,@KDSTATUS,@IDXKODE
				
			end  else
			if @tglvalid is null   
			BEGIN
				DELETE FROM BKUTBP   WHERE UNITKEY= @unitkey AND NOTBP=@NOTRANSAKSI AND  LTRIM(RTRIM(UNITKEY))+LTRIM(RTRIM(NOTBP)) IN (SELECT LTRIM(RTRIM(UNITKEY))+LTRIM(RTRIM(NOTBP))  FROM TBP WHERE UNITKEY= @unitkey AND NOTBP=@NOTRANSAKSI AND IDXKODE<>6)
			END 

			fetch next from CJURNALz into @unitkey,@NOTRANSAKSI,@tglvalid,@TABLENAME,@KDSTATUS,@IDXKODE
		end
		close CJURNALz
		deallocate CJURNALz
      END


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end


GO
ALTER TABLE [dbo].[TBP] ENABLE TRIGGER [TU_TBP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_TBPDETB] on [dbo].[TBPDETB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGB" must exist when inserting a child in "TBPDETB"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGB". Cannot create child in "TBPDETB".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "TBPDETB"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "TBPDETB".'
             goto error
          end
    end
    /*  Parent "TBP" must exist when inserting a child in "TBPDETB"  */
    if update(UNITKEY) or
       update(NOTBP)
    begin
       if (select count(*)
           from   TBP t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOTBP = t2.NOTBP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TBP". Cannot create child in "TBPDETB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TBPDETB] ENABLE TRIGGER [TI_TBPDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_TBPDETB] on [dbo].[TBPDETB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGB" must exist when updating a child in "TBPDETB"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGB" does not exist. Cannot modify child in "TBPDETB".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "TBPDETB"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "TBPDETB".'
               goto error
            end
      end
      /*  Parent "TBP" must exist when updating a child in "TBPDETB"  */
      if update(UNITKEY) or
         update(NOTBP)
      begin
         if (select count(*)
             from   TBP t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOTBP = t2.NOTBP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TBP" does not exist. Cannot modify child in "TBPDETB".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TBPDETB] ENABLE TRIGGER [TU_TBPDETB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_TBPDETD] on [dbo].[TBPDETD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGD" must exist when inserting a child in "TBPDETD"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGD". Cannot create child in "TBPDETD".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "TBPDETD"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "TBPDETD".'
             goto error
          end
    end
    /*  Parent "TBP" must exist when inserting a child in "TBPDETD"  */
    if update(UNITKEY) or
       update(NOTBP)
    begin
       if (select count(*)
           from   TBP t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOTBP = t2.NOTBP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TBP". Cannot create child in "TBPDETD".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TBPDETD] ENABLE TRIGGER [TI_TBPDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_TBPDETD] on [dbo].[TBPDETD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGD" must exist when updating a child in "TBPDETD"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGD" does not exist. Cannot modify child in "TBPDETD".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "TBPDETD"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "TBPDETD".'
               goto error
            end
      end
      /*  Parent "TBP" must exist when updating a child in "TBPDETD"  */
      if update(UNITKEY) or
         update(NOTBP)
      begin
         if (select count(*)
             from   TBP t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOTBP = t2.NOTBP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TBP" does not exist. Cannot modify child in "TBPDETD".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TBPDETD] ENABLE TRIGGER [TU_TBPDETD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_TBPDETR] on [dbo].[TBPDETR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "TBPDETR"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "TBPDETR".'
             goto error
          end
    end
    /*  Parent "MKEGIATAN" must exist when inserting a child in "TBPDETR"  */
    if update(KDKEGUNIT)
    begin
       if (select count(*)
           from   MKEGIATAN t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "TBPDETR".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "TBPDETR"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "TBPDETR".'
             goto error
          end
    end
    /*  Parent "TBP" must exist when inserting a child in "TBPDETR"  */
    if update(UNITKEY) or
       update(NOTBP)
    begin
       if (select count(*)
           from   TBP t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOTBP = t2.NOTBP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TBP". Cannot create child in "TBPDETR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TBPDETR] ENABLE TRIGGER [TI_TBPDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_TBPDETR] on [dbo].[TBPDETR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "TBPDETR"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "TBPDETR".'
               goto error
            end
      end
      /*  Parent "MKEGIATAN" must exist when updating a child in "TBPDETR"  */
      if update(KDKEGUNIT)
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "TBPDETR".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "TBPDETR"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "TBPDETR".'
               goto error
            end
      end
      /*  Parent "TBP" must exist when updating a child in "TBPDETR"  */
      if update(UNITKEY) or
         update(NOTBP)
      begin
         if (select count(*)
             from   TBP t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOTBP = t2.NOTBP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TBP" does not exist. Cannot modify child in "TBPDETR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TBPDETR] ENABLE TRIGGER [TU_TBPDETR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_TBPDETRTL] on [dbo].[TBPDETRTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "TBPDETRTL"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "TBPDETRTL".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "TBPDETRTL"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "TBPDETRTL".'
             goto error
          end
    end
    /*  Parent "TBP" must exist when inserting a child in "TBPDETRTL"  */
    if update(UNITKEY) or
       update(NOTBP)
    begin
       if (select count(*)
           from   TBP t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOTBP = t2.NOTBP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TBP". Cannot create child in "TBPDETRTL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TBPDETRTL] ENABLE TRIGGER [TI_TBPDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_TBPDETRTL] on [dbo].[TBPDETRTL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "TBPDETRTL"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "TBPDETRTL".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "TBPDETRTL"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "TBPDETRTL".'
               goto error
            end
      end
      /*  Parent "TBP" must exist when updating a child in "TBPDETRTL"  */
      if update(UNITKEY) or
         update(NOTBP)
      begin
         if (select count(*)
             from   TBP t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOTBP = t2.NOTBP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TBP" does not exist. Cannot modify child in "TBPDETRTL".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TBPDETRTL] ENABLE TRIGGER [TU_TBPDETRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_TBPDETT] on [dbo].[TBPDETT] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "BEND" must exist when inserting a child in "TBPDETT"  */
    if update(KEYBEND)
    begin
       if (select count(*)
           from   BEND t1, inserted t2
           where  t1.KEYBEND = t2.KEYBEND) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "BEND". Cannot create child in "TBPDETT".'
             goto error
          end
    end
    /*  Parent "JTRNLKAS" must exist when inserting a child in "TBPDETT"  */
    if update(NOJETRA)
    begin
       if (select count(*)
           from   JTRNLKAS t1, inserted t2
           where  t1.NOJETRA = t2.NOJETRA) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JTRNLKAS". Cannot create child in "TBPDETT".'
             goto error
          end
    end
    /*  Parent "TBP" must exist when inserting a child in "TBPDETT"  */
    if update(UNITKEY) or
       update(NOTBP)
    begin
       if (select count(*)
           from   TBP t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOTBP = t2.NOTBP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TBP". Cannot create child in "TBPDETT".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TBPDETT] ENABLE TRIGGER [TI_TBPDETT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_TBPDETT] on [dbo].[TBPDETT] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "BEND" must exist when updating a child in "TBPDETT"  */
      if update(KEYBEND)
      begin
         if (select count(*)
             from   BEND t1, inserted t2
             where  t1.KEYBEND = t2.KEYBEND) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'BEND" does not exist. Cannot modify child in "TBPDETT".'
               goto error
            end
      end
      /*  Parent "JTRNLKAS" must exist when updating a child in "TBPDETT"  */
      if update(NOJETRA)
      begin
         if (select count(*)
             from   JTRNLKAS t1, inserted t2
             where  t1.NOJETRA = t2.NOJETRA) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JTRNLKAS" does not exist. Cannot modify child in "TBPDETT".'
               goto error
            end
      end
      /*  Parent "TBP" must exist when updating a child in "TBPDETT"  */
      if update(UNITKEY) or
         update(NOTBP)
      begin
         if (select count(*)
             from   TBP t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOTBP = t2.NOTBP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TBP" does not exist. Cannot modify child in "TBPDETT".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TBPDETT] ENABLE TRIGGER [TU_TBPDETT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE trigger [dbo].[TD_TBPSTS] on [dbo].[TBPSTS] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return



   
    /*  Cannot delete parent "STS" if children still exist in "BKUSTS"  */
    if exists (select 1
               from   BKUTBP t2, deleted t1
               where  t2.UNITKEY = t1.UNITKEY
                and   t2.NOTBP = t1.NOTBP)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BKUTBP". Cannot delete parent "TBPSTS".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end

GO
ALTER TABLE [dbo].[TBPSTS] ENABLE TRIGGER [TD_TBPSTS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_TBPSTS] on [dbo].[TBPSTS] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "STS" must exist when inserting a child in "TBPSTS"  */
    if update(UNITKEY) or
       update(NOSTS)
    begin
       if (select count(*)
           from   STS t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOSTS = t2.NOSTS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "STS". Cannot create child in "TBPSTS".'
             goto error
          end
    end
    /*  Parent "TBP" must exist when inserting a child in "TBPSTS"  */
    if update(UNITKEY) or
       update(NOTBP)
    begin
       if (select count(*)
           from   TBP t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY
            and   t1.NOTBP = t2.NOTBP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TBP". Cannot create child in "TBPSTS".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TBPSTS] ENABLE TRIGGER [TI_TBPSTS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_TBPSTS] on [dbo].[TBPSTS] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "STS" must exist when updating a child in "TBPSTS"  */
      if update(UNITKEY) or
         update(NOSTS)
      begin
         if (select count(*)
             from   STS t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOSTS = t2.NOSTS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'STS" does not exist. Cannot modify child in "TBPSTS".'
               goto error
            end
      end
      /*  Parent "TBP" must exist when updating a child in "TBPSTS"  */
      if update(UNITKEY) or
         update(NOTBP)
      begin
         if (select count(*)
             from   TBP t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY
              and   t1.NOTBP = t2.NOTBP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TBP" does not exist. Cannot modify child in "TBPSTS".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TBPSTS] ENABLE TRIGGER [TU_TBPSTS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_TTAPD] on [dbo].[TTAPD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "PEGAWAI" must exist when inserting a child in "TTAPD"  */
    if update(NIP)
    begin
       if (select count(*)
           from   PEGAWAI t1, inserted t2
           where  t1.NIP = t2.NIP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PEGAWAI". Cannot create child in "TTAPD".'
             goto error
          end
    end
    /*  Parent "TAHAP" must exist when inserting a child in "TTAPD"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "TTAPD".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "TTAPD"  */
    if update(UNITKEY)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  UNITKEY is null)
       if @numnull != @numrows
          if (select count(*)
              from   DAFTUNIT t1, inserted t2
              where  t1.UNITKEY = t2.UNITKEY) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "TTAPD".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TTAPD] ENABLE TRIGGER [TI_TTAPD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_TTAPD] on [dbo].[TTAPD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "PEGAWAI" must exist when updating a child in "TTAPD"  */
      if update(NIP)
      begin
         if (select count(*)
             from   PEGAWAI t1, inserted t2
             where  t1.NIP = t2.NIP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PEGAWAI" does not exist. Cannot modify child in "TTAPD".'
               goto error
            end
      end
      /*  Parent "TAHAP" must exist when updating a child in "TTAPD"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "TTAPD".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "TTAPD"  */
      if update(UNITKEY)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  UNITKEY is null)
         if @numnull != @numrows
            if (select count(*)
                from   DAFTUNIT t1, inserted t2
                where  t1.UNITKEY = t2.UNITKEY) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "TTAPD".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TTAPD] ENABLE TRIGGER [TU_TTAPD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_TTAPDR] on [dbo].[TTAPDR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "TTAPDR"  */
    if (update(UNITKEY)
      and (select top 1 UNITKEY from inserted) <> '')
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "TTAPDR".'
             goto error
          end
    end
    /*  Parent "PEGAWAI" must exist when inserting a child in "TTAPDR"  */
    if update(NIP)
    begin
       if (select count(*)
           from   PEGAWAI t1, inserted t2
           where  t1.NIP = t2.NIP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PEGAWAI". Cannot create child in "TTAPDR".'
             goto error
          end
    end
    /*  Parent "TAHAP" must exist when inserting a child in "TTAPDR"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "TTAPDR".'
             goto error
          end
    end
    /*  Parent "MKEGIATAN" must exist when inserting a child in "TTAPDR"  */
    if (update(KDKEGUNIT)
      and (select top 1 KDKEGUNIT from inserted) <> '')
    begin
       if (select count(*)
           from   MKEGIATAN t1, inserted t2
           where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MKEGIATAN". Cannot create child in "TTAPDR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
END




GO
ALTER TABLE [dbo].[TTAPDR] ENABLE TRIGGER [TI_TTAPDR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TU_TTAPDR] on [dbo].[TTAPDR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "TTAPDR"  */
      if (update(UNITKEY)
        and (select top 1 UNITKEY from inserted) <> '')
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "TTAPDR".'
               goto error
            end
      end
      /*  Parent "PEGAWAI" must exist when updating a child in "TTAPDR"  */
      if update(NIP)
      begin
         if (select count(*)
             from   PEGAWAI t1, inserted t2
             where  t1.NIP = t2.NIP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PEGAWAI" does not exist. Cannot modify child in "TTAPDR".'
               goto error
            end
      end
      /*  Parent "TAHAP" must exist when updating a child in "TTAPDR"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "TTAPDR".'
               goto error
            end
      end
      /*  Parent "MKEGIATAN" must exist when updating a child in "TTAPDR"  */
      if (update(KDKEGUNIT)
        and (select top 1 KDKEGUNIT from inserted) <> '')
      begin
         if (select count(*)
             from   MKEGIATAN t1, inserted t2
             where  t1.KDKEGUNIT = t2.KDKEGUNIT) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MKEGIATAN" does not exist. Cannot modify child in "TTAPDR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TTAPDR] ENABLE TRIGGER [TU_TTAPDR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_TUPB] on [dbo].[TUPB] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "JURTUP" must exist when inserting a child in "TUPB"  */
    if update(NOTUTUP)
    begin
       if (select count(*)
           from   JURTUP t1, inserted t2
           where  t1.NOTUTUP = t2.NOTUTUP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JURTUP". Cannot create child in "TUPB".'
             goto error
          end
    end
    /*  Parent "PERSACC" must exist when inserting a child in "TUPB"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "TUPB".'
             goto error
          end
    end
    /*  Parent "MATANGB" must exist when inserting a child in "TUPB"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGB t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGB". Cannot create child in "TUPB".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TUPB] ENABLE TRIGGER [TI_TUPB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_TUPB] on [dbo].[TUPB] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "JURTUP" must exist when updating a child in "TUPB"  */
      if update(NOTUTUP)
      begin
         if (select count(*)
             from   JURTUP t1, inserted t2
             where  t1.NOTUTUP = t2.NOTUTUP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JURTUP" does not exist. Cannot modify child in "TUPB".'
               goto error
            end
      end
      /*  Parent "PERSACC" must exist when updating a child in "TUPB"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "TUPB".'
               goto error
            end
      end
      /*  Parent "MATANGB" must exist when updating a child in "TUPB"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGB t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGB" does not exist. Cannot modify child in "TUPB".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TUPB] ENABLE TRIGGER [TU_TUPB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_TUPD] on [dbo].[TUPD] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "JURTUP" must exist when inserting a child in "TUPD"  */
    if update(NOTUTUP)
    begin
       if (select count(*)
           from   JURTUP t1, inserted t2
           where  t1.NOTUTUP = t2.NOTUTUP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JURTUP". Cannot create child in "TUPD".'
             goto error
          end
    end
    /*  Parent "PERSACC" must exist when inserting a child in "TUPD"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "TUPD".'
             goto error
          end
    end
    /*  Parent "MATANGD" must exist when inserting a child in "TUPD"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGD t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGD". Cannot create child in "TUPD".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TUPD] ENABLE TRIGGER [TI_TUPD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_TUPD] on [dbo].[TUPD] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "JURTUP" must exist when updating a child in "TUPD"  */
      if update(NOTUTUP)
      begin
         if (select count(*)
             from   JURTUP t1, inserted t2
             where  t1.NOTUTUP = t2.NOTUTUP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JURTUP" does not exist. Cannot modify child in "TUPD".'
               goto error
            end
      end
      /*  Parent "PERSACC" must exist when updating a child in "TUPD"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "TUPD".'
               goto error
            end
      end
      /*  Parent "MATANGD" must exist when updating a child in "TUPD"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGD t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGD" does not exist. Cannot modify child in "TUPD".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TUPD] ENABLE TRIGGER [TU_TUPD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_TUPR] on [dbo].[TUPR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "JURTUP" must exist when inserting a child in "TUPR"  */
    if update(NOTUTUP)
    begin
       if (select count(*)
           from   JURTUP t1, inserted t2
           where  t1.NOTUTUP = t2.NOTUTUP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "JURTUP". Cannot create child in "TUPR".'
             goto error
          end
    end
    /*  Parent "PERSACC" must exist when inserting a child in "TUPR"  */
    if update(KDPERS)
    begin
       if (select count(*)
           from   PERSACC t1, inserted t2
           where  t1.KDPERS = t2.KDPERS) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PERSACC". Cannot create child in "TUPR".'
             goto error
          end
    end
    /*  Parent "MATANGR" must exist when inserting a child in "TUPR"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "TUPR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TUPR] ENABLE TRIGGER [TI_TUPR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_TUPR] on [dbo].[TUPR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "JURTUP" must exist when updating a child in "TUPR"  */
      if update(NOTUTUP)
      begin
         if (select count(*)
             from   JURTUP t1, inserted t2
             where  t1.NOTUTUP = t2.NOTUTUP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'JURTUP" does not exist. Cannot modify child in "TUPR".'
               goto error
            end
      end
      /*  Parent "PERSACC" must exist when updating a child in "TUPR"  */
      if update(KDPERS)
      begin
         if (select count(*)
             from   PERSACC t1, inserted t2
             where  t1.KDPERS = t2.KDPERS) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'PERSACC" does not exist. Cannot modify child in "TUPR".'
               goto error
            end
      end
      /*  Parent "MATANGR" must exist when updating a child in "TUPR"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "TUPR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[TUPR] ENABLE TRIGGER [TU_TUPR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_URUSANUNIT] on [dbo].[URUSANUNIT] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "DAFTUNIT" must exist when inserting a child in "URUSANUNIT"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "URUSANUNIT".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "URUSANUNIT"  */
    if update(URUSKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.URUSKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "URUSANUNIT".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[URUSANUNIT] ENABLE TRIGGER [TI_URUSANUNIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_URUSANUNIT] on [dbo].[URUSANUNIT] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "DAFTUNIT" must exist when updating a child in "URUSANUNIT"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "URUSANUNIT".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "URUSANUNIT"  */
      if update(URUSKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.URUSKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "URUSANUNIT".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[URUSANUNIT] ENABLE TRIGGER [TU_URUSANUNIT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TI_URUSRTL] on [dbo].[URUSRTL] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "MATANGR" must exist when inserting a child in "URUSRTL"  */
    if update(MTGKEY)
    begin
       if (select count(*)
           from   MATANGR t1, inserted t2
           where  t1.MTGKEY = t2.MTGKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "MATANGR". Cannot create child in "URUSRTL".'
             goto error
          end
    end

    /*  Parent "DAFTUNIT" must exist when inserting a child in "URUSRTL"  */
    if update(UNITKEY)
    begin
       if (select count(*)
           from   DAFTUNIT t1, inserted t2
           where  t1.UNITKEY = t2.UNITKEY) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "URUSRTL".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[URUSRTL] ENABLE TRIGGER [TI_URUSRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TU_URUSRTL] on [dbo].[URUSRTL] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "MATANGR" must exist when updating a child in "URUSRTL"  */
      if update(MTGKEY)
      begin
         if (select count(*)
             from   MATANGR t1, inserted t2
             where  t1.MTGKEY = t2.MTGKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'MATANGR" does not exist. Cannot modify child in "URUSRTL".'
               goto error
            end
      END
      
      /*  Parent "DAFTUNIT" must exist when updating a child in "URUSRTL"  */
      if update(UNITKEY)
      begin
         if (select count(*)
             from   DAFTUNIT t1, inserted t2
             where  t1.UNITKEY = t2.UNITKEY) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "URUSRTL".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end





set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
GO
ALTER TABLE [dbo].[URUSRTL] ENABLE TRIGGER [TU_URUSRTL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_WEBERROR] on [dbo].[WEBERROR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "WEBROLE" must exist when inserting a child in "WEBERROR"  */
    if update(ROLEID)
    begin
       if (select count(*)
           from   WEBROLE t1, inserted t2
           where  t1.ROLEID = t2.ROLEID) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "WEBROLE". Cannot create child in "WEBERROR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[WEBERROR] ENABLE TRIGGER [TI_WEBERROR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_WEBERROR] on [dbo].[WEBERROR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "WEBROLE" must exist when updating a child in "WEBERROR"  */
      if update(ROLEID)
      begin
         if (select count(*)
             from   WEBROLE t1, inserted t2
             where  t1.ROLEID = t2.ROLEID) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'WEBROLE" does not exist. Cannot modify child in "WEBERROR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[WEBERROR] ENABLE TRIGGER [TU_WEBERROR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_WEBGROUP] on [dbo].[WEBGROUP] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "WEBGROUP" if children still exist in "WEBUSER"  */
    if exists (select 1
               from   WEBUSER t2, deleted t1
               where  t2.GROUPID = t1.GROUPID)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "WEBUSER". Cannot delete parent "WEBGROUP".'
          goto error
       end

    /*  Cannot delete parent "WEBGROUP" if children still exist in "WEBOTOR"  */
    if exists (select 1
               from   WEBOTOR t2, deleted t1
               where  t2.GROUPID = t1.GROUPID)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "WEBOTOR". Cannot delete parent "WEBGROUP".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[WEBGROUP] ENABLE TRIGGER [TD_WEBGROUP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_WEBGROUP] on [dbo].[WEBGROUP] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "WEBGROUP" if children still exist in "WEBUSER"  */
      if update(GROUPID)
      begin
         if exists (select 1
                    from   WEBUSER t2, inserted i1, deleted d1
                    where  t2.GROUPID = d1.GROUPID
                     and  (i1.GROUPID != d1.GROUPID))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "WEBUSER". Cannot modify parent code in "WEBGROUP".'
               goto error
            end
      end

      /*  Cannot modify parent code in "WEBGROUP" if children still exist in "WEBOTOR"  */
      if update(GROUPID)
      begin
         if exists (select 1
                    from   WEBOTOR t2, inserted i1, deleted d1
                    where  t2.GROUPID = d1.GROUPID
                     and  (i1.GROUPID != d1.GROUPID))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "WEBOTOR". Cannot modify parent code in "WEBGROUP".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[WEBGROUP] ENABLE TRIGGER [TU_WEBGROUP]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_WEBOTOR] on [dbo].[WEBOTOR] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "WEBGROUP" must exist when inserting a child in "WEBOTOR"  */
    if update(GROUPID)
    begin
       if (select count(*)
           from   WEBGROUP t1, inserted t2
           where  t1.GROUPID = t2.GROUPID) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "WEBGROUP". Cannot create child in "WEBOTOR".'
             goto error
          end
    end
    /*  Parent "WEBROLE" must exist when inserting a child in "WEBOTOR"  */
    if update(ROLEID)
    begin
       if (select count(*)
           from   WEBROLE t1, inserted t2
           where  t1.ROLEID = t2.ROLEID) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "WEBROLE". Cannot create child in "WEBOTOR".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[WEBOTOR] ENABLE TRIGGER [TI_WEBOTOR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_WEBOTOR] on [dbo].[WEBOTOR] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "WEBGROUP" must exist when updating a child in "WEBOTOR"  */
      if update(GROUPID)
      begin
         if (select count(*)
             from   WEBGROUP t1, inserted t2
             where  t1.GROUPID = t2.GROUPID) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'WEBGROUP" does not exist. Cannot modify child in "WEBOTOR".'
               goto error
            end
      end
      /*  Parent "WEBROLE" must exist when updating a child in "WEBOTOR"  */
      if update(ROLEID)
      begin
         if (select count(*)
             from   WEBROLE t1, inserted t2
             where  t1.ROLEID = t2.ROLEID) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'WEBROLE" does not exist. Cannot modify child in "WEBOTOR".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[WEBOTOR] ENABLE TRIGGER [TU_WEBOTOR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE trigger [dbo].[TD_WEBROLE] on [dbo].[WEBROLE] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "WEBROLE" if children still exist in "WEBOTOR"  */
    if exists (select 1
               from   WEBOTOR t2, deleted t1
               where  t2.ROLEID = t1.ROLEID)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "WEBOTOR". Cannot delete parent "WEBROLE".'
          goto error
       end

    /*  Cannot delete parent "WEBROLE" if children still exist in "WEBERROR"  */
    if exists (select 1
               from   WEBERROR t2, deleted t1
               where  t2.ROLEID = t1.ROLEID)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "WEBERROR". Cannot delete parent "WEBROLE".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end







GO
ALTER TABLE [dbo].[WEBROLE] ENABLE TRIGGER [TD_WEBROLE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_WEBROLE] on [dbo].[WEBROLE] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "WEBROLE" if children still exist in "WEBOTOR"  */
      if update(ROLEID)
      begin
         if exists (select 1
                    from   WEBOTOR t2, inserted i1, deleted d1
                    where  t2.ROLEID = d1.ROLEID
                     and  (i1.ROLEID != d1.ROLEID))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "WEBOTOR". Cannot modify parent code in "WEBROLE".'
               goto error
            end
      end

      /*  Cannot modify parent code in "WEBROLE" if children still exist in "WEBERROR"  */
      if update(ROLEID)
      begin
         if exists (select 1
                    from   WEBERROR t2, inserted i1, deleted d1
                    where  t2.ROLEID = d1.ROLEID
                     and  (i1.ROLEID != d1.ROLEID))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "WEBERROR". Cannot modify parent code in "WEBROLE".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[WEBROLE] ENABLE TRIGGER [TU_WEBROLE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TI_WEBUSER] on [dbo].[WEBUSER] for insert as
begin
    declare
       @numrows  int,
       @numnull  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Parent "TAHAP" must exist when inserting a child in "WEBUSER"  */
    if update(KDTAHAP)
    begin
       if (select count(*)
           from   TAHAP t1, inserted t2
           where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "TAHAP". Cannot create child in "WEBUSER".'
             goto error
          end
    end
    /*  Parent "WEBGROUP" must exist when inserting a child in "WEBUSER"  */
    if update(GROUPID)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  GROUPID is null)
       if @numnull != @numrows
          if (select count(*)
              from   WEBGROUP t1, inserted t2
              where  t1.GROUPID = t2.GROUPID) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "WEBGROUP". Cannot create child in "WEBUSER".'
             goto error
          end
    end
    /*  Parent "PEGAWAI" must exist when inserting a child in "WEBUSER"  */
    if update(NIP)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  NIP is null)
       if @numnull != @numrows
          if (select count(*)
              from   PEGAWAI t1, inserted t2
              where  t1.NIP = t2.NIP) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "PEGAWAI". Cannot create child in "WEBUSER".'
             goto error
          end
    end
    /*  Parent "DAFTUNIT" must exist when inserting a child in "WEBUSER"  */
    if update(UNITKEY)
    begin
       select @numnull = (select count(*)
                          from   inserted
                          where  UNITKEY is null)
       if @numnull != @numrows
          if (select count(*)
              from   DAFTUNIT t1, inserted t2
              where  t1.UNITKEY = t2.UNITKEY) != @numrows - @numnull
          begin
             select @errno  = 50002,
                    @errmsg = 'Parent does not exist in "DAFTUNIT". Cannot create child in "WEBUSER".'
             goto error
          end
    end

    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[WEBUSER] ENABLE TRIGGER [TI_WEBUSER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_WEBUSER] on [dbo].[WEBUSER] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Parent "TAHAP" must exist when updating a child in "WEBUSER"  */
      if update(KDTAHAP)
      begin
         if (select count(*)
             from   TAHAP t1, inserted t2
             where  t1.KDTAHAP = t2.KDTAHAP) != @numrows
            begin
               select @errno  = 50003,
                      @errmsg = 'TAHAP" does not exist. Cannot modify child in "WEBUSER".'
               goto error
            end
      end
      /*  Parent "WEBGROUP" must exist when updating a child in "WEBUSER"  */
      if update(GROUPID)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  GROUPID is null)
         if @numnull != @numrows
            if (select count(*)
                from   WEBGROUP t1, inserted t2
                where  t1.GROUPID = t2.GROUPID) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'WEBGROUP" does not exist. Cannot modify child in "WEBUSER".'
               goto error
            end
      end
      /*  Parent "PEGAWAI" must exist when updating a child in "WEBUSER"  */
      if update(NIP)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  NIP is null)
         if @numnull != @numrows
            if (select count(*)
                from   PEGAWAI t1, inserted t2
                where  t1.NIP = t2.NIP) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'PEGAWAI" does not exist. Cannot modify child in "WEBUSER".'
               goto error
            end
      end
      /*  Parent "DAFTUNIT" must exist when updating a child in "WEBUSER"  */
      if update(UNITKEY)
      begin
         select @numnull = (select count(*)
                            from   inserted
                            where  UNITKEY is null)
         if @numnull != @numrows
            if (select count(*)
                from   DAFTUNIT t1, inserted t2
                where  t1.UNITKEY = t2.UNITKEY) != @numrows - @numnull
            begin
               select @errno  = 50003,
                      @errmsg = 'DAFTUNIT" does not exist. Cannot modify child in "WEBUSER".'
               goto error
            end
      end

      return

/*  Errors handling  */
error:
    raiserror  (@errno, @errmsg, 1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[WEBUSER] ENABLE TRIGGER [TU_WEBUSER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TD_ZKODE] on [dbo].[ZKODE] for delete as
begin
    declare
       @numrows  int,
       @errno    int,
       @errmsg   varchar(255)

    select  @numrows = @@rowcount
    if @numrows = 0
       return

    /*  Cannot delete parent "ZKODE" if children still exist in "SKDASK"  */
    if exists (select 1
               from   SKDASK t2, deleted t1
               where  t2.IDXKODE = t1.IDXKODE)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKDASK". Cannot delete parent "ZKODE".'
          goto error
       end

    /*  Cannot delete parent "ZKODE" if children still exist in "SKO"  */
    if exists (select 1
               from   SKO t2, deleted t1
               where  t2.IDXKODE = t1.IDXKODE)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SKO". Cannot delete parent "ZKODE".'
          goto error
       end

    /*  Cannot delete parent "ZKODE" if children still exist in "SPP"  */
    if exists (select 1
               from   SPP t2, deleted t1
               where  t2.IDXKODE = t1.IDXKODE)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SPP". Cannot delete parent "ZKODE".'
          goto error
       end

    /*  Cannot delete parent "ZKODE" if children still exist in "PSPJ"  */
    if exists (select 1
               from   PSPJ t2, deleted t1
               where  t2.IDXKODE = t1.IDXKODE)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PSPJ". Cannot delete parent "ZKODE".'
          goto error
       end

    /*  Cannot delete parent "ZKODE" if children still exist in "ANTARBYR"  */
    if exists (select 1
               from   ANTARBYR t2, deleted t1
               where  t2.IDXKODE = t1.IDXKODE)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "ANTARBYR". Cannot delete parent "ZKODE".'
          goto error
       end

    /*  Cannot delete parent "ZKODE" if children still exist in "SP2D"  */
    if exists (select 1
               from   SP2D t2, deleted t1
               where  t2.IDXKODE = t1.IDXKODE)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "SP2D". Cannot delete parent "ZKODE".'
          goto error
       end

    /*  Cannot delete parent "ZKODE" if children still exist in "STS"  */
    if exists (select 1
               from   STS t2, deleted t1
               where  t2.IDXKODE = t1.IDXKODE)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "STS". Cannot delete parent "ZKODE".'
          goto error
       end

    /*  Cannot delete parent "ZKODE" if children still exist in "TBP"  */
    if exists (select 1
               from   TBP t2, deleted t1
               where  t2.IDXKODE = t1.IDXKODE)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "TBP". Cannot delete parent "ZKODE".'
          goto error
       end

    /*  Cannot delete parent "ZKODE" if children still exist in "BPK"  */
    if exists (select 1
               from   BPK t2, deleted t1
               where  t2.IDXKODE = t1.IDXKODE)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "BPK". Cannot delete parent "ZKODE".'
          goto error
       end

    /*  Cannot delete parent "ZKODE" if children still exist in "DP"  */
    if exists (select 1
               from   DP t2, deleted t1
               where  t2.IDXKODE = t1.IDXKODE)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "DP". Cannot delete parent "ZKODE".'
          goto error
       end

    /*  Cannot delete parent "ZKODE" if children still exist in "PANJAR"  */
    if exists (select 1
               from   PANJAR t2, deleted t1
               where  t2.IDXKODE = t1.IDXKODE)
       begin
          select @errno  = 50006,
                 @errmsg = 'Children still exist in "PANJAR". Cannot delete parent "ZKODE".'
          goto error
       end


    return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[ZKODE] ENABLE TRIGGER [TD_ZKODE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[TU_ZKODE] on [dbo].[ZKODE] for update as
begin
   declare
      @numrows  int,
      @numnull  int,
      @errno    int,
      @errmsg   varchar(255)

      select  @numrows = @@rowcount
      if @numrows = 0
         return

      /*  Cannot modify parent code in "ZKODE" if children still exist in "SKDASK"  */
      if update(IDXKODE)
      begin
         if exists (select 1
                    from   SKDASK t2, inserted i1, deleted d1
                    where  t2.IDXKODE = d1.IDXKODE
                     and  (i1.IDXKODE != d1.IDXKODE))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKDASK". Cannot modify parent code in "ZKODE".'
               goto error
            end
      end

      /*  Cannot modify parent code in "ZKODE" if children still exist in "SKO"  */
      if update(IDXKODE)
      begin
         if exists (select 1
                    from   SKO t2, inserted i1, deleted d1
                    where  t2.IDXKODE = d1.IDXKODE
                     and  (i1.IDXKODE != d1.IDXKODE))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SKO". Cannot modify parent code in "ZKODE".'
               goto error
            end
      end

      /*  Cannot modify parent code in "ZKODE" if children still exist in "SPP"  */
      if update(IDXKODE)
      begin
         if exists (select 1
                    from   SPP t2, inserted i1, deleted d1
                    where  t2.IDXKODE = d1.IDXKODE
                     and  (i1.IDXKODE != d1.IDXKODE))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SPP". Cannot modify parent code in "ZKODE".'
               goto error
            end
      end

      /*  Cannot modify parent code in "ZKODE" if children still exist in "PSPJ"  */
      if update(IDXKODE)
      begin
         if exists (select 1
                    from   PSPJ t2, inserted i1, deleted d1
                    where  t2.IDXKODE = d1.IDXKODE
                     and  (i1.IDXKODE != d1.IDXKODE))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PSPJ". Cannot modify parent code in "ZKODE".'
               goto error
            end
      end

      /*  Cannot modify parent code in "ZKODE" if children still exist in "ANTARBYR"  */
      if update(IDXKODE)
      begin
         if exists (select 1
                    from   ANTARBYR t2, inserted i1, deleted d1
                    where  t2.IDXKODE = d1.IDXKODE
                     and  (i1.IDXKODE != d1.IDXKODE))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "ANTARBYR". Cannot modify parent code in "ZKODE".'
               goto error
            end
      end

      /*  Cannot modify parent code in "ZKODE" if children still exist in "SP2D"  */
      if update(IDXKODE)
      begin
         if exists (select 1
                    from   SP2D t2, inserted i1, deleted d1
                    where  t2.IDXKODE = d1.IDXKODE
                     and  (i1.IDXKODE != d1.IDXKODE))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "SP2D". Cannot modify parent code in "ZKODE".'
               goto error
            end
      end

      /*  Cannot modify parent code in "ZKODE" if children still exist in "STS"  */
      if update(IDXKODE)
      begin
         if exists (select 1
                    from   STS t2, inserted i1, deleted d1
                    where  t2.IDXKODE = d1.IDXKODE
                     and  (i1.IDXKODE != d1.IDXKODE))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "STS". Cannot modify parent code in "ZKODE".'
               goto error
            end
      end

      /*  Cannot modify parent code in "ZKODE" if children still exist in "TBP"  */
      if update(IDXKODE)
      begin
         if exists (select 1
                    from   TBP t2, inserted i1, deleted d1
                    where  t2.IDXKODE = d1.IDXKODE
                     and  (i1.IDXKODE != d1.IDXKODE))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "TBP". Cannot modify parent code in "ZKODE".'
               goto error
            end
      end

      /*  Cannot modify parent code in "ZKODE" if children still exist in "BPK"  */
      if update(IDXKODE)
      begin
         if exists (select 1
                    from   BPK t2, inserted i1, deleted d1
                    where  t2.IDXKODE = d1.IDXKODE
                     and  (i1.IDXKODE != d1.IDXKODE))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "BPK". Cannot modify parent code in "ZKODE".'
               goto error
            end
      end

      /*  Cannot modify parent code in "ZKODE" if children still exist in "DP"  */
      if update(IDXKODE)
      begin
         if exists (select 1
                    from   DP t2, inserted i1, deleted d1
                    where  t2.IDXKODE = d1.IDXKODE
                     and  (i1.IDXKODE != d1.IDXKODE))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "DP". Cannot modify parent code in "ZKODE".'
               goto error
            end
      end

      /*  Cannot modify parent code in "ZKODE" if children still exist in "PANJAR"  */
      if update(IDXKODE)
      begin
         if exists (select 1
                    from   PANJAR t2, inserted i1, deleted d1
                    where  t2.IDXKODE = d1.IDXKODE
                     and  (i1.IDXKODE != d1.IDXKODE))
            begin
               select @errno  = 50005,
                      @errmsg = 'Children still exist in "PANJAR". Cannot modify parent code in "ZKODE".'
               goto error
            end
      end


      return

/*  Errors handling  */
error:
    raiserror (@errmsg,@errno,  1)
    rollback  transaction
end
GO
ALTER TABLE [dbo].[ZKODE] ENABLE TRIGGER [TU_ZKODE]
GO

-----------------------EXTENDDED PROPERTIES -----------

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ANTARBYR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ANTARBYR', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ANTARBYR', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ATASBEND', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan pimpinan SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ATASBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BEND', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BEND', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Informasi tanggal berhenti menggunakan keybend ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BEND', @level2type=N'COLUMN',@level2name=N'TGLSTOPBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data historis bendahara, jIka bendahara di mutasi baiknya di buat kembali yang baru, yang lama jgn di update atau di hapus. ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BENDKPA', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BENDKPA', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKBANK', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKBANK', @level2type=N'COLUMN',@level2name=N'KEYBEND1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKBANK', @level2type=N'COLUMN',@level2name=N'KEYBEND2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKBANK', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKBANKDET', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKBKAS', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKBKAS', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rek kasda yang di setting ke kas di neraca
   ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKBKAS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKBM', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKBM', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKBMDET', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKBMDET', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKPAJAK', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKPAJAK', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKPAJAK', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKRKK', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKRKK', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKRKKDET', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKRKKDET', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKRKM', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKRKM', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKRKMDET', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKRKMDET', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKSPJ', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKSPJ', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKSPJDET', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKSPJDET', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKTMEM', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKTMEM', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUBANK', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUBANK', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUBANK', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUBPK', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUBPK', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUBPK', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUD', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUD', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Tanggal Pencairan' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUD', @level2type=N'COLUMN',@level2name=N'TGLKAS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'No Bukti Pencairan : Giro/Transfer' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUD', @level2type=N'COLUMN',@level2name=N'NOBUKTIKAS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUK', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUK', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Tanggal Pencairan' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUK', @level2type=N'COLUMN',@level2name=N'TGLKAS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'No Bukti Pencairan : Giro/Transfer' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUK', @level2type=N'COLUMN',@level2name=N'NOBUKTIKAS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUPAJAK', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUPAJAK', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUPAJAK', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUPANJAR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUPANJAR', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUPANJAR', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUSP2D', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUSP2D', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUSP2D', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUSTS', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUSTS', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUSTS', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUTBP', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUTBP', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BKUTBP', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BPK', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BPK', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BPKBU', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BPKDETB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BPKDETB', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BPKDETD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BPKDETD', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BPKDETR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BPKDETR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BPKDETR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BPKDETRTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BPKDETRTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DESCRIPTION', @value=N'ALTERNATIF KEY UNTUK UNIT ORGANISASI YANG DI TENTUKAN DARI NEXTKEY' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BPKPAJAK', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BPKSPJ', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Periode bulan' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'BULAN'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Singkatan nama bank' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DAFTBANK', @level2type=N'COLUMN',@level2name=N'AKBANK'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alamat ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DAFTBANK', @level2type=N'COLUMN',@level2name=N'ALAMAT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Telpon ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DAFTBANK', @level2type=N'COLUMN',@level2name=N'TELEPON'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data bank yang di gunakan oleh bendahara maupun kasda' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DAFTBANK'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan daftar dokumen ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DAFTDOK'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alamat ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DAFTPHK3', @level2type=N'COLUMN',@level2name=N'ALAMAT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Telpon ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DAFTPHK3', @level2type=N'COLUMN',@level2name=N'TELEPON'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DAFTUNIT', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode unit organisasi' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DAFTUNIT', @level2type=N'COLUMN',@level2name=N'KDUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama/uraian unit organisasi' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DAFTUNIT', @level2type=N'COLUMN',@level2name=N'NMUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Singkat unit organisasi' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DAFTUNIT', @level2type=N'COLUMN',@level2name=N'AKROUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alamat ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DAFTUNIT', @level2type=N'COLUMN',@level2name=N'ALAMAT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Telpon ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DAFTUNIT', @level2type=N'COLUMN',@level2name=N'TELEPON'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DAFTUNIT', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan unit organisasi/dinas/SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DAFTUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKB', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKBLNB', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKBLNB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKBLND', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKBLND', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKBLNR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKBLNR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKBLNR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKBLNRTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKBLNRTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKD', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKDETB', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKDETB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKDETB', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKDETD', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKDETD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKDETD', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKDETR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKDETR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKDETR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKDETR', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKDETRL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKDETRL', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKDETRL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKDETRL', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKDETRTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKDETRTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKDETRTL', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKRL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKRL', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKRTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKRTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode Daskum diatur lewat Nextkey : Auto Number' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKUM', @level2type=N'COLUMN',@level2name=N'KDDASKUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKUM', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Berisi nomor dasar hukum hingga tahun terbit' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKUM', @level2type=N'COLUMN',@level2name=N'NODASKUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Berisi tentang nomor dasar hukumnya' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKUM', @level2type=N'COLUMN',@level2name=N'ISIDASKUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan dasar hukum APBD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKUMB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode Daskum diatur lewat Nextkey : Auto Number' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKUMB', @level2type=N'COLUMN',@level2name=N'KDDASKUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'kumpulan dasar hukum rekening pembiayaan' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKUMB'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKUMD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode Daskum diatur lewat Nextkey : Auto Number' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKUMD', @level2type=N'COLUMN',@level2name=N'KDDASKUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKUMR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode Daskum diatur lewat Nextkey : Auto Number' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKUMR', @level2type=N'COLUMN',@level2name=N'KDDASKUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan dasar hukum rekening belanja' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DASKUMR'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DP', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DPDET', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan fungsi' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'FUNGSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'FUNGSINIT', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan fungsi urusan  ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'FUNGSINIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan struktur golongan pegawai' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'GOLONGAN'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'JABTTD', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'JABTTD', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan pejabat yang mempunyai wewenang menandatangani dokumen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'JABTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan struktur rekening saldo arus kas ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'JAKAS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan jenis bendahara : Bendahara Penerimaan & Bendahara Pengeluaran plus Bendahara Pembantu' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'JBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan jenis kinerja' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'JKINKEG'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data tahun restra' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'JTAHUN'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan jenis transaksi yang ada di proses kas' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'JTRNLKAS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'JURTUP', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'KASKEG', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'KASKEG', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'KEGUNIT', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'KEGUNIT', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Program Unit di sini sebagai Foreign Key' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'KEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'KELOLAUNIT', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Penentuan perlakuan rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'KHUSUSREK'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'KINKEG', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'KINKEG', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan dari data kinerja kegiatan' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'KINKEG'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'KINNON', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'KONTRAK', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'KONTRAK', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'KPA', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode rekening ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGB', @level2type=N'COLUMN',@level2name=N'KDPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama/uraian rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGB', @level2type=N'COLUMN',@level2name=N'NMPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGB', @level2type=N'COLUMN',@level2name=N'MTGLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGB', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rekening pembiayaan, non anggaran/PFK, rekening koran (RK) dan BLUD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGB'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLAK', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLAK', @level2type=N'COLUMN',@level2name=N'MTGLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode rekening ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLAK', @level2type=N'COLUMN',@level2name=N'KDPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama/uraian rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLAK', @level2type=N'COLUMN',@level2name=N'NMPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLAK', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rekening pembiayaan untuk laporan LAK yang tidak sama dengan struktur rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLAK'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLRA', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLRA', @level2type=N'COLUMN',@level2name=N'MTGLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode rekening ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLRA', @level2type=N'COLUMN',@level2name=N'KDPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama/uraian rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLRA', @level2type=N'COLUMN',@level2name=N'NMPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLRA', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rekening pembiayaan untuk laporan LRA yang tidak sama dengan struktur rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLRA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLRA64', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLRA64', @level2type=N'COLUMN',@level2name=N'MTGLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode rekening ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLRA64', @level2type=N'COLUMN',@level2name=N'KDPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama/uraian rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLRA64', @level2type=N'COLUMN',@level2name=N'NMPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLRA64', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rekening pembiayaan untuk laporan LRA 64 yang tidak sama dengan struktur rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGBLRA64'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode rekening ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGD', @level2type=N'COLUMN',@level2name=N'KDPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama/uraian rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGD', @level2type=N'COLUMN',@level2name=N'NMPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGD', @level2type=N'COLUMN',@level2name=N'MTGLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'1 SKPD; 2 PPKD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGD', @level2type=N'COLUMN',@level2name=N'KDKHUSUS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGD', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rekening pendapatan' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLAK', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLAK', @level2type=N'COLUMN',@level2name=N'MTGLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode rekening ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLAK', @level2type=N'COLUMN',@level2name=N'KDPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama/uraian rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLAK', @level2type=N'COLUMN',@level2name=N'NMPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLAK', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rekening pendapatan untuk laporan LAK yang tidak sama dengan struktur rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLAK'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRA', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRA', @level2type=N'COLUMN',@level2name=N'MTGLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode rekening ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRA', @level2type=N'COLUMN',@level2name=N'KDPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama/uraian rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRA', @level2type=N'COLUMN',@level2name=N'NMPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRA', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rekening pendapatan untuk laporan LRA yang tidak sama dengan struktur rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRA64', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRA64', @level2type=N'COLUMN',@level2name=N'MTGLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode rekening ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRA64', @level2type=N'COLUMN',@level2name=N'KDPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama/uraian rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRA64', @level2type=N'COLUMN',@level2name=N'NMPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRA64', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rekening pendapatan untuk laporan LRA 64 yang tidak sama dengan struktur rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRA64'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRALO', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRALO', @level2type=N'COLUMN',@level2name=N'MTGLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode rekening ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRALO', @level2type=N'COLUMN',@level2name=N'KDPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama/uraian rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRALO', @level2type=N'COLUMN',@level2name=N'NMPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRALO', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rekening pendapatan untuk laporan LRA yang tidak sama dengan struktur rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGDLRALO'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGNRC', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode rekening ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGNRC', @level2type=N'COLUMN',@level2name=N'KDPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama/uraian rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGNRC', @level2type=N'COLUMN',@level2name=N'NMPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGNRC', @level2type=N'COLUMN',@level2name=N'MTGLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGNRC', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rekening neraca' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGNRC'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode rekening ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGR', @level2type=N'COLUMN',@level2name=N'KDPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama/uraian rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGR', @level2type=N'COLUMN',@level2name=N'NMPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGR', @level2type=N'COLUMN',@level2name=N'MTGLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGR', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rekening belanja' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGR'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLAK', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLAK', @level2type=N'COLUMN',@level2name=N'MTGLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode rekening ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLAK', @level2type=N'COLUMN',@level2name=N'KDPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama/uraian rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLAK', @level2type=N'COLUMN',@level2name=N'NMPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLAK', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rekening belanja untuk laporan LAK yang tidak sama dengan struktur rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLAK'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRA', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRA', @level2type=N'COLUMN',@level2name=N'MTGLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode rekening ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRA', @level2type=N'COLUMN',@level2name=N'KDPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama/uraian rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRA', @level2type=N'COLUMN',@level2name=N'NMPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRA', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rekening belanja untuk laporan LRA yang tidak sama dengan struktur rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRA64', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRA64', @level2type=N'COLUMN',@level2name=N'MTGLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode rekening ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRA64', @level2type=N'COLUMN',@level2name=N'KDPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama/uraian rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRA64', @level2type=N'COLUMN',@level2name=N'NMPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRA64', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rekening belanja untuk laporan LRA 64 yang tidak sama dengan struktur rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRA64'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRALO', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRALO', @level2type=N'COLUMN',@level2name=N'MTGLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode rekening ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRALO', @level2type=N'COLUMN',@level2name=N'KDPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama/uraian rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRALO', @level2type=N'COLUMN',@level2name=N'NMPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRALO', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rekening belanja untuk laporan LRA yang tidak sama dengan struktur rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGRLRALO'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGSAL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGSAL', @level2type=N'COLUMN',@level2name=N'MTGLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kode rekening ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGSAL', @level2type=N'COLUMN',@level2name=N'KDPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama/uraian rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGSAL', @level2type=N'COLUMN',@level2name=N'NMPER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGSAL', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rekening pendapatan untuk laporan SAL yang tidak sama dengan struktur rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MATANGSAL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MKEGIATAN', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MONEVWEBROLE', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MONEVWEBUSER', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama merupakan identitas dari User Id, sedangkan pengisian nama untuk yang ada Nip otomatis di ambil Nama dari Pegawai, untuk Nip yang null/diluar PNS nama di isi sesuai pengguna.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MONEVWEBUSER', @level2type=N'COLUMN',@level2name=N'NAMA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MPGRM', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MTGDUNIT', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MTGDUNIT', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan rekening pendapatan untuk unit organisasi' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MTGDUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'NRCBEND', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'NRCBEND', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'NRCBENDJKN', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'NRCBENDJKN', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'NRCELIMINASI', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'NSKUP', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'OTOKOROLARIB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'OTOKOROLARIB', @level2type=N'COLUMN',@level2name=N'MTGKEYNRC'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'OTOKOROLARIR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'OTOKOROLARIR', @level2type=N'COLUMN',@level2name=N'MTGKEYNRC'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PANJAR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PANJAR', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PANJARDET', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PANJARDET', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PEGAWAI', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama merupakan identitas dari User Id, sedangkan pengisian nama untuk yang ada Nip otomatis di ambil Nama dari Pegawai, untuk Nip yang null/diluar PNS nama di isi sesuai pengguna.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PEGAWAI', @level2type=N'COLUMN',@level2name=N'NAMA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alamat ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PEGAWAI', @level2type=N'COLUMN',@level2name=N'ALAMAT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data pegawai/non pegawai yang terlibat pada proses aplikasi ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PEGAWAI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Periode triwulan' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PERIODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Persamaan chart account : K = Kredit & D = Debit' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PERSACC'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PGRMUNIT', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'No Prioritas' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PGRMUNIT', @level2type=N'COLUMN',@level2name=N'NOPRIO'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PJKPS', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Posisi positif dari masing-masing rekening di laporan akuntasi' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'POSNORMAL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PPK', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PRIOKEG', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan Profil ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PROFIL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PROFILUNIT', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan Profil SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PROFILUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PSPJ', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PSPJ', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PSPJ', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKB', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data RKA pembiayaan SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKB'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKBLNB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKBLNB', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data RKA alokasi kas pembiayaan SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKBLNB'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKBLND', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKBLND', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data RKA alokasi kas pendapatan SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKBLND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKBLNR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKBLNR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKBLNR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data RKA alokasi kas belanja langsung SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKBLNR'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKBLNRTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKBLNRTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data RKA alokasi kas belanja tidak langsung SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKBLNRTL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKD', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data RKA pendapatan SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKDETB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKDETB', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKDETB', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data RKA penjabaran pembiayaan SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKDETB'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKDETD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKDETD', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKDETD', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data RKA penjabaran pendapatan SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKDETD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKDETR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKDETR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKDETR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKDETR', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data RKA penjabaran belanja langsung SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKDETR'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKDETRTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKDETRTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKDETRTL', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data RKA penjabaran belanja tidak langsung SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKDETRTL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data RKA belanja langsung SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKR'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKRTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKRTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data RKA belanja tidak langsung SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RASKRTL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RBMDETB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RBMDETB', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RBMDETD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RBMDETD', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RBMDETN', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RBMDETN', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RBMDETR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RBMDETR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RBMDETR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RBMDETRTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RBMDETRTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'REKAKAS', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Pemetaan antara rekening arus kas dengan neraca bendahara' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'REKAKAS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'REKONSET', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RKMDETB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RKMDETB', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RKMDETD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RKMDETD', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RKMDETR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RKMDETR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RKMDETR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RKMDETRTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RKMDETRTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RKMDETT', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOAKHIR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOAKHIR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOAWAL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOAWAL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOBLALU', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOBLALU', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDODETB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDODETB', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDODETB', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDODETD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDODETD', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDODETD', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDODETR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDODETR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDODETR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDODETR', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDODETRTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDODETRTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDODETRTL', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDODLALU', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDODLALU', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOLAKB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOLAKD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOLAKR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOLAKRTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOLRAB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOLRAB', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOLRAD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOLRAD', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOLRAR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOLRAR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOLRAR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOLRARTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDOLRARTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDORLALU', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDORLALU', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SALDORLALU', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SBDANAB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SBDANAB', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data RKA sumber dana pembiayaan SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SBDANAB'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SBDANAKEG', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SBDANAKEG', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SBDANAR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SBDANAR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SBDANAR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data RKA sumber dana belanja langsung SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SBDANAR'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SBDANARTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SBDANARTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data RKA sumber dana belanja tidak langsung SKPD' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SBDANARTL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETBLAK', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETBLAK', @level2type=N'COLUMN',@level2name=N'MTGKEYLAK'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan pemetaan antara rekening pembiayaan yang di Permen dengan rekening pendapatan struktur lain untuk laporan LAK' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETBLAK'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETBLRA', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETBLRA', @level2type=N'COLUMN',@level2name=N'MTGKEYLRA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan pemetaan antara rekening pembiayaan yang di Permen dengan rekening pembiayaan struktur lain untuk laporan LRA' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETBLRA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETBLRA64', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETBLRA64', @level2type=N'COLUMN',@level2name=N'MTGKEYLRA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan pemetaan antara rekening pembiayaan yang di Permen dengan rekening pembiayaan struktur lain untuk laporan LRA 64' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETBLRA64'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETDLAK', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETDLAK', @level2type=N'COLUMN',@level2name=N'MTGKEYLAK'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan pemetaan antara rekening pendapatan yang di Permen dengan rekening pendapatan struktur lain untuk laporan LAK' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETDLAK'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETDLRA', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETDLRA', @level2type=N'COLUMN',@level2name=N'MTGKEYLRA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan pemetaan antara rekening pendapatan yang di Permen dengan rekening pendapatan struktur lain untuk laporan LRA' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETDLRA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETDLRA64', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETDLRA64', @level2type=N'COLUMN',@level2name=N'MTGKEYLRA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan pemetaan antara rekening pendapatan yang di Permen dengan rekening pendapatan struktur lain untuk laporan LRA' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETDLRA64'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETDLRALO', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETDLRALO', @level2type=N'COLUMN',@level2name=N'MTGKEYLRA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan pemetaan antara rekening pendapatan yang di Permen dengan rekening pendapatan struktur lain untuk laporan LRA' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETDLRALO'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETKOR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETKOR', @level2type=N'COLUMN',@level2name=N'MTGKEYNRC'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETNRCMAPPING', @level2type=N'COLUMN',@level2name=N'MTGKEYASET'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETNRCMAPPING', @level2type=N'COLUMN',@level2name=N'MTGKEYHUTANG'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan pemetaan antara rekening pendapatan yang di Permen dengan rekening pendapatan struktur lain untuk laporan LRA' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETNRCMAPPING'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETPFK', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETRLAK', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETRLAK', @level2type=N'COLUMN',@level2name=N'MTGKEYLAK'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan pemetaan antara rekening belanja yang di Permen dengan rekening pendapatan struktur lain untuk laporan LAK' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETRLAK'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETRLRA', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETRLRA', @level2type=N'COLUMN',@level2name=N'MTGKEYLRA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan pemetaan antara rekening belanja yang di Permen dengan rekening belanja struktur lain untuk laporan LRA' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETRLRA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETRLRA64', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETRLRA64', @level2type=N'COLUMN',@level2name=N'MTGKEYLRA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan pemetaan antara rekening belanja yang di Permen dengan rekening belanja struktur lain untuk laporan LRA 64' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETRLRA64'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETRLRALO', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETRLRALO', @level2type=N'COLUMN',@level2name=N'MTGKEYLRA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan pemetaan antara rekening belanja yang di Permen dengan rekening belanja struktur lain untuk laporan LRA' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETRLRALO'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETUPDLO', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETUPDLO', @level2type=N'COLUMN',@level2name=N'MTGKEYLRA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan pemetaan antara rekening pendapatan yang di Permen dengan rekening pendapatan struktur lain untuk laporan LRA' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETUPDLO'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETUPRLO', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETUPRLO', @level2type=N'COLUMN',@level2name=N'MTGKEYLRA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan pemetaan antara rekening pendapatan yang di Permen dengan rekening pendapatan struktur lain untuk laporan LRA' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SETUPRLO'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKDASK', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKDASK', @level2type=N'COLUMN',@level2name=N'IDXTTD1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKDASK', @level2type=N'COLUMN',@level2name=N'IDXTTD2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKO', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKO', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKO', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKOBDET', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKOBDET', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKODDET', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKODDET', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKORDET', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKORDET', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKORDET', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKORTLDET', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKORTLDET', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKP', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKP', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKP', @level2type=N'COLUMN',@level2name=N'NPWPD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alamat ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKP', @level2type=N'COLUMN',@level2name=N'ALAMAT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKPDET', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SKPDET', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SP2D', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SP2D', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SP2D', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SP2DBPK', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SP2DDETB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SP2DDETB', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SP2DDETD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SP2DDETD', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SP2DDETR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SP2DDETR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SP2DDETR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SP2DDETRTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SP2DDETRTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SP2DPJK', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPJDETB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPJDETB', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPJDETD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPJDETD', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPJDETP', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPJDETR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPJDETR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPJDETR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPJDETRTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPJDETRTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPJSP2D', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPJSPP', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPJSTS', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPMDETB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPMDETB', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPMDETD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPMDETD', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPMDETR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPMDETR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPMDETR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPMDETRTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPMDETRTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPMPJK', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPP', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPP', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPP', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nomor SPP ? apakah dalam satu SKPD dengan bendahara yang berbeda dimungkinkan nomor SPP sama ?' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPP'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPPDETB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPPDETB', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPPDETD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPPDETD', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPPDETR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPPDETR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPPDETR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPPDETRTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SPPDETRTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'STDHARGAD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'STDHARGAR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'STRUREK', @level2type=N'COLUMN',@level2name=N'MTGLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'STRUREK', @level2type=N'COLUMN',@level2name=N'NMLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Struktur Rekening APBD dan Neraca, terdiri dari : Bab, Kelompok, Jenis, Objek dan Rincian' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'STRUREK'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama Level Rekening' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'STRUUNIT', @level2type=N'COLUMN',@level2name=N'NMLEVEL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Struktur level dari unit organisasi : ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'STRUUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'STS', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'STS', @level2type=N'COLUMN',@level2name=N'KEYBEND1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'STS', @level2type=N'COLUMN',@level2name=N'KEYBEND2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DIgenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'STS', @level2type=N'COLUMN',@level2name=N'IDXTTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Tahap, digunakan untuk anggaran yang terdiri dari : rancangan anggaran, anggaran semula, rancangan perubahan dan anggaran perubahan' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TAHAP'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan data tahun restra' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TAHUN'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TBPDETB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TBPDETB', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TBPDETD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TBPDETD', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TBPDETR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TBPDETR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TBPDETR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TBPDETRTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TBPDETRTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keybend digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TBPDETT', @level2type=N'COLUMN',@level2name=N'KEYBEND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TBPDETT', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TBPSTS', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TTAPD', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan pegawai yang masuk tim TAPD, per tahapan : Racangan Anggaran & Rancangan Perubahan' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TTAPD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TTAPDR', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'digenerated lewat Nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TTAPDR', @level2type=N'COLUMN',@level2name=N'KDKEGUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TUPB', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TUPD', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TUPR', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'URUSANUNIT', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'URUSANUNIT', @level2type=N'COLUMN',@level2name=N'URUSKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Kumpulan urusan unit organisasi' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'URUSANUNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk rekening yang diatur lewat nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'URUSRTL', @level2type=N'COLUMN',@level2name=N'MTGKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'URUSRTL', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type untuk membedakan mana Header (H) & Detil (D)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'WEBROLE', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternatif key untuk unit organisasi yang di tentukan dari nextkey' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'WEBUSER', @level2type=N'COLUMN',@level2name=N'UNITKEY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nama merupakan identitas dari User Id, sedangkan pengisian nama untuk yang ada Nip otomatis di ambil Nama dari Pegawai, untuk Nip yang null/diluar PNS nama di isi sesuai pengguna.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'WEBUSER', @level2type=N'COLUMN',@level2name=N'NAMA'
GO

---  FUNCTIONS  ----------------------------------------

USE [V@LID49V6_cms_2020]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[benddok]
(@kd char(10), @nobuk varchar(50), @UNITKEY VARCHAR(10))
RETURNS varchar(10)
AS
--==================================================================================--
--                             REGISTER UPDATE										--
--==================================================================================--
--	DATE		PIC		TYPE					DESCRIPTION							--
--  ================================================================================--
--  03 April   IS      Create				- Pembuatan script Pada database versi 4--
--																					--
--==================================================================================--
BEGIN
declare @tgl varchar(10)
if(@kd='sp2d')
  begin
    set @tgl = (SELECT KEYBEND from SP2D where nosp2d = @nobuk AND UNITKEY = @UNITKEY)
  end else  if(@kd='sts')
begin
  set @tgl = (SELECT  s.keybend1 from STS s
				INNER JOIN BKUD b ON b.NOSTS = s.NOSTS AND b.UNITKEY = s.UNITKEY
              where b.NOBUKAS=@nobuk)
end else  if(@kd='spj')
begin
  set @tgl = (select keybend from pspj where nospj = @nobuk)
end
  return @tgl
END



GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[fn_daskd] (@idxdask char(10))
returns @ret_daskd 
table (unitkey char(10), mtgkey char(10),
	idxdask char(10),nilai money)
as
begin
insert into @ret_daskd
select unitkey,mtgkey, idxdask, nilai from daskd where idxdask=@idxdask
return
end

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetNumber]
(@strAlphaNumeric VARCHAR(512))
RETURNS VARCHAR(512)
AS
BEGIN
DECLARE @intAlpha INT
SET @intAlpha = PATINDEX('%[^0-9]%', @strAlphaNumeric)
BEGIN
WHILE @intAlpha > 0
BEGIN
SET @strAlphaNumeric = STUFF(@strAlphaNumeric, @intAlpha, 1, '' )
SET @intAlpha = PATINDEX('%[^0-9]%', @strAlphaNumeric )
END
END
RETURN ISNULL(@strAlphaNumeric,0)
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[FnGETSPLITREK]
(
    @string varchar(MAX),                                                                                                                                                   
    @delimiter CHAR(1),
    @pos INT
)
RETURNS varchar(255)
AS
BEGIN
    DECLARE @start INT, @end INT, @count INT
    SELECT @start = 1, @end = CHARINDEX(@delimiter, @string), @count = 1 
    WHILE @start < LEN(@string) + 1 BEGIN
        IF @end = 0 
            SET @end = LEN(@string) + 1 
 
        IF @count = @pos                                        
            RETURN SUBSTRING(@string, @start, @end - @start)
 
        SET @start = @end + 1 
        SET @end = CHARINDEX(@delimiter, @string, @start)
        SET @count = @count + 1 
 
    END
    RETURN '' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE FUNCTION [dbo].[FnMatangRekR6] ( @kd INT ,@MTGLEVEL INT ,@KDPER char(50) )  
RETURNS varchar(512) AS  
BEGIN 
--  declare @kd char(10),@mtgkey char(10)


declare @NMPER VARCHAR(512) 
if(@kd=1)
begin
	set @NMPER = (select TOP 1  NMPER from matangnrc where KDPER=@KDPER AND MTGLEVEL=@MTGLEVEL )
end else  
if(@kd IN (4,8))
begin
	set @NMPER = (select TOP 1  NMPER from matangd where KDPER=@KDPER AND MTGLEVEL=@MTGLEVEL )
end else  
if(@kd IN (5,9))
begin
	set @NMPER = (select TOP 1  NMPER from matangr where KDPER=@KDPER AND MTGLEVEL=@MTGLEVEL )
end else 
if(@kd=6) 
begin
	set @NMPER = (select TOP 1  NMPER from matangb where KDPER=@KDPER AND MTGLEVEL=@MTGLEVEL )
end ELSE
if(@kd=8) 
begin
	set @NMPER = (select TOP 1  NMPER from matangd where KDPER=@KDPER AND MTGLEVEL=@MTGLEVEL AND LEFT(kdper,1)='8' )
end ELSE
	
if(@kd=9) 
begin
	set @NMPER = (select TOP 1  NMPER from matangr where KDPER=@KDPER AND MTGLEVEL=@MTGLEVEL AND LEFT(kdper,1)='9' )
end else
if(@kd=10) 
begin
	set @NMPER = (select TOP 1  NMPER from matangdlra64 where KDPER=@KDPER AND MTGLEVEL=@MTGLEVEL )
end
else 
if(@kd=11) 
begin
	set @NMPER = (select TOP 1  NMPER from matangrlra64  where KDPER=@KDPER AND MTGLEVEL=@MTGLEVEL and left(kdper,1)='5'  )
end
else 
if(@kd=12) 
begin
	set @NMPER = (select TOP 1  NMPER from matangrlra64  where KDPER=@KDPER AND MTGLEVEL=@MTGLEVEL and left(kdper,1)='6' )
end
else 
if(@kd=13) 
begin
	set @NMPER = (select TOP 1  NMPER from matangblra64  where KDPER=@KDPER AND MTGLEVEL=@MTGLEVEL and left(kdper,1)='7')
end

  return @NMPER
END








GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnsplitAkrualR6]
(
    @string varchar(MAX),                                                                                                                                                   
    @delimiter CHAR(1),
    @pos INT
)
RETURNS varchar(255)
AS
BEGIN
    DECLARE @start INT, @end INT, @count INT
    SELECT @start = 1, @end = CHARINDEX(@delimiter, @string), @count = 1 
    WHILE @start < LEN(@string) + 1 BEGIN
        IF @end = 0 
            SET @end = LEN(@string) + 1 
 
        IF @count = @pos                                        
            RETURN SUBSTRING(@string, @start, @end - @start)
 
        SET @start = @end + 1 
        SET @end = CHARINDEX(@delimiter, @string, @start)
        SET @count = @count + 1 
 
    END
    RETURN '' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnsplitBPKREK]
(
    @string varchar(MAX),                                                                                                                                                   
    @delimiter CHAR(1),
    @pos INT
)
RETURNS varchar(255)
AS
BEGIN
    
    
DECLARE @start INT, @end INT, @count INT
SELECT @start = 1, @end = CHARINDEX(@delimiter, @string), @count = 1 

WHILE @start < LEN(@string) + 1 
BEGIN
	
	
		IF @end = 0 
		BEGIN
			SET @end = LEN(@string) + 1
			 
			GOTO ERROR
			 BREAK
					
		END ELSE
		BEGIN
			SET @end = CHARINDEX(@delimiter, @string, @start)		
		END	
		 
			
		IF @count = @pos                              
		BEGIN
			  IF @end<>0
			  GOTO ERROR
			   	
			
		END		
		 
		 
		SET @start = @end + 1 
		SET @count = @count + 1 

END

error:
RETURN SUBSTRING(@string, 1, @end)   
    
    
    
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnsplitRekeningSIKD]
(
    @string varchar(MAX),                                                                                                                                                   
    @delimiter CHAR(1),
    @pos INT
)
RETURNS varchar(255)
AS
BEGIN  
    
DECLARE @start INT, @end INT, @count INT
SELECT @start = 1, @end = CHARINDEX(@delimiter, @string), @count = 1 

WHILE  @start < LEN(@string) + 1 
BEGIN	
		IF @end = 0 
		BEGIN
			SET @end = LEN(@string) + 1
			 
			GOTO ERROR
			 BREAK
					
		END ELSE
		BEGIN
			SET @end = CHARINDEX(@delimiter, @string, @start)		
		END	
		 
			
		IF @count = @pos                              
		BEGIN
			  IF @end<>0
			  GOTO ERROR
			   	
			
		END		
		 
		 
		SET @start = @end + 1 
		SET @count = @count + 1 

END
error:
RETURN SUBSTRING(@string, 1, @end)   
 end
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnsplitREKR6]
(
    @string varchar(MAX),                                                                                                                                                   
    @delimiter CHAR(1),
    @pos INT
)
RETURNS varchar(255)
AS
BEGIN
    
    
DECLARE @start INT, @end INT, @count INT
SELECT @start = 1, @end = CHARINDEX(@delimiter, @string), @count = 1 

WHILE @start < LEN(@string) + 1 
BEGIN
	
	
		IF @end = 0 
		BEGIN
			SET @end = LEN(@string) + 1
			 
			GOTO ERROR
			 BREAK
					
		END ELSE
		BEGIN
			SET @end = CHARINDEX(@delimiter, @string, @start)		
		END	
		 
			
		IF @count = @pos                              
		BEGIN
			  IF @end<>0
			  GOTO ERROR
			   	
			
		END		
		 
		 
		SET @start = @end + 1 
		SET @count = @count + 1 

END

error:
RETURN SUBSTRING(@string, 1, @end)   
    
    
    
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnSplitRekSikd]
(
    @string varchar(MAX),                                                                                                                                                   
    @delimiter CHAR(1),
    @pos INT
)
RETURNS varchar(255)
AS
BEGIN
    DECLARE @start INT, @end INT, @count INT
    SELECT @start = 1, @end = CHARINDEX(@delimiter, @string), @count = 1 
    WHILE @start < LEN(@string) + 1 BEGIN
        IF @end = 0 
            SET @end = LEN(@string) + 1 
 
        IF @count = @pos                                        
            RETURN SUBSTRING(@string, @start, (@end - @start)+1)
 
        SET @start = @end + 1 
        SET @end = CHARINDEX(@delimiter, @string, @start)
        SET @count = @count + 1 
 
    END
    RETURN '' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnsplitSBDANAREK]
(
    @string varchar(MAX),                                                                                                                                                   
    @delimiter CHAR(1),
    @pos INT
)
RETURNS varchar(255)
AS
BEGIN
    
    
DECLARE @start INT, @end INT, @count INT
SELECT @start = 1, @end = CHARINDEX(@delimiter, @string), @count = 1 

WHILE @start < LEN(@string) + 1 
BEGIN
	
	
		IF @end = 0 
		BEGIN
			SET @end = LEN(@string) + 1
			 
			GOTO ERROR
			 BREAK
					
		END ELSE
		BEGIN
			SET @end = CHARINDEX(@delimiter, @string, @start)		
		END	
		 
			
		IF @count = @pos                              
		BEGIN
			  IF @end<>0
			  GOTO ERROR
			   	
			
		END		
		 
		 
		SET @start = @end + 1 
		SET @count = @count + 1 

END

error:
RETURN SUBSTRING(@string, 1, @end)   
    
    
    
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[GetBlnTriwulan] (@bln int)
returns int
as
begin
  declare @trw int
  set @trw =  dbo.GetTriwulan(@bln);
  return 3 * @trw;
end



GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[getChrTime](@INPUTDATE AS DATETIME)
RETURNS CHAR(5)
BEGIN
	DECLARE @chrTime AS CHAR(5)
	SET @chrTime = (RIGHT('00' + RTRIM(CAST(DATEPART(HOUR, GETDATE()) AS CHAR(2))),2) + ':' +
		RIGHT('00' + RTRIM(CAST(DATEPART(MINUTE, GETDATE()) AS CHAR(2))),2))
	RETURN @chrTime
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE FUNCTION [dbo].[Getdtunit] (@kdunit varchar(30),@dtunit varchar(7))  
RETURNS varchar(200) AS  
BEGIN 
    
-- select count(*) from daftunit where rtrim(kdunit) = (select left(kdunit,8) from daftunit where UNITKEY='4_')
-- select top 1 unitkey from daftunit where rtrim(kdunit) = (select left(kdunit,8) from daftunit where UNITKEY='4_')
-- select rtrim(kdunit) from daftunit where UNITKEY='577_'
-- select rtrim(nmunit) from daftunit where UNITKEY='577_'
-- select ([dbo].[Getdtunit]('1.01.01.01.','akronit'))
-- select ([dbo].[Getdtunit]('1.01.01.01.','unitkey'))
-- select ([dbo].[Getdtunit]('1.01.01.01.','nmunit'))

	declare @cparretturn varchar(200), @unitkey char(10)

	set @cparretturn = 'Null'

	set @unitkey = (select top 1 unitkey from daftunit where rtrim(kdunit) = rtrim(@kdunit) )

	if @dtunit='unitkey'
	set @cparretturn = isnull(@unitkey,'Null_')

	if @unitkey is not null  
	begin
		
		if @dtunit='akronit'
		set @cparretturn = isnull((select rtrim(akrounit) from daftunit where UNITKEY=@unitkey),'Null')
		
		if @dtunit='nmunit'
		set @cparretturn = isnull((select rtrim(nmunit) from daftunit where UNITKEY=@unitkey),'Null')
		
	end


  return @cparretturn

END






GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE FUNCTION [dbo].[Getdturus] (@unitkey char(10),@dturus varchar(7))  
RETURNS varchar(200) AS  
BEGIN 

-- select count(*) from daftunit where rtrim(kdunit) = (select left(kdunit,8) from daftunit where UNITKEY='4_')
-- select top 1 unitkey from daftunit where rtrim(kdunit) = (select left(kdunit,8) from daftunit where UNITKEY='4_')
-- select rtrim(kdunit) from daftunit where UNITKEY='577_'
-- select rtrim(nmunit) from daftunit where UNITKEY='577_'
-- select ([dbo].[Getdturus]('4_','uruskey'))
-- select ([dbo].[Getdturus]('4_','kdurus'))
-- select ([dbo].[Getdturus]('4_','nmurus'))

	declare @cparretturn varchar(200), @jumrec int, @uruskey char(10)

	set @cparretturn = 'Null'

	set @jumrec = (select count(*) from daftunit 
					where rtrim(kdunit) = (select left(kdunit,[dbo].[Getlenstru]('3')) from daftunit where UNITKEY=@unitkey) )

	if @jumrec>0  
	begin
		set @uruskey = (select top 1 unitkey from daftunit 
					where rtrim(kdunit) = (select left(kdunit,[dbo].[Getlenstru]('3')) from daftunit where UNITKEY=@unitkey) )
		if @dturus='uruskey'
		set @cparretturn = isnull(@uruskey,'Null_')
		
		if @dturus='kdurus'
		set @cparretturn = isnull((select rtrim(kdunit) from daftunit where UNITKEY=@uruskey),'Null')
		
		if @dturus='nmurus'
		set @cparretturn = isnull((select rtrim(nmunit) from daftunit where UNITKEY=@uruskey),'Null')
		
	end


  return @cparretturn

END






GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




/*
select * from GetFilterMatangb(1,5)
order by KDPER
--*/
create FUNCTION [dbo].[GetFilterMatangb] (@Position int,@Idxkode int) 
RETURNS @temp TABLE (KDPER varchar(50))
AS
begin
--	Untuk Pengeluaran (SPP, SPM, SP2D)
	if((@Position = 1) and (@Idxkode=5))
	begin
		insert into @temp values ('6.')
		insert into @temp values ('7.')
		insert @temp
		select KDPER
		from MATANGB
		where left(KDPER,4) = '6.2.' or  left(KDPER,4) = '7.2.'
	end else if(@Position = 2) and (@Idxkode=5)
	begin
		insert into @temp values ('6.')
		insert into @temp values ('7.')
		insert @temp
		select KDPER
		from MATANGB
		where left(KDPER,4) = '6.1.' or  left(KDPER,4) = '7.1.'
	end else if(@Position = 2) and (@Idxkode=4)
	begin
		insert into @temp values ('7.')
		insert @temp
		select KDPER
		from MATANGB
		where left(KDPER,4) = '7.1.'
--Untuk Penerimaan : Position = Kdstatus (TBP,STS)
	end else if(@Position in (11,15,16)) and (@Idxkode=5)
	begin
		insert into @temp values ('6.')
		insert @temp
		select KDPER
		from MATANGB
		where left(KDPER,4) = '6.1.'
	end else if(@Position = 12) and (@Idxkode=5)
	begin
		insert into @temp values ('6.')
		insert @temp
		select KDPER
		from MATANGB
		where left(KDPER,4) = '6.2.'
	end else if(@Position = 71) and (@Idxkode=5)
	begin
		insert into @temp values ('7.')
		insert @temp
		select KDPER
		from MATANGB
		where left(KDPER,4) = '7.1.'
	end else if(@Position = 72) and (@Idxkode=5)
	begin
		insert into @temp values ('7.')
		insert @temp
		select KDPER
		from MATANGB
		where left(KDPER,4) = '7.2.'
	end 

	return
end












GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[GetFilterMatangr] (@Idxkode int) 
RETURNS @temp TABLE (KDPER varchar(50))
AS
begin
	insert into @temp values ('5.')
	if(@Idxkode = 3)--Rekening Belanja Tidak Langung Non Gaji
	begin
		insert @temp
		select KDPER
		from MATANGR 
		where left(KDPER,4) = '5.1.' and left(KDPER,6) <> '5.1.1.' 
	end else if(@Idxkode = 4)--Rekening Belanja Tidak Langung Gaji
	begin
		insert @temp
		select KDPER
		from MATANGR 
		where left(KDPER,4) = '5.1.' and left(KDPER,6) = '5.1.1.' 

		insert into @temp values ('5.1.')
	end else if(@Idxkode = 2)--Rekening Belanja Langung 
	begin
		insert @temp
		select KDPER
		from MATANGR 
		where left(KDPER,4) = '5.2.' 
	end
	return
end

--if(@Idxkode = 2)--Rekening Belanja Tidak Langung Non Gaji
--
--    return(
--		select kdper
--		from Matangr where left(Kdper,6) <> '5.1.1.'
--	)
--
-- if(@Idxkode = 3)--Rekening Belanja Tidak Langung Gaji
--begin
--	return (
--		select kdper
--		from Matangr where left(Kdper,6) = '5.1.1.'
--    )
--end
--if(@Idxkode = 4)--Rekening Belanja Langung
--begin
--	return (
--		select kdper
--		from Matangr where left(Kdper,4) = '5.2.'
--    )
--end








GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetFirstDayOfMonth] ( @pInputDate    DATETIME )


--==================================================================================--
--                             REGISTER UPDATE										--
--==================================================================================--
--	DATE		PIC		TYPE					DESCRIPTION							--
--  ================================================================================--
--  20 JUL 10   PJ      Create			Create Baru untuk mencari tanggal awal bulan
--==================================================================================--


RETURNS DATETIME

BEGIN

    RETURN CAST(FLOOR(CAST(@pInputDate AS DECIMAL(12, 5))) - 
               (DAY(@pInputDate) - 1) AS DATETIME)

END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
select ([dbo].[Getformstru]('0'))
select ([dbo].[Getformstru]('1'))
select ([dbo].[Getformstru]('2'))
select ([dbo].[Getformstru]('3'))
select ([dbo].[Getformstru]('4'))
select ([dbo].[Getformstru]('5'))

select ([dbo].[Getformstru]('11'))
select ([dbo].[Getformstru]('12'))
select ([dbo].[Getformstru]('13'))
*/

CREATE FUNCTION [dbo].[Getformstru] (@kdlevel char(2))  
RETURNS varchar(50) AS  
BEGIN 

	--declare @kdlevel char(2)
	--set @kdlevel = '5'
	
	declare @cparretturn varchar(50), @jumrec int

	set @cparretturn = '0.'

	if @kdlevel in ('11','12','13')  -- 11 : Kode Program , 12 : Kode Kegiatan , 13 : Kode Sub Kegiatan
	begin 
		--if not exists(select * from WEBSET where KDSET='frmtprg')  
		--	INSERT INTO WEBSET (KDSET,VALSET,VALDESC,MODEENTRY,VALLIST)
		--		VALUES('frmtprg','00','Format Kode Program','1','2 digit=00;3 digit=000')
		--if not exists(select * from WEBSET where KDSET='frmtkeg')  
		--	INSERT INTO WEBSET (KDSET,VALSET,VALDESC,MODEENTRY,VALLIST)
		--		VALUES('frmtkeg','00','Format Kode Kegiatan','1','2 digit=00;3 digit=000')
		--if not exists(select * from WEBSET where KDSET='frmtsubkeg')  
		--	INSERT INTO WEBSET (KDSET,VALSET,VALDESC,MODEENTRY,VALLIST)
		--		VALUES('frmtsubkeg','00','Format Kode Sub Kegiatan','1','2 digit=00;3 digit=000')

		declare @kdset char(10)	
		--,@kdlevel char(2)
		--set @kdlevel='11'
		set @kdset = (select case	when @kdlevel='11' then 'frmtprg' 
									when @kdlevel='12' then 'frmtkeg'
									when @kdlevel='13' then 'frmtsubkeg'
									else '' end)
 	--	select @kdset,@kdlevel
		--select rtrim(valset),@kdset,@kdlevel from webset where lower(rtrim(KDSET)) = rtrim(@kdset)	
		--select * from webset where lower(rtrim(KDSET)) = rtrim('frmtprg')	

		set @jumrec = (select count(*) from webset where lower(rtrim(KDSET)) = rtrim(@kdset))
		
		if @jumrec>0  
		begin
			set @cparretturn = isnull((select rtrim(valset) from webset where kdset=@kdset),2)
			if right(rtrim(@cparretturn),1)<>'.'
			set @cparretturn = rtrim(@cparretturn)+'.'
			
		end		
		
	end
	else
	begin
		--print convert(int,@kdlevel)
	if convert(int,@kdlevel) < 6  -- 0 : Klp Urusan, 1 : Sub Klp Urusan, 2 : Urusan, 3 : SKPD, 4 : Unit Kerja/UPT/Sub Unit
		set @jumrec = (select count(*) from struunit where rtrim(kdlevel)=rtrim(@kdlevel))
		--print @jumrec
		if @jumrec=1
		begin
			set @cparretturn = isnull((select rtrim(numdigit) from struunit where rtrim(kdlevel)=rtrim(@kdlevel)),2)
			--print @cparretturn
		end
	end

  return @cparretturn

END

/*
SELECT o.[type] tipe, o.name name_on, p.name name_mjr, p.[type] tipe_mjr, is_selected, is_updated, is_select_all
--, q.name name_mnr, q.[type] as tipe_mnr, s.column_id
  FROM [V@LID49V6_2016_V63].[sys].[sql_dependencies] s
  inner join [V@LID49V6_2016_V63].[sys].[all_objects] o on o.[object_id]=s.[object_id] 
  left join [V@LID49V6_2016_V63].[sys].[all_objects] p on p.[object_id]=s.[referenced_major_id]
  --left join [V@LID49V6_2016_V63].[sys].[all_objects] q on q.[object_id]=s.[referenced_minor_id]
  --where o.[object_id]>0 and p.[object_id]>0 and q.[object_id]>0 and o.[name] not like '%propert%'
  group by o.[type] , o.name , p.name , p.[type] , is_selected, is_updated, is_select_all
  order by 1,2,3,4 

*/









GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create FUNCTION [dbo].[getIntDate](@INPUTDATE AS DATETIME)

RETURNS INT
BEGIN
	DECLARE @intDate AS INT
	SET @intDate =  (
		CAST(YEAR(@INPUTDATE) AS CHAR(4)) + 
		RIGHT('00' + RTRIM(CAST(MONTH(@INPUTDATE) AS CHAR(2))),2) + 
		RIGHT('00' + RTRIM(CAST(DAY(@INPUTDATE) AS CHAR(2))),2)
	)
	RETURN @intDate
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetLastDayOfMonth] ( @pInputDate    DATETIME )

--==================================================================================--
--                             REGISTER UPDATE										--
--==================================================================================--
--	DATE		PIC		TYPE					DESCRIPTION							--
--  ================================================================================--
--  20 JUL 10   PJ      Create			Create Baru untuk mencari tanggal akhir bulan
--==================================================================================--

RETURNS DATETIME


BEGIN

    DECLARE @vOutputDate        DATETIME

    SET @vOutputDate = CAST(FLOOR(CAST(@pInputDate AS DECIMAL(12, 5))) - 
                       (DAY(@pInputDate) - 1) AS DATETIME)
    SET @vOutputDate = DATEADD(DD, -1, DATEADD(M, 1, @vOutputDate))

    RETURN @vOutputDate

END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
select ([dbo].[Getlenstru]('0'))
select ([dbo].[Getlenstru]('1'))
select ([dbo].[Getlenstru]('2'))
select ([dbo].[Getlenstru]('3'))
select ([dbo].[Getlenstru]('4'))
select ([dbo].[Getlenstru]('5'))

select ([dbo].[Getlenstru]('11'))
select ([dbo].[Getlenstru]('12'))
select ([dbo].[Getlenstru]('13'))
*/



CREATE FUNCTION [dbo].[Getlenstru] (@kdlevel char(2))  
RETURNS int AS  
BEGIN 

	--declare @kdlevel char(2)
	--set @kdlevel = '4'
	
	declare @parretturn int, @jumrec int

	set @parretturn = 2
	--print @kdlevel
	if convert(int,@kdlevel) < 6  -- 1 : Kode Kelompok Urusan , 2 : Kode Urusan , 3 : Kode SKPD , 4 : Kode Unit Kerja/UPT/Sub Dinas/Bidang
	begin
			--print @kdlevel
		set @jumrec = (select count(*) from struunit where rtrim(kdlevel)=rtrim(@kdlevel))
			--print @jumrec

		if @jumrec=1 
		begin
			set @parretturn = isnull((select len(rtrim(numdigit)) from struunit where rtrim(kdlevel)=rtrim(@kdlevel)),2)
			--print @parretturn
		end
	end


	if @kdlevel in ('11','12','13')  -- 11 : Kode Program , 12 : Kode Kegiatan , 13 : Kode Sub Kegiatan
	begin 
			--print @kdlevel
		--if not exists(select * from WEBSET where KDSET='frmtprg')  
		--	INSERT INTO WEBSET (KDSET,VALSET,VALDESC,MODEENTRY,VALLIST)
		--		VALUES('frmtprg','00','Format Kode Program','1','2 digit=00;3 digit=000')
		--if not exists(select * from WEBSET where KDSET='frmtkeg')  
		--	INSERT INTO WEBSET (KDSET,VALSET,VALDESC,MODEENTRY,VALLIST)
		--		VALUES('frmtkeg','00','Format Kode Kegiatan','1','2 digit=00;3 digit=000')
		--if not exists(select * from WEBSET where KDSET='frmtsubkeg')  
		--	INSERT INTO WEBSET (KDSET,VALSET,VALDESC,MODEENTRY,VALLIST)
		--		VALUES('frmtsubkeg','00','Format Kode Sub Kegiatan','1','2 digit=00;3 digit=000')

		declare @kdset char(10)
		set @kdset = (select case	when @kdlevel='11' then 'frmtprg' 
									when @kdlevel='12' then 'frmtkeg'
									when @kdlevel='13' then 'frmtsubkeg'
									else '' end)
		set @jumrec = (select count(*) from webset where KDSET = @kdset)
			--print @jumrec
		
		if @jumrec>0  
		begin
			set @parretturn = isnull((select len(rtrim(valset)) from webset where kdset=@kdset),2)
			--print @parretturn
		end		
		
	end

	--print @parretturn

  return @parretturn

END

/*
SELECT o.[type] tipe, o.name name_on, p.name name_mjr, p.[type] tipe_mjr, is_selected, is_updated, is_select_all
--, q.name name_mnr, q.[type] as tipe_mnr, s.column_id
  FROM [V@LID49V6_2016_V63].[sys].[sql_dependencies] s
  inner join [V@LID49V6_2016_V63].[sys].[all_objects] o on o.[object_id]=s.[object_id] 
  left join [V@LID49V6_2016_V63].[sys].[all_objects] p on p.[object_id]=s.[referenced_major_id]
  --left join [V@LID49V6_2016_V63].[sys].[all_objects] q on q.[object_id]=s.[referenced_minor_id]
  --where o.[object_id]>0 and p.[object_id]>0 and q.[object_id]>0 and o.[name] not like '%propert%'
  group by o.[type] , o.name , p.name , p.[type] , is_selected, is_updated, is_select_all
  order by 1,2,3,4 

*/








GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*
select * from dbo.GetLookupMatangrtl(1,4)
order by KDPER
--*/
CREATE FUNCTION [dbo].[GetLookupMatangrtl] (@Position int,@Idxkode int) 
RETURNS @temp TABLE (MTGKEY varchar(10),KDPER varchar(30),NMPER varchar(200),TYPE varchar(1))
AS
begin
	
	if((@Position = 1) and (@Idxkode=3))
	begin
    insert into @temp 
    select rtrim(MTGKEY),rtrim(KDPER),rtrim(NMPER),rtrim(TYPE) from MATANGR
    where KDPER in (select * from dbo.GetFilterMatangr(@Idxkode))
	end else if(@Position = 1) and (@Idxkode=4)
	begin
    insert into @temp 
    select rtrim(MTGKEY),rtrim(KDPER),rtrim(NMPER),rtrim(TYPE) from MATANGR
    where KDPER in (select * from dbo.GetFilterMatangr(@Idxkode))
	end else if(@Position = 2) and (@Idxkode=3)
	begin
    insert into @temp 
    select rtrim(MTGKEY),rtrim(KDPER),rtrim(NMPER),rtrim(TYPE) from MATANGR
    where KDPER in (select * from dbo.GetFilterMatangr(@Idxkode))
	end else if(@Position = 2) and (@Idxkode=4)
	begin
    insert into @temp 
    select rtrim(MTGKEY),rtrim(KDPER),rtrim(NMPER),rtrim(TYPE) from MATANGR
    where KDPER in (select * from dbo.GetFilterMatangr(@Idxkode))
    insert into @temp 
    select rtrim(MTGKEY),rtrim(KDPER),rtrim(NMPER),rtrim(TYPE) from MATANGB
    where KDPER in (select * from dbo.GetFilterMatangb(@Position,@Idxkode))
	end 
	return
end







GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
select * from dbo.GetMatang('1_')
order by KDPER
--*/
CREATE function [dbo].[GetMatang] (@Mtgkey char(10)) 
returns @temp table (BABID char(1), MTGKEY char(10), KDPER varchar(30), NMPER varchar(200))
as
begin
	insert into @temp
	select left(KDPER,1), MTGKEY, KDPER, NMPER from MATANGB where MTGKEY=@Mtgkey
	union
	select left(KDPER,1), MTGKEY, KDPER, NMPER from MATANGD where MTGKEY=@Mtgkey
	union
	select left(KDPER,1), MTGKEY, KDPER, NMPER from MATANGR where MTGKEY=@Mtgkey
	union
	select left(KDPER,1), MTGKEY, KDPER, NMPER from MATANGNRC where MTGKEY=@Mtgkey

	return

end


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*
select * from Skordet where unitkey='38_'
select * from dbo.GetSkodet('38_','2009-12-31')
order by KDPER
--*/
CREATE function [dbo].[GetSkodet] (@Unitkey char(10),@Kdkegunit char(10),@Tgl datetime,@Idxsko varchar(10)) 
returns @temp table (UNITKEY char(10),KDKEGUNIT char(10), MTGKEY char(10), KDPER varchar(30), NMPER varchar(200), NILAI decimal)
as
begin
	insert into @temp
	select D.UNITKEY, '' AS KDKEGUNIT, D.MTGKEY, M.KDPER, M.NMPER, sum(isnull(D.NILAI,0)) as NILAI
	from dbo.SKOBDET D left outer join MATANGB M on D.MTGKEY = M.MTGKEY where D.UNITKEY = @Unitkey and D.IDXSKO in (select IDXSKO from SKO where UNITKEY=@Unitkey and TGLSKO <= @Tgl and TGLVALID is not null and IDXSKO<>@Idxsko)
  group by D.UNITKEY,D.MTGKEY, M.KDPER, M.NMPER
	union
	select D.UNITKEY, '' AS KDKEGUNIT, D.MTGKEY, M.KDPER, M.NMPER, sum(isnull(D.NILAI,0)) as NILAI
	from dbo.SKODDET D left outer join MATANGD M on D.MTGKEY = M.MTGKEY where D.UNITKEY = @Unitkey and D.IDXSKO in (select IDXSKO from SKO where UNITKEY=@Unitkey and TGLSKO <= @Tgl and TGLVALID is not null and IDXSKO<>@Idxsko)
  group by D.UNITKEY,D.MTGKEY, M.KDPER, M.NMPER
	union
	select D.UNITKEY, D.KDKEGUNIT, D.MTGKEY, M.KDPER, M.NMPER, sum(isnull(D.NILAI,0)) as NILAI
	from dbo.SKORDET D left outer join MATANGR M on D.MTGKEY = M.MTGKEY where D.UNITKEY = @Unitkey and D.IDXSKO in (select IDXSKO from SKO where UNITKEY=@Unitkey and TGLSKO <= @Tgl and TGLVALID is not null and IDXSKO<>@Idxsko)
  and D.KDKEGUNIT=@Kdkegunit or @Kdkegunit = ''
  group by D.UNITKEY,D.KDKEGUNIT, D.MTGKEY, M.KDPER, M.NMPER
	union
	select D.UNITKEY, '' AS KDKEGUNIT, D.MTGKEY, M.KDPER, M.NMPER, sum(isnull(D.NILAI,0)) as NILAI
	from dbo.SKORTLDET D left outer join MATANGR M on D.MTGKEY = M.MTGKEY where D.UNITKEY = @Unitkey and D.IDXSKO in (select IDXSKO from SKO where UNITKEY=@Unitkey and TGLSKO <= @Tgl and TGLVALID is not null and IDXSKO<>@Idxsko)
  group by D.UNITKEY,D.MTGKEY, M.KDPER, M.NMPER

	return

end




GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







/*
select * from Sp2ddetr where unitkey='38_'
select * from dbo.GetSp2ddet('38_','','2009-12-31')
order by KDPER
--*/
CREATE function [dbo].[GetSp2ddet] (@Unitkey char(10),@Kdkegunit char(10),@Tgl datetime,@Nosp2d varchar(50)) 
returns @temp table (UNITKEY char(10),KDKEGUNIT char(10), MTGKEY char(10), KDPER varchar(30), NMPER varchar(200), NILAI decimal)
as
begin
	insert into @temp
	select D.UNITKEY, '' AS KDKEGUNIT, D.MTGKEY, M.KDPER, M.NMPER, sum(isnull(D.NILAI,0)) as NILAI
	from dbo.SP2DDETB D left outer join MATANGB M on D.MTGKEY = M.MTGKEY where D.UNITKEY = @Unitkey and D.NOSP2D in (select NOSP2D from SP2D where UNITKEY=@Unitkey and TGLSP2D <= @Tgl and TGLVALID is not null)
	and D.NOSP2D <> @Nosp2d
  group by D.UNITKEY,D.MTGKEY, M.KDPER, M.NMPER
	union
	select D.UNITKEY, '' AS KDKEGUNIT, D.MTGKEY, M.KDPER, M.NMPER, sum(isnull(D.NILAI,0)) as NILAI
	from dbo.SP2DDETD D left outer join MATANGD M on D.MTGKEY = M.MTGKEY where D.UNITKEY = @Unitkey and D.NOSP2D in (select NOSP2D from SP2D where UNITKEY=@Unitkey and TGLSP2D <= @Tgl and TGLVALID is not null)
	and D.NOSP2D <> @Nosp2d
  group by D.UNITKEY,D.MTGKEY, M.KDPER, M.NMPER
	union
	select D.UNITKEY, D.KDKEGUNIT, D.MTGKEY, M.KDPER, M.NMPER, sum(isnull(D.NILAI,0)) as NILAI
	from dbo.SP2DDETR D left outer join MATANGR M on D.MTGKEY = M.MTGKEY where D.UNITKEY = @Unitkey and D.NOSP2D in (select NOSP2D from SP2D where UNITKEY=@Unitkey and TGLSP2D <= @Tgl and TGLVALID is not null)
  and (D.KDKEGUNIT=@Kdkegunit or @Kdkegunit = '')
	and D.NOSP2D <> @Nosp2d
  group by D.UNITKEY,D.KDKEGUNIT, D.MTGKEY, M.KDPER, M.NMPER
	union
	select D.UNITKEY, '' AS KDKEGUNIT, D.MTGKEY, M.KDPER, M.NMPER, sum(isnull(D.NILAI,0)) as NILAI
	from dbo.SP2DDETRTL D left outer join MATANGR M on D.MTGKEY = M.MTGKEY where D.UNITKEY = @Unitkey and D.NOSP2D in (select NOSP2D from SP2D where UNITKEY=@Unitkey and TGLSP2D <= @Tgl and TGLVALID is not null)
	and D.NOSP2D <> @Nosp2d
  group by D.UNITKEY,D.MTGKEY, M.KDPER, M.NMPER

	return

end







GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






/*
select * from Sppdetr where unitkey='38_'
select * from dbo.GetSppdet('38_','','2009-12-31')
order by KDPER
--*/
CREATE function [dbo].[GetSppdet] (@Unitkey char(10),@Kdkegunit char(10),@Tgl datetime,@Nospp varchar(50)) 
returns @temp table (UNITKEY char(10),KDKEGUNIT char(10), MTGKEY char(10), KDPER varchar(30), NMPER varchar(200), NILAI decimal)
as
begin
	insert into @temp
	select D.UNITKEY, '' AS KDKEGUNIT, D.MTGKEY, M.KDPER, M.NMPER, sum(isnull(D.NILAI,0)) as NILAI
	from dbo.SPPDETB D left outer join MATANGB M on D.MTGKEY = M.MTGKEY where D.UNITKEY = @Unitkey and D.NOSPP in (select NOSPP from SPP where UNITKEY=@Unitkey and TGSPP <= @Tgl and TGLVALID is not null)
	and D.NOSPP <> @Nospp
	group by D.UNITKEY,D.MTGKEY, M.KDPER, M.NMPER
	union
	select D.UNITKEY, '' AS KDKEGUNIT, D.MTGKEY, M.KDPER, M.NMPER, sum(isnull(D.NILAI,0)) as NILAI
	from dbo.SPPDETD D left outer join MATANGD M on D.MTGKEY = M.MTGKEY where D.UNITKEY = @Unitkey and D.NOSPP in (select NOSPP from SPP where UNITKEY=@Unitkey and TGSPP <= @Tgl and TGLVALID is not null)
	and D.NOSPP <> @Nospp
	group by D.UNITKEY,D.MTGKEY, M.KDPER, M.NMPER
	union
	select D.UNITKEY, D.KDKEGUNIT, D.MTGKEY, M.KDPER, M.NMPER, sum(isnull(D.NILAI,0)) as NILAI
	from dbo.SPPDETR D left outer join MATANGR M on D.MTGKEY = M.MTGKEY where D.UNITKEY = @Unitkey and D.NOSPP in (select NOSPP from SPP where UNITKEY=@Unitkey and TGSPP <= @Tgl and TGLVALID is not null)
	and (D.KDKEGUNIT=@Kdkegunit or @Kdkegunit = '')
	and D.NOSPP <> @Nospp
	group by D.UNITKEY,D.KDKEGUNIT, D.MTGKEY, M.KDPER, M.NMPER
	union
	select D.UNITKEY, '' AS KDKEGUNIT, D.MTGKEY, M.KDPER, M.NMPER, sum(isnull(D.NILAI,0)) as NILAI
	from dbo.SPPDETRTL D left outer join MATANGR M on D.MTGKEY = M.MTGKEY where D.UNITKEY = @Unitkey and D.NOSPP in (select NOSPP from SPP where UNITKEY=@Unitkey and TGSPP <= @Tgl and TGLVALID is not null)
	and D.NOSPP <> @Nospp
	group by D.UNITKEY,D.MTGKEY, M.KDPER, M.NMPER

	return

end





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[GetTriwulan] (@kdbln int)
returns int
as
begin
  declare @temp int
  set @temp =  ((@kdbln - 1) / 3) + 1;
  return @temp
end
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*

*/



create FUNCTION [dbo].[GetValidBPKTU] (@nobpk varchar(50), @unitkey varchar(10))  
RETURNS MONEY AS  
BEGIN 

	--declare nobpk varchar(50), @unitkey varchar(10)
		--set @nobpk = ''
		--set @unitkey = ''
	
	declare @valreturn money, @jumrec int

	set @valreturn = 0
	--print nobpk
    declare @nosp2d varchar(50)
    set @nosp2d = (select top 1 nosp2d from SP2DBPK b WHERE b.nobpk=@nobpk AND b.unitkey=@unitkey)
	set @valreturn = (select SUM(isnull(nilai,0)) FROM BPKDETR WHERE unitkey=@unitkey 
						and nobpk in (select nobpk from SP2DBPK b WHERE b.nosp2d=@nosp2d AND b.unitkey=@unitkey) ) 
					 - (select SUM(isnull(nilai,0)) FROM SP2DDETR a WHERE a.nosp2d=@nosp2d AND a.unitkey=@unitkey)  
    -- 1 SP2D TU mungkin punya lebih dari BPK TU 
	--print @@valreturn

  RETURN @valreturn

END










GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE FUNCTION [dbo].[Kdper] (@kd char(10),@mtgkey char(10))  
RETURNS varchar(30) AS  
BEGIN 
--  declare @kd char(10),@mtgkey char(10)
--  set @kd='1'
--  set @mtgkey='5_'

  declare @kdper varchar(30)
  if(@kd='1')
  begin
    set @kdper = (select top 1 kdper from matangnrc where mtgkey=@mtgkey)
  end else  if(@kd='4')
  begin
    set @kdper = (select top 1 kdper from matangd where mtgkey=@mtgkey)
  end else  if(@kd='5')
  begin
    set @kdper = (select top 1 kdper from matangr where mtgkey=@mtgkey)
  end else if(@kd='6') 
  begin
    set @kdper = (select top 1 kdper from matangb where mtgkey=@mtgkey)
  end
--  select @kdper
  return @kdper
END







GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create FUNCTION [dbo].[KdperAll](@mtgkey char(10))  
RETURNS varchar(30) AS  
BEGIN 
  declare @kdper varchar(30)

    set @kdper = 
        (select top 1 kdper from 
          (
            select kdper from matangnrc where mtgkey=@mtgkey
            union	
            select kdper from matangd where mtgkey=@mtgkey
            union	
            select kdper from matangb where mtgkey=@mtgkey
            union	
            select kdper from matangr where mtgkey=@mtgkey
          )M)

  return @kdper
END





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create FUNCTION [dbo].[Kdpers] (@kd char(10),@mtgkey char(10))  
RETURNS varchar(30) AS  
BEGIN 
  declare @kdpers varchar(30),@babid char(1)

--  if(@kd='1')
--  begin
--    set @babid = (select top 1 babid from matangnrc where mtgkey=@mtgkey)
--    set @kdpers = (select top 1 kdpers from jbabneraca where babid=@babid)
--  end else  if(@kd='4')
--  begin
--    set @babid = (select top 1 babid from matangd where mtgkey=@mtgkey)
--    set @kdpers = (select top 1 kdpers from jbabapbd where babid=@babid)
--  end else  if(@kd='5')
--  begin
--    set @babid = (select top 1 babid from matangr where mtgkey=@mtgkey)
--    set @kdpers = (select top 1 kdpers from jbabapbd where babid=@babid)
--  end else if(@kd='6') 
--  begin
--    set @babid = (select top 1 babid from matangb where mtgkey=@mtgkey)
--    set @kdpers = (select top 1 kdpers from jbabapbd where babid=@babid)
--  end
  set @kdpers='Test'
  return @kdpers
END


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE FUNCTION [dbo].[KDUNIT] (@unitkey char(30))  
RETURNS varchar(30) AS  
BEGIN 
-- return unitkey PPKD di Daftunit dari SET tabel pemda
  declare @kdunit varchar(30)

IF RIGHT(LTRIM(RTRIM(@unitkey)),1) = '_'
  set @kdunit = LEFT((select top 1 kdunit from daftunit where unitkey= @unitkey),10)
ELSE
  set @kdunit = LEFT((select top 1 unitkey from daftunit where kdunit= @unitkey),30)	
  return @kdunit

END







GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
		
	CREATE FUNCTION [dbo].[MAP_KDDOK] (@OLDKDDOK VARCHAR(10))
	RETURNS CHAR(10)
	AS
	BEGIN
	   DECLARE @NEWKDDOK VARCHAR(10)
	   SELECT @NEWKDDOK = CASE RTRIM(@OLDKDDOK)
									WHEN '00.101'  THEN  '03.305'--Undang-undang
									WHEN '00.102'  THEN  '03.305'--Peraturan Pemerintah
									WHEN '00.103'  THEN  '03.305'--Peraturan Presiden
									WHEN '00.104'  THEN  '03.305'--Peraturan Menteri
									WHEN '00.105'  THEN  '03.305'--Peraturan Daerah
									WHEN '00.106'  THEN  '03.305'--Peraturan Kepala Daerah
									WHEN '00.107'  THEN  '03.305'--Surat Edaran
									WHEN '00.108'  THEN  '03.305'--Keputusan Menteri Keuangan
									WHEN '00.109'  THEN  '03.305'--Peraturan Menteri Keuangan
									WHEN '00.110'  THEN  '03.305'--SK Gubernur
									WHEN '00.111'  THEN  '03.305'--Daftar Isian Perincian Anggaran
									WHEN '00.201'  THEN  '03.305'--SK Bendahara
									WHEN '01.101'  THEN  '03.305'--RKA
									WHEN '01.102'  THEN  '03.305'--RAPBD 
									WHEN '01.103'  THEN  '03.305'--Nota Keuangan
									WHEN '01.201'  THEN  '03.305'--Perda APBD
									WHEN '01.202'  THEN  '03.305'--Penjabaran APBD
									WHEN '01.203'  THEN  '03.303'--Anggaran Kas
									WHEN '01.301'  THEN  '03.302'--DPA
									WHEN '01.401'  THEN  '03.401'--SPD
									WHEN '02.101'  THEN  '04.405'--STS
									WHEN '02.102'  THEN  '05.105'--SPJ
									WHEN '02.201'  THEN  '04.205'--SPM
									WHEN '02.202'  THEN  '04.302'--Daftar Penguji
									WHEN '02.203'  THEN  '04.205'--Daftar SPM yang belum cair
									WHEN '02.205'  THEN  '04.105'--Surat Perintah Pencairan Dana
									WHEN '02.301'  THEN  '04.625'--Buku Kas Umum
									WHEN '02.302'  THEN  '04.605'--Buku Simpanan Bank
									WHEN '02.303'  THEN  '05.105'--Laporan Saldo Kas
									WHEN '02.304'  THEN  '04.205'--SPM Giro
									WHEN '02.305'  THEN  '05.105'--Daftar Pengantar Giro
									WHEN '02.401'  THEN  '05.105'--Pengesahan SPJ
									WHEN '02.502'  THEN  '05.105'--Laporan Pajak
									WHEN '03.101'  THEN  '05.105'--Jurnal Umum
									WHEN '03.102'  THEN  '05.105'--Jurnal Penerimaan Kas
									WHEN '03.103'  THEN  '05.105'--Jurnal Pengeluaran Kas
									WHEN '03.104'  THEN  '05.105'--Jurnal Korolari
									WHEN '03.105'  THEN  '05.105'--Jurnal Penutup
									WHEN '03.201'  THEN  '05.105'--Buku Besar
									WHEN '03.202'  THEN  '05.105'--Laporan Harian
									WHEN '03.203'  THEN  '05.105'--Laporan Bulanan
									WHEN '03.204'  THEN  '05.105'--Laporan Triwulanan
									WHEN '03.205'  THEN  '05.105'--Laporan Tahunan
									ELSE '03.305'
								END		   
		   RETURN(@NEWKDDOK)
		END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
		
	CREATE FUNCTION [dbo].[MAP_NOJETRA] (@NOJETRA CHAR(2))
	RETURNS CHAR(2)
	AS
	BEGIN
	   DECLARE @CONV_NOJETRA CHAR(2)
	   SELECT @CONV_NOJETRA = CASE @NOJETRA 
									WHEN '01' THEN '11' --Penerimaan
									WHEN '02' THEN '12' --Pengembalian LS
									WHEN '03' THEN '12' --Pengembalian UP/GU/TU
									WHEN '04' THEN '12' --Pengembalian UYHD Tahun lalu
									WHEN '05' THEN '21' --Pembebanan LS
									WHEN '06' THEN '21' --Pembebanan UP/GU/TU
									WHEN '07' THEN '21' --Pengembalian Penerimaan
									WHEN '08' THEN '13' --Potongan Penerimaan
									WHEN '09' THEN '23' --Potongan LS
									WHEN '10' THEN '23' --Potongan UP/GU/TU
									WHEN '11' THEN '31' --Penerimaan Transfer
									WHEN '12' THEN '32' --Pengeluaran  Transfer
									WHEN '13' THEN '41' --Realisasi UP/GU/TU									
									WHEN '21' THEN '31' --Realisasi Panjar
									WHEN '22' THEN '32' --Penerimaan Sisa Panjar
									ELSE '00'
								END		   
		   RETURN(@CONV_NOJETRA)
		END
		
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE  FUNCTION [dbo].[persapbd](@jetra varchar(10))  
RETURNS char(1) AS  
BEGIN 
  declare @pers char(1)

    set @pers = 
        (select kdpers from jtrnlkas b where b.nojetra = @jetra
         )

  return @pers
END



GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE FUNCTION [dbo].[PPKD] (@configid char(30))  
RETURNS char(30) AS  
BEGIN 
-- return unitkey PPKD di Daftunit dari SET tabel pemda

  declare @unitkey char(10)
  set @unitkey = LEFT((select top 1 configval from pemda where configid= 'cur_skpkd'),10)
  return @unitkey

END


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE    FUNCTION [dbo].[prgkeg] (@kdkeg char(10))  
RETURNS varchar(10) AS  
BEGIN 
  declare @prgrm varchar(10)

set @prgrm = (select top 1 idprgrm from mkegiatan where kdkegunit = @kdkeg)

  return @prgrm
END





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--======================================================================================--
--                             REGISTER UPDATE											--
--======================================================================================--
--		DATE		PIC		TYPE					DESCRIPTION							--
--  ====================================================================================--
--  17 Juli 09		GN		Update			Kebutuhan JurnalAll & JurnalAllSKPD
--
--======================================================================================--


CREATE    FUNCTION [dbo].[rekkas] (@kd char(10), @kdbuk char(10),@kuncikas char(30),@unitkey char(10))  
RETURNS varchar(10) AS  
BEGIN 
  declare @mtgky varchar(10)

  if(@kd='1') and (@kdbuk = 'sts')
  begin
      set @mtgky = (select TOP 1 mtgkey from bkbkas where bkbkas.nobbantu IN(select bkud.nobbantu from BKUD where bkud.nosts IN
                    (select distinct nosts from bkusts where nobkuskpd = @kuncikas and unitkey = @unitkey) and unitkey =@unitkey))
  end else  if(@kd='1') and (@kdbuk = 'sp2D')
  begin
     set @mtgky = (select top 1 mtgkey from bkbkas where bkbkas.NOBBANTU IN (select distinct b.NOBBANTU FROM BKUK b WHERE b.NOSP2D in 
                  (select distinct nosp2d from bkusp2d where nobkuskpd = @kuncikas and unitkey = @unitkey) and unitkey = @unitkey))

  end if(@kd='1') and (@kdbuk = 'stsbkud')
  begin
    set @mtgky = (select mtgkey from bkbkas where bkbkas.nobbantu=(select bkud.nobbantu from BKUD where bkud.nobukas = @kuncikas and unitkey=@unitkey))
--      set @mtgky = (select mtgkey from bkbkas where bkbkas.nobbantu=(select bkud.nobbantu from BKUD where bkud.nosts = 
--                    (select nosts from bkusts where nobkuskpd = @kuncikas and unitkey = @unitkey)))
  end else  if(@kd='1') and (@kdbuk = 'sp2Dbkuk')
  begin
    set @mtgky = (select mtgkey from bkbkas where bkbkas.NOBBANTU=(select b.NOBBANTU FROM BKUK b WHERE b.NOBUKAS = @kuncikas and unitkey=@unitkey))
--      set @mtgky = (select mtgkey from bkbkas where bkbkas.NOBBANTU=(select b.NOBBANTU FROM BKUK b WHERE b.NOSP2D = 
--                    (select nosp2d from bkusp2d where nobkuskpd = @kuncikas and unitkey = @unitkey)))
  end else  if(@kd='2') and (@kdbuk = 'sp2D')  
  begin
--    set @mtgky = (select mtgkey from nrcbend where keybend=(select sp2d.keybend from SP2D inner join BKUK on SP2D.nosp2d=BKUK.nosp2D where nobukas = @kuncikas))
      set @mtgky = (select mtgkey from nrcbend where keybend=(select s.keybend from SP2D s inner join BKUSP2D b on s.nosp2d=b.nosp2D AND b.UNITKEY = s.UNITKEY where nobkuskpd = @kuncikas and b.unitkey = @unitkey))

  end  else if(@kd='2') and (@kdbuk = 'sts')  
  begin
    set @mtgky = (select mtgkey from nrcbend where keybend=( SELECT s.KEYBEND1 FROM STS s INNER JOIN BKUD b ON b.NOSTS = s.NOSTS AND b.UNITKEY = s.UNITKEY WHERE b.NOBUKAS = @kuncikas))
      set @mtgky = (select mtgkey from nrcbend where keybend=( SELECT s.KEYBEND1 FROM STS s INNER JOIN BKUSTS b ON b.NOSTS = s.NOSTS AND b.UNITKEY = s.UNITKEY WHERE b.NOBKUSKPD = @kuncikas and b.unitkey = @unitkey))
 
  end else  if(@kd='2') and (@kdbuk = 'sp2Dbkuk')  
  begin
    set @mtgky = (select mtgkey from nrcbend where keybend=(select sp2d.keybend from SP2D inner join BKUK on SP2D.nosp2d=BKUK.nosp2D where nobukas = @kuncikas))
--      set @mtgky = (select mtgkey from nrcbend where keybend=(select s.keybend from SP2D s inner join BKUSP2D b on s.nosp2d=b.nosp2D AND b.UNITKEY = s.UNITKEY where nobkuskpd = @kuncikas and b.unitkey = @unitkey))

  end  else if(@kd='2') and (@kdbuk = 'stsbkud')  
  begin
    set @mtgky = (select mtgkey from nrcbend where keybend=( SELECT s.KEYBEND1 FROM STS s INNER JOIN BKUD b ON b.NOSTS = s.NOSTS AND b.UNITKEY = s.UNITKEY WHERE b.NOBUKAS = @kuncikas))
--      set @mtgky = (select mtgkey from nrcbend where keybend=( SELECT s.KEYBEND1 FROM STS s INNER JOIN BKUSTS b ON b.NOSTS = s.NOSTS AND b.UNITKEY = s.UNITKEY WHERE b.NOBKUSKPD = @kuncikas and b.unitkey = @unitkey))

 end  else if(@kd='2') and (@kdbuk = 'spj')  
  begin
      set @mtgky = (select mtgkey from nrcbend where keybend=(select pspj.keybend from pspj where nospj = @kuncikas and unitkey = @unitkey))
  end  else if(@kd='2') and (@kdbuk = 'bpk')  
  begin
      set @mtgky = (select mtgkey from nrcbend where keybend=(select bpk.keybend from bpk where nobpk = @kuncikas and unitkey = @unitkey))
  end 

  return @mtgky
END








GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE  FUNCTION [dbo].[rektup] (@mtg char(10),@mtgkey char(10))  
RETURNS varchar(10) AS  
BEGIN 
  declare @rektup varchar(10)

if @mtg = '4'
begin
set @rektup = (select mtgkey from jurtup where notutup = '01.') --- Pendapatan
end else if @mtg = '5'
begin
set @rektup = (select mtgkey from jurtup where notutup = '02.') --- Belanja
end else if @mtg > '5'
begin
set @rektup = (select a.mtgkey from jurtup a inner join tupb b on a.notutup = b.notutup where b.mtgkey = @mtgkey) -- Pembiayaan
end

  return @rektup
END






GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create function [dbo].[ReplaceBlank](@str varchar(1024))
returns varchar(1024) 
as
begin
  return REPLACE(REPLACE(REPLACE(rtrim(@str), CHAR(10), ''), CHAR(13), ''), CHAR(9), '')
end

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
/*
select 'a' + dbo.TabulasiKdper(3) + 'a'
--*/
CREATE FUNCTION [dbo].[TabulasiKdper]
(
  @level int
)
RETURNS varchar(10)
AS
BEGIN
  declare @tmp varchar(10), @i int
  set @tmp=''
  set @i = 2
  
  while (@i <= @level)
  begin
    set @tmp = @tmp + '  '
    set @i = @i + 1
  end

  RETURN @tmp
END


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE    FUNCTION [dbo].[tgldok] (@kd char(10),@nobuk char(30))  
RETURNS datetime AS  
BEGIN 
  declare @tgl datetime

if(@kd='sp2d')
  begin
    set @tgl = (select tglkas from bkuk where nosp2d = @nobuk and tglvalid is not null)
  end else  if(@kd='sts')
begin
  set @tgl = (select tglkas from bkud where nobukas = @nobuk and tglvalid is not null)
end else  if(@kd='spj')
begin
  set @tgl = (select tglspj from pspj where nospj = @nobuk and tglvalid is not null)
end else  if(@kd='bktmem')
begin
  set @tgl = (select tglbm from bktmem where nobm = @nobuk and validbm is not null)
end else  if(@kd='bkrkm')
begin
  set @tgl = (select tglbk from bkrkm where nobk = @nobuk and tglvalid is not null)
end else  if(@kd='bkrkk')
begin
  set @tgl = (select tglbk from bkrkk where nobk = @nobuk and tglvalid is not null)
end else  if(@kd='bkbm')
begin
  set @tgl = (select tglbk from bkbm where nobk = @nobuk and tglvalid is not null)
end else  if(@kd='bkspj')
begin
  set @tgl = (select tglbk from bkspj where nobk = @nobuk and tglvalid is not null)
end

  return @tgl
END








GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create function [SIE].[GetMaxBulan]()
returns char(1)
as
begin

declare @bln int

set @bln = (select max(kd_bulan) from saldolrab)

return @bln

end


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE function [SIE].[GetTahap]()
returns char(1)
as
begin

declare @kdtahap char(1)
set @kdtahap = (select max(kdtahap) from raskb)

return @kdtahap

end

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
select * from sie.GetAPBD('1')
--*/
CREATE function [SIE].[GetAPBD](@kdtahap varchar(2))
returns TABLE
as
return 
(select UNITKEY, sum(NILAID) as NILAID,sum(NILAIR) as NILAIR,sum(NILAIRTL) as NILAIRTL,sum(NILAIBD) as NILAIBD,sum(NILAIBK) as NILAIBK
from
(select UNITKEY, NILAI as NILAID, 0 as NILAIR, 0 as NILAIRTL, 0 as NILAIBD, 0 as NILAIBK
from RASKD R where R.KDTAHAP=@kdtahap
union
select UNITKEY, 0 as NILAID, NILAI as NILAIR, 0 as NILAIRTL, 0 as NILAIBD, 0 as NILAIBK
from RASKR R where R.KDTAHAP=@kdtahap
union
select UNITKEY, 0 as NILAID, 0 as NILAIR, NILAI as NILAIRTL, 0 as NILAIBD, 0 as NILAIBK
from RASKRTL R where R.KDTAHAP=@kdtahap
union
select UNITKEY, 0 as NILAID, 0 as NILAIR, 0 as NILAIRTL, NILAI as NILAIBD, 0 as NILAIBK
from RASKB R
left outer join MATANGB M on R.MTGKEY=M.MTGKEY
where R.KDTAHAP=@kdtahap and M.KDPER in (select KDPER from dbo.GetFilterMatangb('11','5'))
union
select UNITKEY, 0 as NILAID, 0 as NILAIR, 0 as NILAIRTL, 0 as NILAIBD, NILAI as NILAIBK
from RASKB R
left outer join MATANGB M on R.MTGKEY=M.MTGKEY
where R.KDTAHAP=@kdtahap and M.KDPER in (select KDPER from dbo.GetFilterMatangb('12','5'))
)A
group by UNITKEY)




GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








/*
select * from SIE.GetLRAB('2','6')
--*/
CREATE function [SIE].[GetLRAB](@kdtahap varchar(2),@rek varchar(2))
returns TABLE
as
return 
(select R.UNITKEY,R.MTGKEY, left(RNC.KDPER,2) as BAB,left(RNC.KDPER,4) as KELOMPOK,left(RNC.KDPER,6) as JENIS,
left(RNC.KDPER,9) as OBJEK,left(RNC.KDPER,12) as RINCIAN,
BAB.NMPER as UBAB,KLP.NMPER as UKELOMPOK,JNS.NMPER as UJENIS,OBJ.NMPER as UOBJEK,RNC.NMPER as URINCIAN, 
sum(isnull(NILAI,0)) as NILAI,sum(isnull(REALISASI,0)) as REALISASI 
from (
select UNITKEY,MTGKEY,sum(isnull(NILAI,0)) as NILAI, 0 as REALISASI  from RASKB 
where KDTAHAP=sie.GetTahap()
group by UNITKEY,MTGKEY
union

select UNITKEY,MTGKEY,0 as NILAI,sum(isnull(NILAI,0)) as REALISASI
from
(select UNITKEY,MTGKEY,case KDPERS when 'D' then NILAI else -NILAI end as NILAI from
(
select UNITKEY,MTGKEY,NILAI,NOJETRA from SP2DDETB A1
union
select UNITKEY,MTGKEY,NILAI,NOJETRA from RKMDETB A2
)A
left outer join JTRNLKAS J on A.NOJETRA=J.NOJETRA
)K
group by UNITKEY,MTGKEY


)R
left outer join MATANGB RNC on R.MTGKEY=RNC.MTGKEY
left outer join MATANGB BAB on left(RNC.KDPER,2)=BAB.KDPER
left outer join MATANGB KLP on left(RNC.KDPER,4)=KLP.KDPER
left outer join MATANGB JNS on left(RNC.KDPER,6)=JNS.KDPER
left outer join MATANGB OBJ on left(RNC.KDPER,9)=OBJ.KDPER
where BAB.KDPER <> ''
group by R.UNITKEY,R.MTGKEY, left(RNC.KDPER,2), left(RNC.KDPER,4), left(RNC.KDPER,6),
left(RNC.KDPER,9),left(RNC.KDPER,12),
BAB.NMPER,KLP.NMPER,JNS.NMPER,OBJ.NMPER,RNC.NMPER
)










GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








/*
select * from SIE.GetLRAD('2','4')
--*/
CREATE function [SIE].[GetLRAD](@kdtahap varchar(2),@rek varchar(2))
returns TABLE
as
return 
(select R.UNITKEY,R.MTGKEY, left(RNC.KDPER,2) as BAB,left(RNC.KDPER,4) as KELOMPOK,left(RNC.KDPER,6) as JENIS,
left(RNC.KDPER,9) as OBJEK,left(RNC.KDPER,12) as RINCIAN,
BAB.NMPER as UBAB,KLP.NMPER as UKELOMPOK,JNS.NMPER as UJENIS,OBJ.NMPER as UOBJEK,RNC.NMPER as URINCIAN, 
sum(isnull(NILAI,0)) as NILAI,sum(isnull(REALISASI,0)) as REALISASI 
from (
select UNITKEY,MTGKEY,sum(isnull(NILAI,0)) as NILAI, 0 as REALISASI  from RASKD 
where KDTAHAP=sie.GetTahap()
group by UNITKEY,MTGKEY
union


select UNITKEY,MTGKEY,0 as NILAI,sum(isnull(NILAI,0)) as REALISASI
from
(select UNITKEY,MTGKEY,case KDPERS when 'K' then NILAI else -NILAI end as NILAI from
(
select UNITKEY,MTGKEY,NILAI,NOJETRA from SP2DDETD A1
union
select UNITKEY,MTGKEY,NILAI,NOJETRA from RKMDETD A2
)A
left outer join JTRNLKAS J on A.NOJETRA=J.NOJETRA
)K
group by UNITKEY,MTGKEY


)R
left outer join MATANGD RNC on R.MTGKEY=RNC.MTGKEY
left outer join MATANGD BAB on left(RNC.KDPER,2)=BAB.KDPER
left outer join MATANGD KLP on left(RNC.KDPER,4)=KLP.KDPER
left outer join MATANGD JNS on left(RNC.KDPER,6)=JNS.KDPER
left outer join MATANGD OBJ on left(RNC.KDPER,9)=OBJ.KDPER
group by R.UNITKEY,R.MTGKEY, left(RNC.KDPER,2), left(RNC.KDPER,4), left(RNC.KDPER,6),
left(RNC.KDPER,9),left(RNC.KDPER,12),
BAB.NMPER,KLP.NMPER,JNS.NMPER,OBJ.NMPER,RNC.NMPER
)










GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





/*
select * from SIE.GetLRAR('2','5')
--*/
create function [SIE].[GetLRAR](@kdtahap varchar(2),@rek varchar(2))
returns TABLE
as
return 
(
select R.UNITKEY,R.KDKEGUNIT,R.MTGKEY, left(RNC.KDPER,2) as BAB,left(RNC.KDPER,4) as KELOMPOK,left(RNC.KDPER,6) as JENIS,
left(RNC.KDPER,9) as OBJEK,left(RNC.KDPER,12) as RINCIAN,
BAB.NMPER as UBAB,KLP.NMPER as UKELOMPOK,JNS.NMPER as UJENIS,OBJ.NMPER as UOBJEK,RNC.NMPER as URINCIAN, 
sum(isnull(NILAI,0)) as NILAI,sum(isnull(REALISASI,0)) as REALISASI 
from (
select UNITKEY,KDKEGUNIT,MTGKEY,sum(isnull(NILAI,0)) as NILAI, 0 as REALISASI  from RASKR 
where KDTAHAP=sie.GetTahap() 
group by UNITKEY,KDKEGUNIT,MTGKEY
union

select UNITKEY,KDKEGUNIT,MTGKEY,0 as NILAI,sum(isnull(NILAI,0)) as REALISASI
from
(select UNITKEY,KDKEGUNIT,MTGKEY,case KDPERS when 'D' then NILAI else -NILAI end as NILAI from
(
select UNITKEY,KDKEGUNIT,MTGKEY,NILAI,NOJETRA from SP2DDETR A1
union
select UNITKEY,KDKEGUNIT,MTGKEY,NILAI,NOJETRA from RKMDETR A2
union
select UNITKEY,KDKEGUNIT,MTGKEY,NILAI,NOJETRA from BPKDETR A3
)A
left outer join JTRNLKAS J on A.NOJETRA=J.NOJETRA
)K
group by UNITKEY,KDKEGUNIT,MTGKEY

)R
left outer join MATANGR RNC on R.MTGKEY=RNC.MTGKEY
left outer join MATANGR BAB on left(RNC.KDPER,2)=BAB.KDPER
left outer join MATANGR KLP on left(RNC.KDPER,4)=KLP.KDPER
left outer join MATANGR JNS on left(RNC.KDPER,6)=JNS.KDPER
left outer join MATANGR OBJ on left(RNC.KDPER,9)=OBJ.KDPER
group by R.UNITKEY,R.KDKEGUNIT,R.MTGKEY, left(RNC.KDPER,2), left(RNC.KDPER,4), left(RNC.KDPER,6),
left(RNC.KDPER,9),left(RNC.KDPER,12),
BAB.NMPER,KLP.NMPER,JNS.NMPER,OBJ.NMPER,RNC.NMPER
)







GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





/*
select * from SIE.GetLRAR('2','5')
--*/
CREATE function [SIE].[GetLRARTL](@kdtahap varchar(2),@rek varchar(2))
returns TABLE
as
return 
(
select R.UNITKEY,R.MTGKEY, left(RNC.KDPER,2) as BAB,left(RNC.KDPER,4) as KELOMPOK,left(RNC.KDPER,6) as JENIS,
left(RNC.KDPER,9) as OBJEK,left(RNC.KDPER,12) as RINCIAN,
BAB.NMPER as UBAB,KLP.NMPER as UKELOMPOK,JNS.NMPER as UJENIS,OBJ.NMPER as UOBJEK,RNC.NMPER as URINCIAN, 
sum(isnull(NILAI,0)) as NILAI,sum(isnull(REALISASI,0)) as REALISASI 
from (
select UNITKEY,MTGKEY,sum(isnull(NILAI,0)) as NILAI, 0 as REALISASI  from RASKRTL 
where KDTAHAP=sie.GetTahap() 
group by UNITKEY,MTGKEY
union

select UNITKEY,MTGKEY,0 as NILAI,sum(isnull(NILAI,0)) as REALISASI
from
(select UNITKEY,MTGKEY,case KDPERS when 'D' then NILAI else -NILAI end as NILAI from
(
select UNITKEY,MTGKEY,NILAI,NOJETRA from SP2DDETRTL A1
union
select UNITKEY,MTGKEY,NILAI,NOJETRA from RKMDETRTL A2
union
select UNITKEY,MTGKEY,NILAI,NOJETRA from BPKDETRTL A3
)A
left outer join JTRNLKAS J on A.NOJETRA=J.NOJETRA
)K
group by UNITKEY,MTGKEY

)R
left outer join MATANGR RNC on R.MTGKEY=RNC.MTGKEY
left outer join MATANGR BAB on left(RNC.KDPER,2)=BAB.KDPER
left outer join MATANGR KLP on left(RNC.KDPER,4)=KLP.KDPER
left outer join MATANGR JNS on left(RNC.KDPER,6)=JNS.KDPER
left outer join MATANGR OBJ on left(RNC.KDPER,9)=OBJ.KDPER
group by R.UNITKEY,R.MTGKEY, left(RNC.KDPER,2), left(RNC.KDPER,4), left(RNC.KDPER,6),
left(RNC.KDPER,9),left(RNC.KDPER,12),
BAB.NMPER,KLP.NMPER,JNS.NMPER,OBJ.NMPER,RNC.NMPER
)







GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








/*
select * from sie.GetNilaiAPBDPerSKPDPerRincian('1','','')
--*/
CREATE function [SIE].[GetNilaiAPBDPerSKPDPerRincian](@kdtahap varchar(4),@rek varchar(5),@unitkey varchar(10))
returns TABLE
as
return 
(select A.UNITKEY, rtrim(A.KDTAHAP) as KDTAHAP, left(U.KDUNIT,2) as JENISURUSAN,left(U.KDUNIT,5) as URUSAN,U.KDUNIT,U.NMUNIT,
UR1.NMUNIT as JURUS,UR2.NMUNIT as NMURUS,
BAB, KELOMPOK, JENIS, OBJEK, RINCIAN, 
sum(NILAID) as NILAID,sum(NILAIR) as NILAIR,sum(NILAIRTL) as NILAIRTL,sum(NILAIBD) as NILAIBD,sum(NILAIBK) as NILAIBK,
sum(NILAID)+sum(NILAIR)+sum(NILAIRTL)+sum(NILAIBD)+sum(NILAIBK) as NILAI
from
(select UNITKEY, KDTAHAP, left(KDPER,2) as BAB,left(KDPER,4) as KELOMPOK,left(KDPER,6) as JENIS, left(KDPER,9) as OBJEK,left(KDPER,13) as RINCIAN,
NILAI as NILAID, 0 as NILAIR, 0 as NILAIRTL, 0 as NILAIBD, 0 as NILAIBK
from RASKD R 
left outer join MATANGD M on R.MTGKEY=M.MTGKEY
where @kdtahap like '%'+rtrim(R.KDTAHAP)+'%' and (R.UNITKEY=@unitkey or @unitkey='') and (@rek like '%4%' or @rek='')
union all
select UNITKEY, KDTAHAP, left(KDPER,2) as BAB,left(KDPER,4) as KELOMPOK,left(KDPER,6) as JENIS, left(KDPER,9) as OBJEK,left(KDPER,13) as RINCIAN, 
0 as NILAID, NILAI as NILAIR, 0 as NILAIRTL, 0 as NILAIBD, 0 as NILAIBK
from RASKR R 
left outer join MATANGR M on R.MTGKEY=M.MTGKEY
where @kdtahap like '%'+rtrim(R.KDTAHAP)+'%' and (R.UNITKEY=@unitkey or @unitkey='') and (@rek like '%5%' or @rek='')
union all
select UNITKEY, KDTAHAP, left(KDPER,2) as BAB,left(KDPER,4) as KELOMPOK,left(KDPER,6) as JENIS, left(KDPER,9) as OBJEK,left(KDPER,13) as RINCIAN, 
0 as NILAID, 0 as NILAIR, NILAI as NILAIRTL, 0 as NILAIBD, 0 as NILAIBK
from RASKRTL R 
left outer join MATANGR M on R.MTGKEY=M.MTGKEY
where @kdtahap like '%'+rtrim(R.KDTAHAP)+'%' and (R.UNITKEY=@unitkey or @unitkey='') and (@rek like '%5%' or @rek='')
union all
select UNITKEY, KDTAHAP, left(KDPER,2) as BAB,left(KDPER,4) as KELOMPOK,left(KDPER,6) as JENIS, left(KDPER,9) as OBJEK,left(KDPER,13) as RINCIAN, 
0 as NILAID, 0 as NILAIR, 0 as NILAIRTL, NILAI as NILAIBD, 0 as NILAIBK
from RASKB R
left outer join MATANGB M on R.MTGKEY=M.MTGKEY
where @kdtahap like '%'+rtrim(R.KDTAHAP)+'%' and (R.UNITKEY=@unitkey or @unitkey='') and (@rek like '%6%'  or @rek='') and M.KDPER in (select KDPER from dbo.GetFilterMatangb('11','5'))
union all
select UNITKEY, KDTAHAP, left(KDPER,2) as BAB,left(KDPER,4) as KELOMPOK,left(KDPER,6) as JENIS, left(KDPER,9) as OBJEK,left(KDPER,13) as RINCIAN, 
0 as NILAID, 0 as NILAIR, 0 as NILAIRTL, 0 as NILAIBD, NILAI as NILAIBK
from RASKB R
left outer join MATANGB M on R.MTGKEY=M.MTGKEY
where @kdtahap like '%'+rtrim(R.KDTAHAP)+'%' and (R.UNITKEY=@unitkey or @unitkey='') and (@rek like '%6%' or @rek='') and M.KDPER in (select KDPER from dbo.GetFilterMatangb('12','5'))
)A 
inner join DAFTUNIT U on A.UNITKEY=U.UNITKEY
inner join DAFTUNIT UR1 on left(U.KDUNIT,2)=UR1.KDUNIT
inner join DAFTUNIT UR2 on left(U.KDUNIT,5)=UR2.KDUNIT
group by A.UNITKEY,A.KDTAHAP, left(U.KDUNIT,2),left(U.KDUNIT,5),U.KDUNIT,U.NMUNIT,UR1.NMUNIT,UR2.NMUNIT,
BAB, KELOMPOK, JENIS, OBJEK, RINCIAN)










GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







/*
select * from sie.GetNilaiAPBDPerSKPDPerUrusan('1','','')
--*/
create function [SIE].[GetNilaiAPBDPerSKPDPerUrusan](@kdtahap varchar(4),@rek varchar(5),@unitkey varchar(10))
returns TABLE
as
return 
(select A.UNITKEY, rtrim(A.KDTAHAP) as KDTAHAP, left(U.KDUNIT,2) as JENISURUSAN,left(U.KDUNIT,5) as URUSAN,U.KDUNIT,U.NMUNIT,
UR1.NMUNIT as JURUS,UR2.NMUNIT as NMURUS,
BAB, KELOMPOK, JENIS, OBJEK, RINCIAN, 
sum(NILAID) as NILAID,sum(NILAIR) as NILAIR,sum(NILAIRTL) as NILAIRTL,sum(NILAIBD) as NILAIBD,sum(NILAIBK) as NILAIBK,
sum(NILAID)+sum(NILAIR)+sum(NILAIRTL)+sum(NILAIBD)+sum(NILAIBK) as NILAI
from
(select UNITKEY, KDTAHAP, left(KDPER,2) as BAB,left(KDPER,4) as KELOMPOK,left(KDPER,6) as JENIS, left(KDPER,9) as OBJEK,left(KDPER,13) as RINCIAN,
NILAI as NILAID, 0 as NILAIR, 0 as NILAIRTL, 0 as NILAIBD, 0 as NILAIBK
from RASKD R 
left outer join MATANGD M on R.MTGKEY=M.MTGKEY
where @kdtahap like '%'+rtrim(R.KDTAHAP)+'%' and (R.UNITKEY=@unitkey or @unitkey='') and (@rek like '%4%' or @rek='')
union
select UNITKEY, KDTAHAP, left(KDPER,2) as BAB,left(KDPER,4) as KELOMPOK,left(KDPER,6) as JENIS, left(KDPER,9) as OBJEK,left(KDPER,13) as RINCIAN, 
0 as NILAID, NILAI as NILAIR, 0 as NILAIRTL, 0 as NILAIBD, 0 as NILAIBK
from RASKR R 
left outer join MATANGR M on R.MTGKEY=M.MTGKEY
where @kdtahap like '%'+rtrim(R.KDTAHAP)+'%' and (R.UNITKEY=@unitkey or @unitkey='') and (@rek like '%5%' or @rek='')
union
select UNITKEY, KDTAHAP, left(KDPER,2) as BAB,left(KDPER,4) as KELOMPOK,left(KDPER,6) as JENIS, left(KDPER,9) as OBJEK,left(KDPER,13) as RINCIAN, 
0 as NILAID, 0 as NILAIR, NILAI as NILAIRTL, 0 as NILAIBD, 0 as NILAIBK
from RASKRTL R 
left outer join MATANGR M on R.MTGKEY=M.MTGKEY
where @kdtahap like '%'+rtrim(R.KDTAHAP)+'%' and (R.UNITKEY=@unitkey or @unitkey='') and (@rek like '%5%' or @rek='')
union
select UNITKEY, KDTAHAP, left(KDPER,2) as BAB,left(KDPER,4) as KELOMPOK,left(KDPER,6) as JENIS, left(KDPER,9) as OBJEK,left(KDPER,13) as RINCIAN, 
0 as NILAID, 0 as NILAIR, 0 as NILAIRTL, NILAI as NILAIBD, 0 as NILAIBK
from RASKB R
left outer join MATANGB M on R.MTGKEY=M.MTGKEY
where @kdtahap like '%'+rtrim(R.KDTAHAP)+'%' and (R.UNITKEY=@unitkey or @unitkey='') and (@rek like '%6%'  or @rek='') and M.KDPER in (select KDPER from dbo.GetFilterMatangb('11','5'))
union
select UNITKEY, KDTAHAP, left(KDPER,2) as BAB,left(KDPER,4) as KELOMPOK,left(KDPER,6) as JENIS, left(KDPER,9) as OBJEK,left(KDPER,13) as RINCIAN, 
0 as NILAID, 0 as NILAIR, 0 as NILAIRTL, 0 as NILAIBD, NILAI as NILAIBK
from RASKB R
left outer join MATANGB M on R.MTGKEY=M.MTGKEY
where @kdtahap like '%'+rtrim(R.KDTAHAP)+'%' and (R.UNITKEY=@unitkey or @unitkey='') and (@rek like '%6%' or @rek='') and M.KDPER in (select KDPER from dbo.GetFilterMatangb('12','5'))
)A 
inner join DAFTUNIT U on A.UNITKEY=U.UNITKEY
inner join DAFTUNIT UR1 on left(U.KDUNIT,2)=UR1.KDUNIT
inner join DAFTUNIT UR2 on left(U.KDUNIT,5)=UR2.KDUNIT
group by A.UNITKEY,A.KDTAHAP, left(U.KDUNIT,2),left(U.KDUNIT,5),U.KDUNIT,U.NMUNIT,UR1.NMUNIT,UR2.NMUNIT,
BAB, KELOMPOK, JENIS, OBJEK, RINCIAN)









GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
select * from Sie.GetSilpa('2','','')
--*/
create function [SIE].[GetSilpa](@kdtahap varchar(2),@rek varchar(5),@unitkey varchar(10))
returns TABLE
as
return 
(
select top 100 percent  U.UNITKEY,rtrim(A.KDTAHAP) as KDTAHAP,
  U.KDUNIT,UR1.KDUNIT as JENISURUSAN,UR2.KDUNIT as URUSAN,
  U.NMUNIT,UR1.NMUNIT as JURUS,UR2.NMUNIT as NMURUS,
  isnull([4.1.],0) as [4.1.],isnull([4.2.],0) as [4.2.],isnull([4.3.],0) as [4.3.],
  isnull([4.1.],0) + isnull([4.2.],0) + isnull([4.3.],0) as NILAID,
  isnull([5.1.],0) as [5.1.],isnull([5.2.],0) as [5.2.],
  isnull([5.1.],0) + isnull([5.2.],0) as NILAIR,
  (isnull([4.1.],0) + isnull([4.2.],0) + isnull([4.3.],0))-
  (isnull([5.1.],0) + isnull([5.2.],0)) as [S/D],
  isnull([6.1.],0) as [6.1.],isnull([6.2.],0) as [6.2.],
  isnull([6.1.],0) - isnull([6.2.],0) as DELTAB,
  (isnull([4.1.],0) + isnull([4.2.],0) + isnull([4.3.],0))-
  (isnull([5.1.],0) + isnull([5.2.],0))+
  (isnull([6.1.],0) - isnull([6.2.],0)) as SILPA
from (
SELECT
  UNITKEY,KDTAHAP,
  [4.1.],[4.2.],[4.3.],[5.1.],[5.2.],[6.1.],[6.2.]
FROM (
  select UNITKEY,KDTAHAP,left(KDPER,4) as KDPER,sum(isnull(NILAI,0)) as NILAI from RASKD R
  left join MATANGD M on R.MTGKEY=M.MTGKEY
  where (UNITKEY=@unitkey or @unitkey='') and (KDTAHAP=@kdtahap or @kdtahap='')
  group by UNITKEY,KDTAHAP,left(KDPER,4)
  union all
  select UNITKEY,KDTAHAP,left(KDPER,4) as KDPER,sum(isnull(NILAI,0)) as NILAI from RASKR R
  left join MATANGR M on R.MTGKEY=M.MTGKEY
  where (UNITKEY=@unitkey or @unitkey='') and (KDTAHAP=@kdtahap or @kdtahap='')
  group by UNITKEY,KDTAHAP,left(KDPER,4)
  union all
  select UNITKEY,KDTAHAP,left(KDPER,4) as KDPER,sum(isnull(NILAI,0)) as NILAI from RASKRTL R
  left join MATANGR M on R.MTGKEY=M.MTGKEY
  where (UNITKEY=@unitkey or @unitkey='') and (KDTAHAP=@kdtahap or @kdtahap='')
  group by UNITKEY,KDTAHAP,left(KDPER,4)
  union all
  select UNITKEY,KDTAHAP,left(KDPER,4) as KDPER,sum(isnull(NILAI,0)) as NILAI from RASKB R
  left join MATANGB M on R.MTGKEY=M.MTGKEY
  where (UNITKEY=@unitkey or @unitkey='') and (KDTAHAP=@kdtahap or @kdtahap='')
  group by UNITKEY,KDTAHAP,left(KDPER,4)
) AS A
PIVOT
(
  SUM(NILAI)
  FOR KDPER
  IN (
    [4.1.],[4.2.],[4.3.],[5.1.],[5.2.],[6.1.],[6.2.]
  )
) AS B
)A
left outer join DAFTUNIT U on A.UNITKEY=U.UNITKEY
left outer join DAFTUNIT UR1 on UR1.KDUNIT=left(U.KDUNIT,2)
left outer join DAFTUNIT UR2 on UR2.KDUNIT=left(U.KDUNIT,5)
ORDER BY U.UNITKEY,U.KDUNIT,UR1.KDUNIT,UR2.KDUNIT,
U.NMUNIT,UR1.NMUNIT,UR2.NMUNIT

)


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE function [SIE].[GetTotalNilaiB](@kdtahap varchar(2))
returns TABLE
as
return 
(select R.MTGKEY, left(RNC.KDPER,2) as BAB,left(RNC.KDPER,4) as KELOMPOK,left(RNC.KDPER,6) as JENIS,
left(RNC.KDPER,9) as OBJEK,left(RNC.KDPER,12) as RINCIAN,
BAB.NMPER as UBAB,KLP.NMPER as UKELOMPOK,JNS.NMPER as UJENIS,OBJ.NMPER as UOBJEK,RNC.NMPER as URINCIAN, 
NILAI 
from RASKB R
left outer join MATANGB RNC on R.MTGKEY=RNC.MTGKEY
left outer join MATANGB BAB on left(RNC.KDPER,2)=BAB.KDPER
left outer join MATANGB KLP on left(RNC.KDPER,4)=KLP.KDPER
left outer join MATANGB JNS on left(RNC.KDPER,6)=JNS.KDPER
left outer join MATANGB OBJ on left(RNC.KDPER,9)=OBJ.KDPER
where R.KDTAHAP=@kdtahap
)










GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*
select * from Sie.GetTotalNilaiD('1')
--*/
CREATE function [SIE].[GetTotalNilaiD](@kdtahap varchar(2))
returns TABLE
as
return 
(select R.MTGKEY, left(RNC.KDPER,2) as BAB,left(RNC.KDPER,4) as KELOMPOK,left(RNC.KDPER,6) as JENIS,
left(RNC.KDPER,9) as OBJEK,left(RNC.KDPER,12) as RINCIAN,
BAB.NMPER as UBAB,KLP.NMPER as UKELOMPOK,JNS.NMPER as UJENIS,OBJ.NMPER as UOBJEK,RNC.NMPER as URINCIAN, 
NILAI 
from RASKD R
left outer join MATANGD RNC on R.MTGKEY=RNC.MTGKEY
left outer join MATANGD BAB on left(RNC.KDPER,2)=BAB.KDPER
left outer join MATANGD KLP on left(RNC.KDPER,4)=KLP.KDPER
left outer join MATANGD JNS on left(RNC.KDPER,6)=JNS.KDPER
left outer join MATANGD OBJ on left(RNC.KDPER,9)=OBJ.KDPER
where R.KDTAHAP=@kdtahap
)











GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
select * from sie.GetTotalNilaiDPerKelompok('1')
--*/
create function [SIE].[GetTotalNilaiDPerKelompok](@kdtahap varchar(2))
returns TABLE
as
return 
select left(M.KDPER,2) as BAB,left(M.KDPER,4) as KELOMPOK,left(M.KDPER,6) as JENIS,
left(M.KDPER,9) as OBJEK,left(M.KDPER,12) as RINCIAN,
R.MTGKEY, NILAI 
from RASKD R
left outer join MATANGD M on R.MTGKEY=M.MTGKEY
where R.KDTAHAP='1'





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*
select * from sie.GetTotalNilaiR('2','5')
--*/
CREATE function [SIE].[GetTotalNilaiR](@kdtahap varchar(2),@rek varchar(2))
returns TABLE
as
return 
(select R.MTGKEY, left(RNC.KDPER,2) as BAB,left(RNC.KDPER,4) as KELOMPOK,left(RNC.KDPER,6) as JENIS,
left(RNC.KDPER,9) as OBJEK,left(RNC.KDPER,12) as RINCIAN,
BAB.NMPER as UBAB,KLP.NMPER as UKELOMPOK,JNS.NMPER as UJENIS,OBJ.NMPER as UOBJEK,RNC.NMPER as URINCIAN, 
NILAI 
from (
select MTGKEY,sum(NILAI) as NILAI from RASKRTL 
where KDTAHAP=@kdtahap and @rek in ('5','51')
group by MTGKEY
union all
select MTGKEY,sum(NILAI) as NILAI from RASKR 
where KDTAHAP=@kdtahap and @rek in ('5','52')
group by MTGKEY
)R
left outer join MATANGR RNC on R.MTGKEY=RNC.MTGKEY
left outer join MATANGR BAB on left(RNC.KDPER,2)=BAB.KDPER
left outer join MATANGR KLP on left(RNC.KDPER,4)=KLP.KDPER
left outer join MATANGR JNS on left(RNC.KDPER,6)=JNS.KDPER
left outer join MATANGR OBJ on left(RNC.KDPER,9)=OBJ.KDPER
)






GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create FUNCTION [SIE].[Kasharian] () 
--(	
	-- Add the parameters for the function here
--	<@param1, sysname, @p1> <Data_Type_For_Param1, , int>, 
--	<@param2, sysname, @p2> <Data_Type_For_Param2, , char>
--)
RETURNS TABLE 
AS
RETURN 
(
	-- Add the SELECT statement with parameter references here

SELECT nmbank,norekb,nmbkas,year(tanggal) tahun,month(tanggal) bulan,tanggal,uraian,terima,keluar,nilai FROM (
SELECT d.nmbank,b.NOREKB,b.NMBKAS,k.tglkas tanggal,uraian,sum(case when k.kolom = 'terima' then nilai else 0 END) Terima,sum(case when k.kolom = 'keluar' then nilai else 0 END) Keluar,sum(case when kolom = 'terima' then nilai ELSE -nilai END) nilai
FROM (
select bk.NOBBANTU, '0001' nobukas, 'saldo' nobuktikas,'1/1/'+rtrim(ltrim((select configval from pemda where configid = 'cur_thang'))) tglkas,'Terima' kolom,'saldo awal' uraian, sladorekb nilai from bkbkas bk
union all
select b.NOBBANTU, b.nobukas,b.nobuktikas,b.tglkas,'Terima' kolom,uraian,
isnull((select sum(nilai) from rkmdetd d where d.nosts = b.nosts and d.unitkey = b.unitkey),0)
+isnull((select sum(nilai) from rkmdetb d where d.nosts = b.nosts and d.unitkey = b.unitkey),0)
+isnull((select sum(nilai) from rkmdetr d where d.nosts = b.nosts and d.unitkey = b.unitkey),0)
+isnull((select sum(nilai) from rkmdetrtl d where d.nosts = b.nosts and d.unitkey = b.unitkey),0)
--+isnull((select sum(case when nojetra <> '31' then nilai else -nilai end) from rkmdett d where d.nosts = b.nosts and d.unitkey = b.unitkey),0)
nilai from BKUD b 
union ALL
SELECT r.NOBBANTU,b.NOBUKAS,b.NOBUKTIKAS,b.TGLKAS,'Terima' kolom,b.URAIAN, nilai
  FROM RKMDETT r INNER JOIN BKUD b ON  b.UNITKEY = r.UNITKEY AND b.NOSTS = r.NOSTS
union ALL
SELECT b.NOBBANTU,b.NOBUKAS,b.NOBUKTIKAS,b.TGLKAS,'Keluar' kolom,b.URAIAN, nilai
  FROM RKMDETT r INNER JOIN BKUD b ON b.UNITKEY = r.UNITKEY AND b.NOSTS = r.NOSTS
union all
select b.NOBBANTU,b.nobukas,b.nobuktikas,b.tglkas,'Keluar' kolom,uraian,
isnull((select sum(case when nojetra = '21' then nilai else -nilai end) from sp2ddetd d where d.nosp2d = b.nosp2d and d.unitkey = b.unitkey),0)
+isnull((select sum(case when nojetra = '21' then nilai else -nilai end) from sp2ddetb d where d.nosp2d = b.nosp2d and d.unitkey = b.unitkey),0)
+isnull((select sum(case when nojetra = '21' then nilai else -nilai end) from sp2ddetr d where d.nosp2d = b.nosp2d and d.unitkey = b.unitkey),0)
+isnull((select sum(case when nojetra = '21' then nilai else -nilai end) from sp2ddetrtl d where d.nosp2d = b.nosp2d and d.unitkey = b.unitkey),0)
nilai from BKUK b  --ORDER BY b.TGLKAS
) k INNER JOIN BKBKAS b ON b.NOBBANTU = k.NOBBANTU
INNER JOIN DAFTBANK d ON d.KDBANK = b.KDBANK
GROUP BY k.tglkas,k.NOBBANTU,d.NMBANK,b.NMBKAS,b.NOREKB,uraian
) jadi
)

GO

